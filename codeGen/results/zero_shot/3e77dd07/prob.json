"{\"statement\": \"Task: Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. A string can be represented as a binary tree by recursively partitioning it into two non-empty substrings. To scramble a string, we can swap the children of any non-leaf node.\\n\\nInput: The input consists of two strings s1 and s2 of the same length, which arrive from standard input.\\n\\nOutput: The output should be a boolean value indicating whether s2 is a scrambled string of s1.\\n\\nConstraints: The input strings have a length of at most 30.\", \"editorial\": \"\", \"tag\": \"['String algorithms', 'Dynamic programming']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"leetcode\", \"url\": \"https://leetcode.com/problems/scramble-string/\", \"sample_test_cases\": [{\"input\": [\"\\\"great\\\"\", \"\\\"rgeat\\\"\"], \"output\": true}]}"