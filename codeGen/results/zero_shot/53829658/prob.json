"{\"statement\": \"Task: Given a directed tree with n vertices, choose a capital city such that the minimum number of edges need to be reversed in order to reach any other city from the capital is minimized.\\n\\nInput: The input consists of an integer n, representing the number of cities in Treeland. Next n-1 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers si, ti (1 \\u2264 si, ti \\u2264 n; si \\u2260 ti) \\u2014 the numbers of cities, connected by that road. The i-th road is oriented from city si to city ti. The input is provided through standard input.\\n\\nOutput: In the first line print the minimum number of roads to be inversed if the capital is chosen optimally. In the second line print all possible ways to choose the capital \\u2014 a sequence of indexes of cities in the increasing order.\\n\\nConstraints: 2 \\u2264 n \\u2264 2\\u00b710^5, and si and ti are between 1 and n, where si is not equal to ti.\", \"editorial\": \"\", \"tag\": \"['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Dynamic programming']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/219/D\", \"sample_test_cases\": [{\"input\": \"15\\n15 6\\n2 15\\n14 15\\n15 12\\n1 2\\n10 15\\n7 4\\n13 7\\n11 2\\n5 2\\n7 2\\n3 2\\n7 8\\n9 15\\n\", \"output\": \"7\\n13\\n\"}, {\"input\": \"2\\n1 2\\n\", \"output\": \"0\\n1\\n\"}, {\"input\": \"12\\n10 7\\n6 10\\n8 10\\n4 12\\n10 4\\n3 12\\n1 2\\n2 7\\n4 5\\n11 5\\n11 9\\n\", \"output\": \"5\\n1 6 8\\n\"}, {\"input\": \"13\\n7 13\\n5 4\\n5 1\\n11 12\\n8 3\\n13 4\\n10 7\\n11 5\\n8 13\\n2 8\\n10 6\\n4 9\\n\", \"output\": \"4\\n2 10\\n\"}, {\"input\": \"10\\n9 3\\n3 8\\n4 3\\n3 5\\n7 8\\n10 3\\n2 3\\n6 2\\n3 1\\n\", \"output\": \"4\\n6\\n\"}, {\"input\": \"8\\n1 2\\n3 2\\n4 3\\n4 5\\n6 5\\n6 7\\n8 7\\n\", \"output\": \"3\\n4 6 8\\n\"}, {\"input\": \"10\\n2 3\\n1 8\\n9 5\\n5 4\\n6 10\\n4 8\\n5 6\\n7 6\\n5 3\\n\", \"output\": \"3\\n9\\n\"}, {\"input\": \"10\\n5 4\\n6 5\\n10 1\\n2 5\\n9 8\\n1 3\\n7 10\\n2 3\\n5 9\\n\", \"output\": \"2\\n7\\n\"}, {\"input\": \"14\\n13 10\\n5 14\\n9 4\\n8 12\\n10 1\\n5 2\\n3 6\\n11 2\\n13 2\\n13 7\\n8 2\\n4 5\\n1 3\\n\", \"output\": \"3\\n9\\n\"}, {\"input\": \"11\\n3 10\\n4 7\\n11 7\\n8 2\\n6 9\\n9 3\\n5 9\\n1 3\\n3 8\\n7 3\\n\", \"output\": \"5\\n4 5 6 11\\n\"}, {\"input\": \"15\\n15 6\\n2 15\\n14 15\\n15 12\\n1 2\\n10 15\\n7 4\\n13 7\\n11 1\\n5 2\\n7 2\\n3 2\\n7 8\\n9 15\\n\", \"output\": \"7\\n11 13\\n\"}, {\"input\": \"10\\n9 3\\n3 8\\n4 3\\n3 5\\n7 8\\n10 3\\n2 5\\n6 2\\n3 1\\n\", \"output\": \"5\\n4 6 9 10\\n\"}, {\"input\": \"8\\n1 4\\n3 2\\n4 3\\n4 5\\n6 5\\n6 7\\n8 7\\n\", \"output\": \"2\\n1\\n\"}, {\"input\": \"10\\n5 4\\n6 5\\n10 1\\n2 5\\n9 8\\n1 3\\n7 5\\n2 3\\n5 9\\n\", \"output\": \"3\\n10\\n\"}, {\"input\": \"14\\n13 10\\n4 14\\n9 4\\n8 12\\n10 1\\n5 2\\n3 6\\n11 2\\n13 2\\n13 7\\n8 2\\n4 5\\n1 3\\n\", \"output\": \"3\\n9\\n\"}]}"