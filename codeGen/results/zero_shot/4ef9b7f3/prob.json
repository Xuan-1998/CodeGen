"{\"statement\": \"Task: Given a queue of n monsters with weights a_1, a_2, ..., a_n, and a final queue of k monsters with weights b_1, b_2, ..., b_k, determine if it is possible to obtain the final queue by allowing monsters to eat each other. If it is possible, output one of the possible orders of eating monsters that led to the current queue.\\n\\nInput: The input consists of two lines. The first line contains a single integer n, the number of monsters in the initial queue. The second line contains n integers a_1, a_2, ..., a_n, representing the initial weights of the monsters. The third line contains a single integer k, the number of monsters in the final queue. The fourth line contains k integers b_1, b_2, ..., b_k, representing the weights of the monsters in the final queue. Input arrives from standard input.\\n\\nOutput: If it is impossible to obtain the final queue, output \\\"NO\\\" (without quotes). Otherwise, output \\\"YES\\\" (without quotes) in the first line, followed by the chronological order of actions that led to the final queue. Each line should contain the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating, the queue is enumerated again. If there are several answers, print any of them.\\n\\nConstraints: 1 \\u2264 n \\u2264 500, 1 \\u2264 k \\u2264 n, 1 \\u2264 a_i \\u2264 10^6, 1 \\u2264 b_j \\u2264 5*10^8.\", \"editorial\": \"\", \"tag\": \"['Greedy algorithms', 'Dynamic programming', 'Amortized analysis', 'Constructive algorithms']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/733/C\", \"sample_test_cases\": [{\"input\": \"6\\n1 2 2 2 1 2\\n2\\n5 5\\n\", \"output\": \"YES\\n2 L\\n1 R\\n4 L\\n3 L\\n\"}, {\"input\": \"5\\n1 2 3 4 5\\n1\\n15\\n\", \"output\": \"YES\\n5 L\\n4 L\\n3 L\\n2 L\\n\"}, {\"input\": \"5\\n1 1 1 3 3\\n3\\n2 1 6\\n\", \"output\": \"NO\"}, {\"input\": \"5\\n1 1 1 1 2\\n3\\n1 1 4\\n\", \"output\": \"YES\\n5 L\\n4 L\\n\"}, {\"input\": \"5\\n1 1 1 1 1\\n4\\n1 1 2 1\\n\", \"output\": \"NO\"}]}"