"{\"statement\": \"Task: Given a directed graph with $n$ vertices and $m$ edges, and a fixed path from vertex $s$ to vertex $t$, determine the minimum and maximum number of times the shortest path from the current vertex to $t$ needs to be recomputed. At each vertex, the system shows the shortest path from the current vertex to $t$. If the driver chooses to follow the recommended path, the system maintains the path. Otherwise, the system recomputes the shortest path from the current vertex to $t$.\\n\\nInput: The first line of input contains two integers $n$ and $m$ ($2 \\\\leq n \\\\leq m \\\\leq 2 \\\\cdot 10^5$), representing the number of vertices and edges in the graph, respectively. The next $m$ lines contain two integers $u$ and $v$ ($1 \\\\leq u, v \\\\leq n$, $u \\\\neq v$) representing a directed edge from vertex $u$ to vertex $v$. The next line contains an integer $k$ ($2 \\\\leq k \\\\leq n$) representing the number of vertices in the fixed path from $s$ to $t$. The last line contains $k$ integers $p_1, p_2, \\\\dots, p_k$ ($1 \\\\leq p_i \\\\leq n$), representing the vertices in the fixed path from $s$ to $t$ in order.\\n\\nOutput: The output should consist of a single line containing two integers, the minimum and maximum number of times the shortest path from the current vertex to $t$ needs to be recomputed.\\n\\nConstraints: All vertices in the fixed path are distinct and there exists a directed edge between consecutive vertices in the path. The sum of $n + m$ over all test cases is at most $10^6$.\", \"editorial\": \"\", \"tag\": \"['dynamic programming']\", \"difficulties\": \"MEDIUM\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/1319/D\", \"sample_test_cases\": [{\"input\": \"6 9\\n1 5\\n5 4\\n1 2\\n2 3\\n3 4\\n4 1\\n2 6\\n6 4\\n4 2\\n4\\n1 2 3 4\\n\", \"output\": \"1 2\\n\"}, {\"input\": \"7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\\n7\\n1 2 3 4 5 6 7\\n\", \"output\": \"0 0\\n\"}, {\"input\": \"8 13\\n8 7\\n8 6\\n7 5\\n7 4\\n6 5\\n6 4\\n5 3\\n5 2\\n4 3\\n4 2\\n3 1\\n2 1\\n1 8\\n5\\n8 7 5 2 1\\n\", \"output\": \"0 3\\n\"}, {\"input\": \"20 50\\n2 3\\n18 10\\n11 6\\n11 1\\n18 17\\n18 7\\n15 20\\n6 11\\n11 2\\n8 2\\n14 2\\n20 1\\n1 19\\n17 2\\n5 17\\n15 17\\n19 12\\n16 9\\n12 4\\n19 2\\n2 19\\n14 3\\n6 5\\n20 19\\n2 16\\n1 12\\n2 12\\n9 2\\n13 18\\n2 13\\n10 4\\n12 8\\n12 3\\n17 5\\n18 12\\n18 11\\n2 17\\n6 20\\n19 20\\n7 9\\n3 2\\n19 15\\n10 20\\n13 12\\n4 3\\n18 15\\n13 9\\n2 11\\n19 14\\n16 11\\n8\\n18 10 4 3 2 19 12 8\\n\", \"output\": \"3 3\\n\"}, {\"input\": \"20 50\\n20 3\\n5 16\\n1 3\\n10 11\\n10 15\\n15 9\\n20 9\\n14 6\\n16 5\\n13 4\\n11 5\\n3 20\\n13 17\\n11 8\\n11 6\\n12 14\\n16 18\\n17 13\\n18 7\\n3 1\\n8 10\\n17 15\\n7 2\\n9 13\\n5 11\\n6 1\\n2 16\\n8 18\\n10 8\\n4 13\\n9 15\\n14 12\\n1 6\\n9 20\\n7 18\\n6 14\\n7 6\\n18 16\\n2 7\\n3 11\\n15 17\\n3 12\\n14 10\\n4 14\\n19 4\\n11 10\\n4 19\\n8 12\\n17 8\\n12 8\\n16\\n7 2 16 5 11 8 10 15 9 13 4 14 6 1 3 20\\n\", \"output\": \"5 8\\n\"}, {\"input\": \"20 50\\n18 11\\n17 13\\n19 6\\n13 18\\n20 9\\n10 20\\n6 13\\n13 9\\n2 1\\n17 14\\n11 20\\n8 7\\n14 9\\n10 14\\n8 16\\n11 12\\n1 3\\n4 7\\n7 15\\n19 2\\n9 14\\n15 17\\n14 7\\n4 6\\n20 19\\n1 19\\n13 4\\n15 8\\n6 9\\n6 17\\n1 20\\n3 1\\n16 15\\n19 8\\n15 14\\n7 14\\n16 18\\n16 5\\n5 9\\n6 4\\n11 16\\n12 14\\n3 17\\n2 13\\n5 4\\n12 10\\n18 15\\n5 1\\n6 14\\n1 13\\n12\\n10 20 9 14 7 15 17 13 18 11 16 5\\n\", \"output\": \"2 2\\n\"}, {\"input\": \"20 50\\n3 12\\n5 18\\n17 6\\n19 12\\n10 9\\n18 12\\n12 16\\n11 15\\n2 12\\n12 18\\n1 12\\n20 3\\n16 12\\n6 12\\n10 12\\n4 12\\n12 1\\n5 12\\n9 6\\n13 12\\n17 1\\n10 5\\n20 12\\n11 12\\n7 12\\n20 16\\n6 2\\n13 14\\n9 4\\n16 7\\n1 16\\n5 13\\n6 17\\n9 2\\n19 16\\n18 11\\n20 19\\n12 20\\n20 13\\n14 17\\n14 12\\n8 12\\n10 15\\n15 12\\n17 12\\n2 8\\n5 8\\n9 12\\n12 10\\n12 9\\n4\\n18 12 20 19\\n\", \"output\": \"0 0\\n\"}, {\"input\": \"2 2\\n1 2\\n2 1\\n2\\n1 2\\n\", \"output\": \"0 0\\n\"}]}"