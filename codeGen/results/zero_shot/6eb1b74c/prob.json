"{\"statement\": \"Task: Given a text $t$ and a set of $n$ strings $s_1, s_2, \\\\dots, s_n$, the task is to color all the letters of the text in red using the strings in the set. In one step, any occurrence of any string $s_i$ in the text $t$ can be chosen and the corresponding characters of the text can be colored in red. The minimum number of steps needed to color all letters $t$ in red and how to do it needs to be determined. If it is impossible to color all letters of the text $t$ in red, output -1. \\n\\nInput: The input consists of multiple test cases. For each test case, the first line contains a string $t$ of length $|t|$. The second line contains an integer $n$ which represents the number of strings in the set. This is followed by $n$ lines, each containing a string $s_i$ of length $|s_i|$. The input arrives from standard input.\\n\\nOutput: For each test case, the output should be printed on a separate line. If it is impossible to color all the letters of the text in red, print a single line containing the number -1. Otherwise, on the first line, print the number $m$ which is the minimum number of steps it will take to turn all the letters $t$ red. Then in the next $m$ lines print pairs of indices: $w_j$ and $p_j$ ($1 \\\\le j \\\\le m$), which denote that the string with index $w_j$ was used as a substring to cover the occurrences starting in the text $t$ from position $p_j$. The pairs can be output in any order.\\n\\nConstraints: $1 \\\\le q \\\\le 100$, $1 \\\\le |t| \\\\le 100$, $1 \\\\le n \\\\le 10$, $1 \\\\le |s_i| \\\\le 10$.\", \"editorial\": \"\", \"tag\": \"['String algorithms', 'Greedy algorithms', 'Complete search', 'Dynamic programming', 'Data structures']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/1714/D\", \"sample_test_cases\": [{\"input\": \"6\\nbababa\\n2\\nba\\naba\\ncaba\\n2\\nbac\\nacab\\nabacabaca\\n3\\naba\\nbac\\naca\\nbaca\\n3\\na\\nc\\nb\\ncodeforces\\n4\\ndef\\ncode\\nefo\\nforces\\naaaabbbbcccceeee\\n4\\neeee\\ncccc\\naaaa\\nbbbb\\n\", \"output\": \"3\\n1 1\\n2 2\\n2 4\\n-1\\n4\\n1 1\\n3 3\\n2 6\\n3 7\\n4\\n3 1\\n1 2\\n2 3\\n1 4\\n2\\n2 1\\n4 5\\n4\\n3 1\\n4 5\\n2 9\\n1 13\\n\"}, {\"input\": \"1\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\\n10\\na\\naa\\naaa\\naaaa\\naaaaa\\naaaaaa\\naaaaaaa\\naaaaaaaa\\naaaaaaaaa\\naaaaaaaaaa\\n\", \"output\": \"-1\\n\"}, {\"input\": \"1\\nabcdefgh\\n3\\nabcde\\ndefg\\ncdefgh\\n\", \"output\": \"2\\n1 1\\n3 3\\n\"}, {\"input\": \"1\\nabcabcab\\n3\\nabcab\\nca\\nb\\n\", \"output\": \"2\\n1 1\\n1 4\\n\"}, {\"input\": \"1\\nabcdefabcde\\n4\\nabcde\\ndefa\\nbcde\\nabcdef\\n\", \"output\": \"2\\n4 1\\n1 7\\n\"}, {\"input\": \"1\\nabcde\\n4\\nabc\\ncd\\ne\\nbcde\\n\", \"output\": \"2\\n1 1\\n4 2\\n\"}, {\"input\": \"1\\nababacabababa\\n3\\nababa\\nac\\nbacabababa\\n\", \"output\": \"2\\n1 1\\n3 4\\n\"}, {\"input\": \"1\\nabcdefghij\\n6\\nabcd\\nef\\ngh\\nij\\ncdefgh\\nhij\\n\", \"output\": \"3\\n1 1\\n5 3\\n6 8\\n\"}, {\"input\": \"1\\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd\\n10\\nc\\nc\\nc\\nc\\nc\\nc\\nc\\nc\\nc\\nc\\n\", \"output\": \"-1\\n\"}, {\"input\": \"1\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n10\\na\\naa\\naaa\\naaaa\\naaaaa\\naaaaaa\\naaaaaaa\\naaaaaaaa\\naaaaaaaaa\\naaaaaaaaaa\\n\", \"output\": \"10\\n10 1\\n10 11\\n10 21\\n10 31\\n10 41\\n10 51\\n10 61\\n10 71\\n10 81\\n10 88\\n\"}, {\"input\": \"1\\nabc\\n3\\nabc\\nab\\nc\\n\", \"output\": \"1\\n1 1\\n\"}, {\"input\": \"1\\nbbbbaabaabbbbbaabaabaabbaaaaabaabababaaabbbaaabbbbbbbbbaababbbbbbaaabaaaaaaaba\\n9\\nbaa\\naaa\\nbbb\\nbab\\naaa\\nabb\\nbbb\\nbab\\naaa\\n\", \"output\": \"-1\\n\"}, {\"input\": \"1\\nabcdef\\n4\\nabc\\nde\\nef\\nbcdef\\n\", \"output\": \"2\\n1 1\\n4 2\\n\"}, {\"input\": \"1\\nabcdefgabcde\\n5\\nabcde\\ndefa\\nbcdeg\\nabcdef\\ndefg\\n\", \"output\": \"3\\n4 1\\n5 4\\n1 8\\n\"}, {\"input\": \"1\\nabcdefabcde\\n6\\nabcd\\ndefa\\nbcde\\nbcdef\\ncdefab\\nefab\\n\", \"output\": \"3\\n1 1\\n5 3\\n3 8\\n\"}]}"