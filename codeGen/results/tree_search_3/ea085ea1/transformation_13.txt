Dynamic Programming: The problem can be solved by considering all possible substrings of str1 and checking if they are present in str2. 
The state expression is dp[i][j] = maximum number of common non-overlapping substrings found so far when considering all substrings ending at index i in str1 and j in str2.
dp[i][j] = max(dp[i-1][k] for k in range(j)) if str1[i] == str2[j] else 0
Memoization by storing the results of expensive function calls and reusing them when the same inputs occur again.

Edge cases:
When i or j reaches 0, return the maximum number of common non-overlapping substrings found so far.
