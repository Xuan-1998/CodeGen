===BEGIN PLAN===
The problem can be solved using dynamic programming with tabulation: Create an array dp of size N+1, where dp[i] represents the maximum length of common substring ending at position i in both strings. The base case is a substring of length 0.

state: an array storing for each position i in the strings whether there exists a common substring of maximum length i

Use dynamic programming with tabulation to fill the state table
Iterate over the characters in str1 and str2 simultaneously, comparing each pair of characters to determine whether they are the same or not. If they are the same, it means a common substring has been found, so update dp[i] accordingly.

Consider all possible lengths of substrings that end at position i and have been checked before.
Handle edge cases such as an empty string or two strings with different lengths
Store the maximum length of common substring found so far in a variable and update this variable whenever you find a new longest common substring
===END PLAN===
