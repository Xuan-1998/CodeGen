===BEGIN PLAN===
Consider a dynamic programming approach where you maintain an array dp[i] that stores the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t. The optimal substructure is when you reach vertex i, and then you need to decide whether to follow the recommended path or not.

dp[i] is 0 if vertex i is in the fixed path, and 1 + dp[v] otherwise (where v is the previous vertex in the path),

dp[i] represents the minimum number of recomputations needed to reach vertex i from s, considering all shortest paths.

Using dynamic programming with a bottom-up approach, initializing an array dp[0...n-1] where dp[i] is the minimum and maximum number of recomputations needed to reach t from i.
===END PLAN===
