===BEGIN PLAN===
Consider a dynamic programming approach where you maintain an array dp[i] that stores the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t. The optimal substructure is when you reach vertex i, and then you need to decide whether to follow the recommended path or not.

let dp[i][j] be the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t, after j recomputations; then, dp[i][0] = 0 if i is in the fixed path, and 1 + max(dp[v][0]) otherwise (where v is the previous vertex in the path).

dp[i] stores the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t
You can implement a 2D dynamic programming table dp[][] with dimensions n x m where dp[i][j] stores the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t, after j recomputations. The base case is when i = t, and you need to decide whether to follow the recommended path or not.
===END PLAN===
