===BEGIN PLAN===
Think about a dynamic programming approach where you maintain an array dp[i] that stores the minimum number of recomputations needed from vertex i to t, considering all shortest paths from i to t. The optimal substructure is when you reach vertex i, and then you need to decide whether to follow the recommended path or not.

dp[0] = 0 (base case for starting vertex s)

For each vertex i in range(1, n):
    dp[i] = min(dp[j] + 1 for j in range(i+1, t+1) if has_edge(j, i)) if i != t, float('inf'), otherwise
        - This represents the minimum number of recomputations needed when you reach vertex i and decide to follow the recommended path.
    dp[i] = max(dp[j] for j in range(i, t+1) if has_edge(j, i)) if i != t, 0, float('inf') (store this value in a memoization dictionary)
        - This represents the maximum number of recomputations needed when you reach vertex i and decide not to follow the recommended path.

To find the minimum and maximum number of recomputations, you can simply return dp[t] and max(dp) respectively at the end.

===END PLAN===
