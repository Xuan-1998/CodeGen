===BEGIN PLAN===
Think about a dynamic programming approach where you maintain an array f[i] that stores the maximum number of recomputations needed from vertex i to t, considering all shortest paths from i to t. The optimal substructure is when you reach vertex i, and then you need to decide whether to follow the recommended path or not.

Let's break down the plan:

1. Initialize an array f[i] for each vertex i from 0 to n-1, where f[i] represents the maximum number of recomputations needed from vertex i to t.
2. For each vertex i, calculate the minimum number of recomputations needed from vertex i to t by considering all shortest paths from i to t.

To do this, we can use a transition relation that looks at the previous vertices and their corresponding recomputation counts. This allows us to compute the minimum number of recomputations needed from each vertex i to t.

The state could be the current vertex i, the previous vertex j, and the maximum number of recomputations needed from vertex j to t.

3. The transition relation would be to compute the minimum number of recomputations needed from each vertex i to t, considering all shortest paths from i to t.

By doing this, we can ensure that we are considering all possible paths from each vertex and computing the minimum number of recomputations needed accordingly.

4. Finally, return the minimum and maximum values of f[i] as the answer, which represents the minimum and maximum number of times the shortest path from the current vertex to t needs to be recomputed.

===END PLAN===
