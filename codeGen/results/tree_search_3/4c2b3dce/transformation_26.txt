Determine the longest common prefix between 'AB' and 'BA', and then check if it appears in the string as a substring.

dp[i][j] is a boolean indicating whether the substring s[0:i] contains the substring 'AB' (if j=0) or 'BA' (if j=1).
dp[i][j] is a boolean indicating whether the substring s[0:i] has the same first character as 'AB' (if j=0) or 'BA' (if j=1).

Initialize dp[0][0] and dp[0][1] to reflect the base case of checking for 'A' or 'B' in the first character.

For i from 1 to len(s):
    For j from 0 to 1:
        If j==0 and s[i-1]=='A':
            dp[i][j]=True
        Else if j==1 and s[i-1]=='B':
            dp[i][j]=True

For i from 1 to len(s):
    For j from 0 to 1:
        If j==0 and not(dp[i-1][1]):
            dp[i][j]=False
        Else if j==1 and not(dp[i-1][0]):
            dp[i][j]=False

If dp[len(s)][0] or dp[len(s)][1]:
    Print "YES"
Else:
    Print "NO"
