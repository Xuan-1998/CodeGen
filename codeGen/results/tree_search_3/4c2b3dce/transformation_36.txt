// Initialize dp array with all false values
dp = new boolean[n + 1];

// Set dp[0] to true because an empty string can be considered as having no 'AB' and 'BA'
dp[0] = true;

// Iterate over the string from left to right
for (int i = 1; i <= n; i++) {
    // Check if current substring ends with 'AB'
    if (i >= 3 && s.substring(i - 3, i).equals("AB")) {
        dp[i] = dp[i - 3];
    } else {
        // If not, check if the remaining part of the string contains 'BA'
        if (i + 2 <= n && s.substring(i, i + 2).equals("BA")) {
            dp[i] = dp[i - 2];
        } else {
            // If neither condition is met, set dp[i] to false
            dp[i] = false;
        }
    }
}

// Finally, check if the entire string contains 'AB' and 'BA'
if (dp[n]) {
    System.out.println("YES");
} else {
    System.out.println("NO");
}
