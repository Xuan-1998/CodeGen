===BEGIN PLAN===
dp[i][j] is a boolean indicating whether the substring s[0:i] contains the substring 'AB' (if j=0) or 'BA' (if j=1).
dp[i][j] is True if and only if s[0:i-1] contains 'AB' (if j=0) or 'BA' (if j=1), 
and the last character of s[0:i-1] matches with either 'A' or 'B' depending on whether it's looking for 'AB' or 'BA'.
Determine the longest common prefix between 'AB' and 'BA', let's say it's prefix of length k.
For i > k, dp[i][j] is True if and only if s[k:i-1] contains either 'A' or 'B' depending on whether it's looking for 'AB' or 'BA'.
Initialize dp[0][0] and dp[0][1] to False.
Iterate over the string from left to right, update dp[i][j] based on previous state and current character of the string.
If s[i-1] is 'A', then set dp[i][0] to True if dp[i-1][0] or dp[i-1][1] is True. Otherwise, set dp[i][1] to True if dp[i-1][0] or dp[i-1][1] is True.
If s[i-1] is 'B', then set dp[i][1] to True if dp[i-1][0] or dp[i-1][1] is True. Otherwise, set dp[i][0] to True if dp[i-1][0] or dp[i-1][1] is True.
Return "YES" if there exists i such that dp[i][0] and dp[i][1] are both True. Otherwise return "NO".
===END PLAN===
