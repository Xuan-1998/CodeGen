===BEGIN PLAN===
Can we use a sliding window approach to check if the string contains both 'AB' and 'BA' without any overlap?

Consider states as tuples (left, right) representing the number of characters left in the string after considering AB or BA.
Use a 2D array to store the dynamic programming table, where dp[i][j] represents whether the substring from i to j contains both 'AB' and 'BA'.

However, I think there's an issue with this approach. The plan is focused on finding both substrings in the same window, but it doesn't account for the possibility that one of the substrings ('AB' or 'BA') may not be present at all.

A better approach would be to separate the problem into two sub-problems: check if the string contains 'AB', and then check if the remaining substring (if any) contains 'BA'.

Create a boolean array, say found['AB'], where found['AB'][i] is true if the first i characters of the input string contain the substring 'AB', and false otherwise.

Then, create another boolean array, say found['BA'], where found['BA'][i] is true if the remaining i characters (from position i onwards) in the input string contain the substring 'BA', and false otherwise.

You can then iterate over the input string to fill up these arrays. For each character in the string:

* If you find 'AB', set found['AB'][i] to true.
* If you find 'BA' (and it's not already contained in a previous iteration), set found['BA'][j] to true for some j that represents the position of the start of 'BA'.

Finally, check if found['AB'][n-1] and found['BA'][0] are both true. If they are, then the input string contains both 'AB' and 'BA', so return "YES". Otherwise, return "NO".

This approach ensures that you correctly handle the cases where one of the substrings is not present at all.

===END PLAN===
