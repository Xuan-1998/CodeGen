===BEGIN PLAN===
Check if the string can be divided into two non-overlapping parts, each containing one of 'A' or 'B', and then check if these parts contain the required substrings.

The state is a boolean indicating whether the current substring contains 'AB' or not.
'State is the current substring, and transition is adding a new character to it.'
Use memoization to store the intermediate results and avoid redundant computations.

Preprocessing: 
  - Initialize an array dp of size len(s) + 1 with all False values. This will be used as a lookup table for checking if 'AB' or 'BA' appears in the substring from index i to len(s).
  
Algorithm:
  1. Iterate over the string s.
    - For each character, check if it's either 'A' or 'B'.
      - If it's 'A', check if dp[i] is True (i.e., the previous 'A' has a matching 'B'). If not, set dp[i+1] to False and continue.
      - If it's 'B', check if dp[i-1] is True. If not, set dp[i+1] to False and continue.
    2. Check if 'AB' or 'BA' appears in the string by checking if dp[len(s)-3] or dp[1] is True.

Edge cases:
  - The empty string will return "NO" because it doesn't contain 'AB' or 'BA'.
  - A single character will return "NO" because it doesn't contain 'AB' or 'BA'.

Time complexity: O(len(s)) because we're iterating over the string once.
Space complexity: O(len(s)) for the dp array.

===END PLAN===
