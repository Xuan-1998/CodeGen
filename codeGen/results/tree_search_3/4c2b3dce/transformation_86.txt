===BEGIN PLAN===
Are there any specific characters or patterns in the input string that could help us solve the problem efficiently?
Considering the presence of 'A' and 'B' in the string, we could define a state as: {bool['A' appears before 'B'], bool['AB' or 'BA' appear consecutively]},
This is a good start! The plan is heading in the right direction.

Consider the states as (first_char, second_char) where first_char is either 'A' or 'B', and second_char is either 'A' or 'B'. The transitions would be based on whether the current character matches the expected next character in the substrings.
This is a good way to define the states. However, we might want to consider additional states for when one of the substrings has been fully matched.

Create a memoization function that takes the current character and the previous state as input and returns the next state.
This step makes sense! By using memoization, we can avoid recalculating the same states multiple times. However, we need to make sure that our function handles edge cases correctly.

===END PLAN===
