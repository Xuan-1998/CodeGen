===BEGIN PLAN===
To solve this problem, we can use dynamic programming with memoization.

The state will be defined as the current subset being processed and the sum up to this point. The base case will be when all integers have been processed.

We will start by initializing an empty set of unique sums and then iterate through each integer in the given set. For each integer, we will generate all possible subsets that include or exclude the current integer and calculate their corresponding sums.

For each subset sum, we will check if it is already present in our set of unique sums. If not, we will add it to the set. This ensures that we only store distinct sums.

Finally, we will sort the set of unique sums in ascending order and return them as the result.

The time complexity of this approach will be O(n * 2^n), where n is the number of integers in the given set. This is because for each integer, we are generating 2^n subsets (including or excluding the current integer).

The space complexity will be O(n * sum), where sum is the sum of all elements in the given set. This is because we need to store all possible subset sums.

To handle edge cases, we can add a simple check at the beginning of our function to ensure that the input integers are valid (i.e., within the specified range).

===END PLAN===
