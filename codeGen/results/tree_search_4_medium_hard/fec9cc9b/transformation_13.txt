===BEGIN PLAN===
dp[i] = True if array[0:i] is a non-decreasing subsequence, False otherwise
Choose dp[i] as the length of the longest non-decreasing subsequence ending at index i. Transition: 
    dp[i] = max(dp[j]) for all j such that 0 <= j < i and array[j] <= array[i].
Use top-down approach with memoization to store the results of subproblems, and update the dp array accordingly.
For each query (l, r), check if array[l:r+1] is equal to the longest non-decreasing subsequence found so far. If it is, return "Yes", otherwise return "No".
===END PLAN===
