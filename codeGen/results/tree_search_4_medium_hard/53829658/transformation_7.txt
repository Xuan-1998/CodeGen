===BEGIN PLAN===
Identify that each city's shortest distance from capital can be found independently by performing DFS/BFS from the city, which leads to a bottom-up approach with tabulation.

The state expression could be the shortest distance of each city from the capital, i.e., dp[i] = min distance from city i to the capital.
Let dp[i] be the minimum number of edges that need to be reversed such that city i can be reached from the capital. Then dp[i] = min(dp[j] + 1) for all j that have an edge pointing to i.

Use memoization with a recursive function to store and reuse previously computed values of dp[i].

Identify the base case: dp[0] = 0, as city 0 is the capital itself. For each city i > 0, calculate its shortest distance from the capital by considering all previous cities j that have an edge pointing to city i.

For optimization purposes, sort the edges in a way that for every city i, all edges pointing to it come first, and then consider all edges starting from city i. This is because we only need to consider the minimum number of edges reversed for each city i, not all previous cities j.

Calculate the minimum number of roads to be inversed if the capital is chosen optimally by finding the maximum value in dp[].

Print out the optimal capital city and its corresponding shortest distance from other cities.
===END PLAN===
