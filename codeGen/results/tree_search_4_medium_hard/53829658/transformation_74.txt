===BEGIN PLAN===
Observe that the optimal capital city would be the one with the maximum in-degree, which can be found by simply iterating through each city and keeping track of its in-degree.
The state expression is dp[i] = whether city i can be reached with at most k reversed roads, with base case being dp[k+1][n] = True. This choice explores the idea of finding a capital that requires the fewest reversed roads to reach any other city.

dp[i] = whether city i is reachable from capital city j by reversing at most k edges, using a queue-based BFS approach.
The state transition is as follows:
- If there's an edge pointing to node i and we're currently at node j, then we can try to reverse this edge. If it works out (i.e., the number of reversed roads doesn't exceed k), we update dp[i].
- Then, we just do a BFS from city j with a limit of k, updating dp[i] for all reachable cities.

Apply tabulation by filling up the dp array in a bottom-up manner, starting from the base case and moving towards the original problem.
Finally, to find the optimal capital city, simply iterate through each city and keep track of its in-degree. The city with the maximum in-degree will be our answer.

===END PLAN===
