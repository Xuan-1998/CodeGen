===BEGIN PLAN===
Identify that each city's shortest distance from capital can be found independently by performing DFS/BFS from the city, which leads to a bottom-up approach with tabulation.

The state expression could be the number of reversed edges needed to reach each city from the capital, i.e., dp[i] = # reversed edges to reach city i.

Let state s[i] be the minimum number of reversed edges to reach city i. Transitions: for each neighbor j, if there's no edge between i and j or it's directed towards j, then update s[i] = min(s[i], 1 + s[j])

Update plan:
- Initialize a visited array and dp array
- Perform DFS/BFS from the capital to calculate the shortest distance to each city
- For each city, update dp[i] = # reversed edges to reach city i
- Find the minimum number of reversed edges needed to reach any other city from the capital by iterating over all cities and taking the maximum dp value

===END PLAN===
