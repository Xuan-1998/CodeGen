===BEGIN PLAN===
# Initialize in-degree dictionary and maximum in-degree variable
in_degree_dict = {}
max_in_degree = 0

for i in range(1, n):
    for j in range(i+1, n):
        if j not in in_degree_dict:
            in_degree_dict[j] = 0
        in_degree_dict[j] += 1
        max_in_degree = max(max_in_degree, in_degree_dict[j])

# Initialize dp array with base case
dp = [0] * (n+1)
dp[1] = 0

for i in range(2, n):
    # Calculate dp[i]
    for j in range(i+1, n):
        if in_degree_dict[j] > 0:
            in_degree_dict[j] -= 1
            dp[i] = min(dp[i], dp[j] + (in_degree_dict[j] > 0))
    dp[i] = max(dp[i], dp[1] + (i-1))

# Find minimum number of reversed roads and optimal capital city
min_reversed_roads = float('inf')
optimal_capital = -1

for i in range(2, n):
    if dp[i] < min_reversed_roads:
        min_reversed_roads = dp[i]
        optimal_capital = i

# Print result
print(min_reversed_roads)
print(optimal_capital)
===END PLAN===
