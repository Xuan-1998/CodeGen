===BEGIN PLAN===
Identify that each city's shortest distance from capital can be found independently by performing DFS/BFS from the city, which leads to a bottom-up approach with tabulation.

The state expression could be the shortest distance of each city from the capital, i.e., dp[i] = min distance from city i to the capital.

Design a memoized function that recursively calculates the shortest distance from a city to the capital, using previously calculated values. This function should take as input the current city and return the shortest distance from this city to the capital. The base case would be when we are at the capital itself (dp[capital] = 0), and for any other city, it's the minimum between the current value and one plus the recursively calculated value of its parent.

Use dynamic programming to fill up the dp array in a bottom-up manner, by iterating through all cities and updating their corresponding values using the memoized function.

Finally, find the city with the maximum distance from the capital (i.e., 1-indexed, since we start counting from 1), this will be our optimal capital. Then, iterate over all edges, if an edge is oriented from a city to another, and the destination of this edge has a shorter distance than its source, then reverse this edge.

===END PLAN===
