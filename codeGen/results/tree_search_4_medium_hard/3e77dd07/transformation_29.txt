===BEGIN PLAN===
Can we identify a recursive structure in the problem that allows us to break it down into smaller instances of the same problem.

The state could be the position in the string, and the base case would be when the end of the string is reached.

The state could be a tuple of two indices into s1 and s2, representing the current position in each string. The base case would be when both indices reach the end of their respective strings. The transition relation would involve incrementing one or both of the indices depending on whether we're comparing characters at the same position.

Recursively define a function is_scrambled(s1, s2) that checks if s2 is scrambled string of s1, and use this function to build up a 2D table where each cell (i, j) represents whether the substrings s1[:i] and s2[:j] are scrambled.

===END PLAN===
