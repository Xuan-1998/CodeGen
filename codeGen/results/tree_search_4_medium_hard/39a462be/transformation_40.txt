state_expression = dp[i][j] where dp is a 2D table storing the maximum similarity scores for substrings of lengths i and j; 
The base case is when either i or j reaches the end of one of the strings, at which point the maximum similarity score is simply the length of the remaining string minus its own length. 

dp[i][j] is the maximum similarity score for substrings of lengths i and j, where transitions depend on matching/mismatching characters between the current position in strings A and B.
state_expression = dp[i][j] where 
  if the current character matches:
    transition depends on dp[i-1][j-1]
  else:
    transition depends on maximum of dp[i-1][j], dp[i][j-1]

Apply memoization to the function that calculates the longest common subsequence (LCS) of two strings. 
