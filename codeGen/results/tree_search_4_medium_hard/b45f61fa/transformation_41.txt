===BEGIN PLAN===
Determine optimal substructure by observing that the problem can be broken down into smaller instances: for each pair of adjacent matrices (i to j), find the minimum number of multiplications needed to multiply all matrices up to j-1, then add the cost of multiplying i-th matrix with the result.

The state expression could be dp[i][j] = minimum number of multiplications to multiply matrices from i to j, with dp[0][k] being the base case (matrix 1 times matrix k for all k).

dp[i][j] = min([dp[i-1][k] + p[i]*p[k+1]*p[j] for k in range(i, j)])

Build a string of parentheses to represent the optimal way to multiply matrices:
for i in range(1, n):
    for j in range(i+1, n):
        if dp[i][j] == dp[i-1][j]:
            result += str(p[i]) + ' '
        else:
            result = '(' + result
for i in range(n-1):
    result = '(' + result
result = ')' * (n - 2) + result

===END PLAN===
