"{\"statement\": \"Task: Given an array p[] of length n representing the dimensions of a series of matrices, where the dimension of the i'th matrix is p[i] * p[i+1], find the most efficient way to multiply these matrices together. The task is to decide in which order to perform the multiplications such that the minimum number of multiplications are needed. \\n\\nInput: The input consists of an integer n denoting the number of matrices and an array p[] of length n representing the dimensions of the matrices. The input is taken from standard input.\\n\\nOutput: The output should be a string with the proper order of parenthesis for n-1 matrices, using uppercase alphabets to denote each matrix. \\n\\nConstraints: The input constraints are 2 \\u2264 n \\u2264 26 and 1 \\u2264 p[i] \\u2264 500. The expected time complexity is O(n^{3}) and the expected auxiliary space is O(n^{2}).\\n\\nMathematical Concepts: The problem involves matrix multiplication, which is a fundamental concept in linear algebra. The dimensions of the matrices play a crucial role in determining the order in which the matrices should be multiplied. The problem requires finding the most efficient way to multiply a chain of matrices together, which is a classic problem in computer science and mathematics. The solution involves finding the optimal parenthesization of the matrix chain, which can be represented using a binary tree. The problem can be solved using dynamic programming, which involves breaking down the problem into smaller subproblems and storing the solutions to these subproblems in a table.\\n\\nComputer Science Concepts: The problem involves dynamic programming, which is a fundamental concept in computer science. The solution involves breaking down the problem into smaller subproblems and storing the solutions to these subproblems in a table. The problem can be solved using bottom-up dynamic programming, which involves solving the subproblems in a bottom-up order and using the solutions to the smaller subproblems to solve the larger subproblems. The solution involves constructing a table to store the solutions to the subproblems and using the table to find the optimal parenthesization of the matrix chain. The time complexity of the solution is O(n^{3}), which is optimal for this problem.\", \"editorial\": \"\", \"tag\": \"['Matrices', 'Dynamic programming', 'Data structures']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"geeksforgeeks\", \"url\": \"https://practice.geeksforgeeks.org/problems/brackets-in-matrix-chain-multiplication1024/1\", \"sample_test_cases\": [{\"input\": \"n = 5\\r\\np[] = {1, 2, 3, 4, 5}\", \"output\": \"(((AB)C)D)\"}, {\"input\": \"n = 3\\r\\np = {3, 3, 3}\", \"output\": \"(AB)\"}]}"