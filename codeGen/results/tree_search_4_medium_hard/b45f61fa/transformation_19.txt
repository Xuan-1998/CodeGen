===BEGIN PLAN===
Top-down approach with memoization:
 Identify subproblems as 'multiply matrices from i to j' and memoize solutions for overlapping subproblems.

 Define the state expression as a tuple (i, j, k) representing the current matrix being multiplied with k matrices on its right,
 and the base case is when i == 0 (first matrix) or k == 0 (no more matrices to multiply).

 State: (i, j), representing the pair of matrices to be multiplied from index i to j.
 Transition:
    if j - i == 1, then there's only one matrix to multiply;
    else, consider multiplying the first i matrices with k-1 matrices on their right,
         and then add the cost of multiplying the last j-i matrices.

 Use a 2D array dp[][] to store the dynamic programming table where rows represent i (0 <= i < n) and columns represent j (i <= j < n).

 dp[i][j] = min { 
    dp[i][k-1] + p[i]*p[k]*p[j] for k in range(i+1, j+1)
 }
 The minimum cost can be calculated using the memoized values.

 Print the optimal parenthesization by tracing back the dynamic programming table.
===END PLAN===
