===BEGIN PLAN===
Determine optimal substructure by observing that the problem can be broken down into smaller instances: for each pair of adjacent matrices (i to j), find the minimum number of multiplications needed to multiply all matrices up to j-1, then add the cost of multiplying i-th matrix with the result.

The state expression could be dp[i][j] = minimum number of multiplications to multiply matrices from i to j, with dp[0][k] being the base case (matrix 1 times matrix k for all k).

dp[i][j] = min(dp[0][i-1], dp[i][j-1]) + p[i-1]*p[i]*p[j]

dp = [[float('inf') for _ in range(len(p))] for _ in range(len(p))];  # Initialize with infinity
for i in range(1, len(p)):
    dp[0][i] = i

for L in range(2, len(p)+1):
    for i in range(len(p)-L+1):
        j = i + L - 1
        for k in range(i, j):
            dp[i][j] = min(dp[i][k] + dp[k+1][j] + p[i]*p[k+1]*p[j], dp[i][j])
===END PLAN===
