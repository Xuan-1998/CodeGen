===BEGIN PLAN===
We can define a state that captures the current room and whether it's been visited before.
The state expression could be (room, visited), where room is the current room number and visited is a boolean indicating whether the room has been visited before.

To solve this problem, we can use dynamic programming with memoization. We will maintain a 2D array dp where dp[i][0] represents the minimum number of portal moves needed to reach room i considering it's not been visited before.
dp[i][1] represents the minimum number of portal moves needed to reach room i considering it has been visited before.

The state transition equations can be written as follows:
- If room 1 hasn't been visited before, dp[1][0] = 0
- For each room i from 2 to n+1, 
    - If room i hasn't been visited before, dp[i][0] is the minimum of dp[p_i][1] (where p_i is the previous room) plus 1 and dp[p_i][0]
    - If room i has been visited before, dp[i][1] is the minimum of dp[room][1] for all rooms room such that there exists a path from room to i using portals.
- Return dp[n+1][1]

This plan considers the constraints given in the problem and provides an efficient solution by avoiding revisiting rooms unnecessarily.
===END PLAN===
