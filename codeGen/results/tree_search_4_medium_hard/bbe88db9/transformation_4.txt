===BEGIN PLAN===
Since the problem involves portals, we can define a state that captures the current room and whether it's been visited before. This will allow us to avoid revisiting rooms unnecessarily.
The state expression could be a tuple of (room, visited), where room is the current room number and visited is a boolean indicating whether the room has been visited before.

We can use dynamic programming to build up a table dp[i][j] representing the minimum number of portal moves required to get from room i to room j.
The base case would be when i == n, meaning we are already in the target room (n+1), so dp[n][n+1] = 0.

For each cell dp[i][j], we consider two options: 
- We use the first portal and move to room p_i. This will result in a transition from dp[i-1][p_i] + 1.
- We use the second portal and move to room j. This will result in a transition from dp[i-1][j] + 1.

We choose the option that requires the minimum number of portal moves and memoize this value.

The final answer is dp[0][n+1], which represents the minimum number of portal moves required to get from the starting room (room 1) to the target room (room n+1).

This plan seems correct, but it's missing an important detail: handling edge cases. For example, what if p_i > i? We would need to adjust our transition rules accordingly.

===END PLAN===
