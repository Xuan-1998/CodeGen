DP states can be defined as (i, j) where i is the current row index and j is the current column index. Memoization can be used to store intermediate results.

dp[i][j] = min({ dp[k][j] for k in range(i+1) if 0 <= k < i and dp[k][j] > grid[i][j] } or { dp[i][m] for m in range(j+1) if 0 <= m < j and dp[i][m] > grid[i][j] }, grid[i][j])

Store the intermediate results in a list of lists, where each sub-list represents the minimum points required to reach each cell in that row.
