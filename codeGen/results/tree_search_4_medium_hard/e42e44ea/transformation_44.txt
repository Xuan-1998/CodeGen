DP states can be defined as (points, i, j) where points is the current sum of points and i, j are the current row and column indices respectively. Top-down memoization with DFS can be used to explore all possible paths.

dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]

The current minimum points required to reach the bottom-right cell is the minimum of the points required to reach any cell in the previous row and the points required to reach any cell in the same column, plus the points in the current cell.

Initialize a 2D array dp where dp[i][j] is the minimum initial points required to reach the cell at position (i, j)

dp[0][0] = grid[0][0]
for i from 1 to M:
    for j from 0 to N-1:
        if j > 0:
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
        else:
            dp[i][j] = dp[i-1][j] + grid[i][j]

return dp[M-1][N-1]
