DP states can be defined as (i, j) where i is the current row index and j is the current column index. Memoization can be used to store intermediate results.

dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]

if (i == 0 or j == 0):
    dp[0][j] = 0
    dp[i][0] = 0
else:
    for i in range(1, N):
        for j in range(1, M):
            if grid[i][j] > 0:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    return dp[N-1][M-1]
