DP states can be defined as (points, i, j) where points is the current sum of points and i, j are the current row and column indices respectively.

dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
The minimum points required to reach the cell at row i, column j is the minimum of the points required to reach the cell above it (i-1, j) plus the points in that cell and the points required to reach the cell to its left (i, j-1) plus the points in that cell, or 0 if there are no cells above or to the left.

Initialize a 2D array dp of size N x M with all values set to infinity.
dp[0][0] = grid[0][0]
Fill in the dp array from top-left to bottom-right, following the recurrence relation:
for i from 1 to N-1: 
    for j from 1 to M-1:
        if grid[i][j] > 0:
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
Return dp[N-1][M-1]

This plan is correct. It's a good start.
To improve the plan, consider handling edge cases at the beginning of the function.
For example, if N or M is 0, return -1 because it's not possible to reach the destination cell with minimum positive points.
