===BEGIN PLAN===
Dynamic Programming Solution:
State expression: dp[i] = length of longest increasing subsequence ending at index i
Base case: dp[0] = 1 (since there is only one element in the subsequence)
Recursive formula: 
    - If array[i-1] < array[i], then dp[i] = dp[i-1] + 1 (extend the previous subsequence by adding the current element)
    - Otherwise, dp[i] = max(dp[j]) where j ranges from 0 to i-1 and array[j] < array[i]
Dynamic programming table: Create a table of size n+1 to store dp values
===END PLAN===
