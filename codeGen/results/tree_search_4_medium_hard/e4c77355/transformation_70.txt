===BEGIN PLAN===
DP State Expression: For each position i in the array, find the length of the longest increasing subsequence ending at that position.

Initialize dp array with 1s (since single element is always an increasing subsequence)

For each element in the array:
    Compare current element to previous elements
    If previous element is less than current element:
        Update dp[i] = max(dp[i], dp[j] + 1) where j is the index of the previous element
    Else: 
        dp[i] remains the same

Memoization: Store computed lengths in a dictionary to avoid redundant calculations.

DP solution returns the maximum value in the dp array which represents the length of the longest increasing subsequence.

===END PLAN===
