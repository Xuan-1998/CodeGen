===BEGIN PLAN===
Dynamic Programming using Tabulation: Initialize a table with n rows and 1 column, where n is the length of the input array. Fill the table row by row, considering previous longest increasing subsequences.
For each position in the array:
	* Iterate over all elements that are smaller than the current element.
	* Update the state for the current element as the maximum between its current state and 1 plus the state of the previous smallest element.
	* Store the result in the table.
Dynamic Programming using Memoization: Initialize a memoization dictionary with default value -1. Fill the dictionary row by row, considering previous longest increasing subsequences.
For each position in the array:
	* Iterate over all elements that are smaller than the current element.
	* Update the state for the current element as the maximum between its current state and 1 plus the state of the previous smallest element.
	* Store the result in the dictionary.
Return the length of the longest increasing subsequence, which is the last value stored in the table or dictionary.
===END PLAN===
