===BEGIN PLAN===
Dynamic Programming:
    - Define a recursive relation between subproblems
    - Store computed results in a dictionary and update the values based on previously computed values
    - Use memoization within a recursive function to avoid repeated computation
    - The length of the longest increasing subsequence ending at index i in the array is the maximum of:
        * 1 (the current element forms an increasing subsequence by itself)
        * The length of the longest increasing subsequence ending at the previous element j, plus 1 if the current element is greater than the element at position j
    - Memoize the results and return the value for the last index to get the overall longest increasing subsequence
===END PLAN===
