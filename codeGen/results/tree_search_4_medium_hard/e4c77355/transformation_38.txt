Dynamic Programming: Define a recursive relation between subproblems, then use memoization to store computed results.

The maximum value seen so far in the array up to index i
Let's define dp[i] as the length of the longest increasing subsequence ending at index i. Then we can recursively calculate:

dp[i] = 1 + max(dp[j] for j in range(i) if arr[i] > arr[j])

Memoization: Store computed results to avoid redundant calculations.

Edge cases: Handle arrays with less than two elements, as there is no longest increasing subsequence.

Improved version:
