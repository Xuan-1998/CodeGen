"{\"statement\": \"Task: Given an unsorted array of integers, find the length of the longest increasing subsequence.\\n\\nInput: The input consists of a single line containing an unsorted array of integers. The length of the array is not given explicitly, but it is guaranteed to be at most 2500. The input is provided through standard input.\\n\\nOutput: The output consists of a single integer representing the length of the longest increasing subsequence in the input array.\\n\\nConstraints: Each integer in the input array is between -10^4 and 10^4, inclusive. The algorithm should run in O(n^2) time complexity, but there is a follow-up question asking if it can be improved to O(n log n) time complexity. There may be more than one longest increasing subsequence, but it is only necessary to return the length.\", \"editorial\": \"\", \"tag\": \"['Dynamic programming', 'Sorting', 'Data structures']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"leetcode\", \"url\": \"https://leetcode.com/problems/longest-increasing-subsequence/\", \"sample_test_cases\": [{\"input\": [[10, 9, 2, 5, 3, 7, 101, 18]], \"output\": 4}]}"