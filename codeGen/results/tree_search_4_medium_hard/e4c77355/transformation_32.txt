Dynamic Programming: Define a recursive relation between subproblems, then use memoization to store computed results.

The maximum value seen so far in the array up to index i
Consider the length of the longest increasing subsequence ending at each position in the array.

Use dynamic programming to create a 1D table dp[] where each cell represents the length of the longest increasing subsequence ending at that index. The recurrence relation is:
dp[i] = max(0, dp[j] + 1) for all j < i and arr[i] > arr[j]

The base case is when the array only contains one element (index 0), in which case the length of the longest increasing subsequence is 1.

Memoization: Store computed results to avoid redundant calculations.
