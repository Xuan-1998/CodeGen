===BEGIN PLAN===
Dynamic Programming:
  * Define a recursive relation between subproblems
    - The length of the longest increasing subsequence ending at index i in the array
  * Use memoization to store computed results
  * Choose the maximum value from all subsequences as the final answer
  * Define a function that takes an array and returns the length of the longest increasing subsequence by recursively considering all possible subsequences
  * Memoize the function calls based on the current index i and previous elements in the array
    - This allows us to avoid redundant computations and efficiently compute the lengths of all subsequences
===END PLAN===
