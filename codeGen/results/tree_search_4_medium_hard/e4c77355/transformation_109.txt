===BEGIN PLAN===
Dynamic Programming Approach:
1. Initialize a 1D table dp of size n+1 where dp[i] represents the length of the longest increasing subsequence ending at index i.
2. Iterate over the input array from left to right (i.e., from 0 to n-1).
3. For each element arr[i], iterate backwards from i to 0 and check if there is an earlier element j such that arr[j] < arr[i].
4. If found, update dp[i] as the maximum of its current value and dp[j] + 1.
5. Return the last value in the dp array, which represents the length of the longest increasing subsequence.

===END PLAN===
