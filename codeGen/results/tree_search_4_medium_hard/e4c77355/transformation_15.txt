===BEGIN PLAN===
Dynamic Programming:
  * Define a recursive relation between subproblems, then use memoization to store computed results
    + For each index i in the array, calculate the length of the longest increasing subsequence ending at index i
  * Use a bottom-up approach and fill up the dp table from the first element to the last
    + Initialize the dp table with 1's (since an individual element is considered a subsequence of length 1)
    + Iterate through the array, for each element:
      - Check all previous elements that are less than the current element
      - For each such element, calculate the length of the longest increasing subsequence ending at that element
      - Update the dp table with the maximum length found so far (including the current element)
    + The final value in the dp table represents the length of the longest increasing subsequence in the array

===END PLAN===
