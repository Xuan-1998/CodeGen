===BEGIN PLAN===
Dynamic Programming:
    Define a recursive relation between subproblems,
    then use memoization to store computed results.
Subproblem: The length of the longest increasing subsequence ending at index i in the array
Main Problem: Choose the maximum value from all subsequences as the final answer
Memoization:
    Use a dictionary to store the computed results and avoid redundant computations.
    Initialize a dictionary dp with len(array) + 1 entries, all initialized to -1
    Iterate through the array:
        For each element at index i:
            If dp[i] == -1: dp[i] = 1 (base case: longest increasing subsequence ending at index i is of length 1)
            Else: Update dp[i] as the maximum value between dp[i-1] + 1 and 1
    Return the maximum value in dp as the final answer

===END PLAN===
