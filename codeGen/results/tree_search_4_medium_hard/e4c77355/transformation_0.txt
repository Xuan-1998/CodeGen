===BEGIN PLAN===
Dynamic Programming:
  Define a recursive relation between subproblems, then use memoization to store computed results.
  The length of the longest increasing subsequence ending at index i in the array
    Define a function that takes an array and returns the length of the longest increasing subsequence
    Create a bottom-up dynamic programming approach by defining dp[i] as the length of the longest increasing subsequence ending at index i.
      Initialize dp with values from the input array, then fill in the dp array iteratively.
  The recursive relation: dp[i] = max(dp[j] + 1 for j < i and arr[i] > arr[j])
    This is because the length of the longest increasing subsequence ending at index i is the maximum of one plus the length of the longest increasing subsequence ending at previous indices j, where arr[i] > arr[j]
===END PLAN===
