===BEGIN PLAN===
Dynamic Programming:
Base case: If the array is empty, return 0.
Define an array dp where dp[i] represents the length of the longest increasing subsequence ending at index i.
For each pair of elements (i, j) in the array, if arr[j] > arr[i], then update dp[i] to be the maximum between dp[i] and dp[j-1] + 1.
Return max(dp)
Memoization:
Pre-compute a table t where t[i][j] represents whether j is part of an increasing subsequence ending at i.
For each pair of elements (i, j) in the array, if arr[j] > arr[i], then update t[i][j] to be true.
Return max(i: t[i][len(arr)-1])
===END PLAN===
