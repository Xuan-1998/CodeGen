===BEGIN PLAN===
Dynamic Programming:
  * Define a recursive relation between subproblems
    + dp[i] = max(dp[j] for j in range(i)) if array[j] < array[i]
  * Use memoization to store computed results
  * Start from the base case (e.g., longest increasing subsequence of length 1)
    + dp[0] = 1, since only one element can be part of an increasing subsequence of length 1
  * Recursively build up the solution:
    + for i in range(1, n):
      * find the maximum length of increasing subsequences ending at indices less than i
        - max(dp[j] for j in range(i) and array[j] < array[i])
      * update dp[i] to be one more than the maximum length found above
  * The final answer is the maximum value in the dynamic programming table (dp[n-1])
===END PLAN===
