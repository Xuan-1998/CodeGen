===BEGIN PLAN===
Difference of Two Sequences: Identify the longest increasing subsequence's differences from an optimal solution.
Base case: If the array is empty (length 0), return 0; if the current element is smaller than the previous one, reset the state by resetting dp to [1] and update prev to the current element.

Consider a dynamic programming state that captures the length of the longest increasing subsequence ending at each position in the array. 
dp[i]: The length of the longest increasing subsequence ending at index i.

Memoization using Recursion: Implement a recursive function that takes an index i and returns the length of the longest increasing subsequence ending at that index. Use memoization to store intermediate results and avoid redundant computations.
For each element, compare it with elements before it; if it's larger, add 1 to the length of the previous longest increasing subsequence.

Return dp[n-1], where n is the array length. This represents the length of the longest increasing subsequence in the entire array.
===END PLAN===
