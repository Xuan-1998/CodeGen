===BEGIN PLAN===
Memoize values computed during recursion to avoid redundant calculations and accelerate computation.
The state is (l, r), where f(l) + f(l+1) + ... + f(r) represents the minimum total number of comparisons needed to select the most beautiful participant from l girls to r girls.

Define a recursive function to calculate f(n) for n > 2 as the minimum of:
    - The base case: f(2) = min(f(1), f(3))
    - Recursively calculate f(n-1) and f(n+1) then add 1
Use a bottom-up dynamic programming approach by filling up a table in linear order, starting from l = 2.
Update the plan to fill up the table row by row:
    1. Initialize dp[0] = 0 (base case)
    2. For each row r from 1 to R:
        - Initialize dp[l] = f(2) for all l in this row
        - Fill up the row: for each cell at position (l, r), update its value as min(f(l-1) + 1, dp[l+1])
    3. Calculate the result by summing up all values in the last row

===END PLAN===
