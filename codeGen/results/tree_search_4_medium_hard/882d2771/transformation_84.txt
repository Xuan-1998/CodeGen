===BEGIN PLAN===
Memoize values computed during recursion to avoid redundant calculations and accelerate computation.

Consider a state (i, j) where i is the number of groups and j is the maximum number of girls per group. Define the state as a tuple (i, j).

State: (i, j) where i is the number of groups and j is the maximum number of girls per group.
Use dynamic programming to store values in a 2D array as (i, j) pairs.

Define the base cases for the DP:
- For states with only one girl (i.e., i = 1), f(i, j) is 0 because there's no need for comparisons.
- For states where all girls are in the same group (i.e., j = 1), f(i, j) is i - 1 because we need to compare all but one group.

Use these base cases as seeds for the DP and fill in the rest of the table using recurrence relations. This will give us the minimal total number of pairwise comparisons needed to select the most beautiful participant from n girls in a beauty contest.

===END PLAN===
