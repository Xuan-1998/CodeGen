===BEGIN PLAN===
The optimal substructure is that f(n) can be calculated by combining the results of smaller instances, specifically f(m) for m < n.
f(2n) = 2f(n)
Think about the minimum number of comparisons needed to select the most beautiful participant from n girls in a beauty contest, and how it relates to the problem state
Implement top-down dynamic programming where the dp array is initialized with base cases (e.g., dp[1] = 0) and then populated using the optimal substructure property.
For each even number n, calculate f(n) as 2f(n/2), and for odd numbers, calculate it as 1 + min(f((n-1)/2), f((n+1)/2))
This ensures that the dp array is correctly filled in to solve the problem
===END PLAN===
