===BEGIN PLAN===
Consider a bottom-up dynamic programming approach, where you start with the base case of an empty array (which is trivially YES), and then iteratively build up the solution by considering smaller subarrays.

The state can be represented as a pair of arrays (left, right) representing the leftmost and rightmost elements in the current subarray that still need to be processed.

Initialize a 2D array dp with n+1 rows and n+1 columns, where the value at position (i, j) corresponds to whether it's possible to make all elements in the subarray from index i to j equal to zero.

For each cell (i, j), consider two options: 
- Remove the leftmost element (i.e., decrement by 1) if j > 0
- Remove the rightmost element (i.e., decrement by 1) if i < n

If it's possible to make all elements in either of these subarrays equal to zero, then it's also possible for the current subarray.

Finally, check the value at position (0, n) to determine whether it's possible to make all elements in the original array equal to zero. If so, return "YES", otherwise return "NO".

===END PLAN===
