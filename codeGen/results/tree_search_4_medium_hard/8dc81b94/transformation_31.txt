===BEGIN PLAN===
Determine if there's an optimal substructure for this problem, where making one part of the array equal to zero is sufficient to solve the entire problem, allowing you to apply dynamic programming using tabulation.

Let dp[i][k] represent whether it's possible to make all elements in the first i elements of the array equal to k.

dp[i][0] = True (base case: making an empty array equal to zero is always possible)
for i from 1 to n:
    for k from -max(a) to max(a):
        dp[i][k] = False
        if k == 0:
            dp[i][k] = any j in range(i) where dp[j-1][abs(k-a_j)%2]
        else:
            if k > 0:
                dp[i][k] = (dp[i-1][k-1] and a_i <= k) or (dp[i-1][k+1] and a_i >= k)
            else:
                dp[i][k] = (dp[i-1][-k-1] and a_i <= -k) or (dp[i-1][-k+1] and a_i >= -k)

Return "YES" if dp[n][0], otherwise "NO"

===END PLAN===
