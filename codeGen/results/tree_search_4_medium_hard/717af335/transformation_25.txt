===BEGIN PLAN===
The base case could be when A or B is 0, in which case X would just be the other value. We consider using a combination of both top-down and bottom-up approaches.

State: (A, B), dp[(i, j)] represents whether there exists a solution for A - i and B - j.
Base case: when either A or B is 0, return (A, B) as the solution.
Transition relationship:
    if i > 0 or j > min(A, B), return False; 
    else dp[(i, j)] = ((dp[(max(0, i - j), min(j, A))]) or (dp[(min(i, B), max(0, j - i))]))

State transition:
    if (A == 1) and (B > 0):
        return False
    elif (A > 0) and (B == 1):
        return False
    else dp[(i, j)] = ((dp[(max(0, i - j), min(j, A))]) or (dp[(min(i, B), max(0, j - i))]))
===END PLAN===
