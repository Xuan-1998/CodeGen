===BEGIN PLAN===
Consider a bottom-up approach with dynamic programming by defining an iterative function that calculates the maximum score for each subproblem, then apply memoization to avoid redundant calculations.

A state expression could be dp[i][j] = max(dp[i-1][j-1] + arr[i-1], dp[i-1][j] + arr[i]) if i > 0 and j <= k.
The base case would be when i or j reaches zero, set the maximum score to be the value at that index in the array.

Memoize the maximum score calculation recursively using a dictionary.

Initialize a dictionary called memo with default values of negative infinity for each state (i, j).
Use this memoization dictionary to store and retrieve the calculated maximum scores for subproblems.

===END PLAN===
