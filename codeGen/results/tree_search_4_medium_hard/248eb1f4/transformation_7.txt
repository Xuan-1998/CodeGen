Memoization is more suitable as the function calls itself recursively in each step, and the value of each step only depends on the previous steps. Memoizing intermediate results would significantly improve performance by avoiding redundant computation.

The state expression is dp[i][j] = winner_index if we're considering i players with j people having coins.
dp[i][j] = (j % M) + 1 if i is odd, else ((X-j+1) % M) + 1

Define a recursive function that uses memoization to store the results of subproblems and avoid redundant computation. The base case for the recursion should be when i == X.

For each test case, calculate dp[X][i] for i from 1 to X, then print the calculated values as the output.
