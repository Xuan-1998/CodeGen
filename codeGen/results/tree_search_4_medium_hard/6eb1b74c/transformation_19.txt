===BEGIN PLAN===
dp = [[0] * (len(s) + 1) for _ in range(len(t) + 1)]

for i in range(1, len(t) + 1):
    used_strings = set()
    for j in range(i - 1, -1, -1):
        if t[j:] in s:
            string_index = [k for k, x in enumerate(s) if x == t[j:]][0]
            used_strings.add(string_index)
            dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)
            while j < len(t) and t[j:] in s:
                string_index = [k for k, x in enumerate(s) if x == t[j:]][0]
                used_strings.add(string_index)
                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)
        else:
            dp[i][j] = dp[i-1][j]

min_steps = dp[-1][-1]
steps_taken = []
i, j = len(t), -1
while i > 0:
    for string_index in list(used_strings):
        if t[j:] in s[string_index]:
            used_strings.remove(string_index)
            steps_taken.append((string_index + 1, j))
            break
    else:
        j -= 1

if min_steps == -1 or (len(t) > 0 and t[0] not in ''.join([s[i] for i, _ in steps_taken])):
    print(-1)
else:
    print(min_steps)
    for step, pos in sorted(steps_taken):
        print(step, pos)
