===BEGIN PLAN===
The problem can be solved by considering all possible splits of the message and checking if each split satisfies the condition. Use dynamic programming to avoid counting the same splits multiple times.

Let dp[i][j] = 1 if there exists a valid split of the substring s[i:j], otherwise it's 0.
dp[0][n] will store the total number of ways to split the message into substrings that fulfill the conditions mentioned in the problem, modulo 10^9 + 7.

To find the length of the longest substring over all the ways, use a separate dp array and update it accordingly as we fill up the main dp array.
dp_length[i][j] will store the maximum length of a valid split of the substring s[i:j].

To find the minimum number of substrings over all the ways, keep track of the total number of splits and divide it by the number of ways to split the message.

Finally, calculate the result modulo 10^9 + 7 before returning.
===END PLAN===
