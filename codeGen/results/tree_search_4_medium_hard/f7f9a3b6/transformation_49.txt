===BEGIN PLAN===
Define the state as:
dp[i][j] = minimum number of substrings required to split s[0..i] into j substrings such that each substring has at most a[s[i-1]-1] repeated occurrences of the same character.

Initialize dp with values from left to right.
For i in range(2, n+1):
    For j in range(1, min(i//a[s[i-1]-1]+1, 27)):
        If s[i-1] appears only once in the current substring:
            dp[i][j] = min(dp[i-1][k-1] + 1 for k in range(j))
        Else:
            dp[i][j] = dp[i-1][j]
Update intermediate results using a dictionary.

Calculate the minimum number of substrings and the length of the longest substring over all ways by iterating through the dp table.
Print the results modulo 10^9 + 7.
===END PLAN===
