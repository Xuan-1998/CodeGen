"{\"statement\": \"Task: Given a string s of length n and an array a of length 26, where a[i] represents the maximum number of times the i-th letter of the English alphabet can appear consecutively in any substring of s, find the number of ways to split s into non-overlapping substrings such that each substring satisfies the given condition, the sum of their lengths is n, and they don't overlap. Also, find the length of the longest substring over all the ways and the minimum number of substrings over all the ways. Output the results modulo 10^9 + 7.\\n\\nInput: The input consists of three lines. The first line contains an integer n, the length of the message. The second line contains the message s of length n. The third line contains 26 integers, a[1] to a[26], which represent the maximum number of times each character in the English alphabet can appear consecutively in any substring of s.\\n\\nOutput: The output should be printed in three lines. The first line should contain the number of ways to split the message into substrings that fulfill the conditions mentioned in the problem, modulo 10^9 + 7. The second line should contain the length of the longest substring over all the ways. The third line should contain the minimum number of substrings over all the ways.\\n\\nConstraints: 1 \\u2264 n \\u2264 10^3, 1 \\u2264 a[i] \\u2264 10^3, where 1 \\u2264 i \\u2264 26.\", \"editorial\": \"\", \"tag\": \"['Greedy algorithms', 'Dynamic programming', 'Complete search', 'String algorithms']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/766/C\", \"sample_test_cases\": [{\"input\": \"3\\naab\\n2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"3\\n2\\n2\\n\"}, {\"input\": \"10\\nabcdeabcde\\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"401\\n4\\n3\\n\"}, {\"input\": \"10\\naaaaaaaaaa\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"1\\n1\\n10\\n\"}, {\"input\": \"55\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\", \"output\": \"383381198\\n55\\n1\\n\"}, {\"input\": \"99\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n96 12 22 33 50 96 95 25 34 40 61 37 54 12 46 84 62 17 35 38 76 47 85 85 9 61\\n\", \"output\": \"494092815\\n96\\n2\\n\"}, {\"input\": \"100\\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 3 3 3\\n\", \"output\": \"750728890\\n4\\n27\\n\"}, {\"input\": \"8\\naaaaaaab\\n8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"64\\n7\\n2\\n\"}, {\"input\": \"10\\naabaaaaaba\\n10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"32\\n5\\n5\\n\"}, {\"input\": \"10\\naabaabaaba\\n3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"8\\n2\\n7\\n\"}, {\"input\": \"10\\naabaabaaba\\n10 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"511\\n9\\n2\\n\"}, {\"input\": \"100\\nygdbmqpyofbcoqomztbjkutjwkkxkkmoyjrqteikqxrkcgqcfrbujupiegumelsmqkdadtcfvyoywuhqthqlioxcveskifuormfo\\n94 20 86 40 16 38 63 32 36 95 7 32 68 21 68 67 70 23 24 78 45 80 30 35 9 4\\n\", \"output\": \"962845356\\n16\\n13\\n\"}, {\"input\": \"99\\nnupctndqkhgouriwrrbhxwynnkclwtfrraontjuvjdumzigxyandxrsrmosvtbtropggtlkqjmrffgnacsafbulvbuxthjqhtxj\\n61 1 47 67 64 66 44 39 55 23 68 94 47 2 50 26 92 31 93 6 92 67 41 12 15 91\\n\", \"output\": \"61873945\\n12\\n25\\n\"}, {\"input\": \"1\\na\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"1\\n1\\n1\\n\"}, {\"input\": \"7\\nzzzxxyy\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2\\n\", \"output\": \"21\\n2\\n4\\n\"}, {\"input\": \"7\\nbaaaccc\\n6 4 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"60\\n6\\n2\\n\"}]}"