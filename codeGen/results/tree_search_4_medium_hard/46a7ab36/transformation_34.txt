], [
state = n * m; dp[0..n][0..m] filled by transition relationships;
for (int i = 1; i <= m; i++) {
    state += dp[n - 1][m - i - 1];
}
state = [0]; for (int i = 0; i <= m; i++) {
    state += dp[0][i];
} dp[i][j] means the number of possible words with length j and last character is ith letter;
for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= min(m, 2 * i); j++) {
        if (j == 1) dp[i][j] += dp[i - 1][0];
        else dp[i][j] += dp[i - 1][j - 1];
    }
}
state = dp[n][m]; print(state % (10^8 + 7));
