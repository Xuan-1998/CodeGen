], [
dp[i][j] := (j == 0) ? (i < k) ? k - i : 0 : (j == m) ? (i < 2 * n) ? n : dp[k-1][m-j-1] : dp[i-1][j-1];
k = n; for(i = 0; i <= k; i++) {
    if(i < k) {
        dp[i][j] += dp[k-1][m-j-1];
    }
    if(2 * i > n) {
        dp[i][m] += dp[k-1][m-1];
    }
}
dp[0][0] = 1; for(int j = 0; j < m; j++) {
    for(int i = 0; i <= k; i++) {
        if(j == 0) {
            if(i < k) {
                dp[i][j] = (i < k) ? k - i : 0;
            } else if(i < 2 * n) {
                dp[i][j] = n;
            } else {
                dp[i][j] = dp[k-1][m-1];
            }
        } else {
            if(j == m) {
                if(i < k) {
                    dp[i][j] += dp[k-1][0];
                } else if(i < 2 * n) {
                    dp[i][j] = n;
                } else {
                    dp[i][j] = dp[k-1][m-j-1];
                }
            } else {
                dp[i][j] = dp[i-1][j-1];
            }
        }
    }
}
