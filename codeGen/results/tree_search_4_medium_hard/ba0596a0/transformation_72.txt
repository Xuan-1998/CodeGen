===BEGIN PLAN===
Can we use dynamic programming with tabulation, where we fill up a table with solutions to smaller subproblems and then use them to solve larger ones? 
A combination of both: dp[i] = (dp[i-1] or ((j - 1 <= i and dp[j-1]) or (i + k >= stones.size()))) where 0<=j<i, considering the constraints that the frog can only jump forward and the distance of each jump must be either k - 1, k, or k + 1 units. 
DP table with a combination of both: Create a 1D array where each element represents whether it's possible for the frog to reach the corresponding stone. Fill up the table by checking if it's possible for the frog to reach the current stone from previous stones, considering different jump distances. 
Base case: dp[0] = True, since the frog starts on the first stone.
===END PLAN===
