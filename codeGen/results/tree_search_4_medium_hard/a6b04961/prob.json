"{\"statement\": \"Task: Given a picture represented as a graph with n vertices and m edges, color some edges to form a hedgehog. A hedgehog consists of a tail and some spines. The tail is a simple path in the graph, i.e., a sequence of vertices such that every two neighboring vertices are connected by a colored edge, and the vertices are in strictly increasing order. The length of the tail is the number of vertices in it. The beauty of a hedgehog is the product of the length of the tail and the number of spines, where a spine is an edge that has one endpoint in the tail and the other endpoint not in the tail. Find the maximum possible beauty of a hedgehog.\\n\\nInput: The input consists of two integers n and m, followed by m lines, each containing two integers u_{i} and v_{i} representing the endpoints of the i-th edge. The input is provided through standard input.\\n\\nOutput: The output should be a single integer representing the maximum possible value of the hedgehog's beauty.\\n\\nConstraints: 2 \\u2264 n \\u2264 100,000, 1 \\u2264 m \\u2264 200,000, 1 \\u2264 u_{i}, v_{i} \\u2264 n, u_{i} \\u2260 v_{i}.\", \"editorial\": \"\", \"tag\": \"['Dynamic programming', 'Graph algorithms']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/615/B\", \"sample_test_cases\": [{\"input\": \"8 6\\n4 5\\n3 5\\n2 5\\n1 2\\n2 8\\n6 7\\n\", \"output\": \"9\\n\"}, {\"input\": \"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\", \"output\": \"12\\n\"}, {\"input\": \"5 7\\n1 3\\n2 4\\n4 5\\n5 3\\n2 1\\n1 4\\n3 2\\n\", \"output\": \"9\\n\"}, {\"input\": \"5 9\\n1 3\\n2 4\\n4 5\\n5 3\\n2 1\\n1 4\\n3 2\\n1 5\\n2 5\\n\", \"output\": \"16\\n\"}, {\"input\": \"10 10\\n6 3\\n2 9\\n9 4\\n4 5\\n10 3\\n8 3\\n10 5\\n7 6\\n1 4\\n6 8\\n\", \"output\": \"8\\n\"}, {\"input\": \"100 50\\n66 3\\n92 79\\n9 44\\n84 45\\n30 63\\n30 20\\n33 86\\n8 83\\n40 75\\n7 36\\n91 4\\n76 88\\n77 76\\n28 27\\n6 52\\n41 57\\n8 23\\n34 75\\n50 15\\n86 68\\n36 98\\n30 84\\n37 62\\n22 4\\n6 45\\n72 80\\n98 74\\n78 84\\n1 54\\n99 27\\n84 91\\n78 7\\n80 61\\n67 48\\n51 52\\n36 72\\n97 87\\n25 17\\n20 80\\n20 39\\n72 5\\n21 77\\n48 1\\n63 21\\n92 45\\n34 93\\n28 84\\n3 91\\n56 99\\n7 53\\n\", \"output\": \"15\\n\"}, {\"input\": \"5 8\\n1 3\\n2 4\\n4 5\\n5 3\\n2 1\\n1 4\\n3 2\\n1 5\\n\", \"output\": \"12\\n\"}, {\"input\": \"2 1\\n1 2\\n\", \"output\": \"2\\n\"}, {\"input\": \"10 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n\", \"output\": \"9\\n\"}, {\"input\": \"5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n\", \"output\": \"4\\n\"}, {\"input\": \"6 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n\", \"output\": \"5\\n\"}, {\"input\": \"6 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n\", \"output\": \"5\"}, {\"input\": \"5 9\\n1 3\\n2 4\\n4 5\\n5 3\\n2 1\\n1 4\\n3 2\\n1 5\\n2 5\\n\", \"output\": \"16\"}, {\"input\": \"2 1\\n1 2\\n\", \"output\": \"2\"}, {\"input\": \"5 8\\n1 3\\n2 4\\n4 5\\n5 3\\n2 1\\n1 4\\n3 2\\n1 5\\n\", \"output\": \"12\"}]}"