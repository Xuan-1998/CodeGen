===BEGIN PLAN===
Memoization can be used to solve the problem by storing the results of subproblems and reusing them when needed.

The state expression is dp[i]: the number of ways to build a sequence with exactly i spheres having radii up to i, where 1 ≤ i ≤ C.
dp[i] = min(dp[i-1], sum(binomial(N-j, M-i) * dp[j] for j in range(max(1, i-M+1), i))) + sum(binomial(N-j, M-i) for j in range(i)) - sum(binomial(N-k, M-k) for k in range(i))

From the top down: Implement a top-down dynamic programming approach where you recursively calculate dp[i] and use memoization to store the results of subproblems, with 1 <= i <= C.

For each test case:
    Initialize an array dp with size C+1, filled with 0.
    Calculate dp[C].
===END PLAN===
