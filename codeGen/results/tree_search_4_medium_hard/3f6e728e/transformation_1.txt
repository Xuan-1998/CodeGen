===BEGIN PLAN===
The problem can be solved by using dynamic programming with a bottom-up approach, where we fill up a table in a systematic way.

The state expression could be dp[i] = number of ways to build an i-sequence, where 1 ≤ i ≤ C.
dp[i] represents the number of ways to build a sequence of spheres with radii from 1 to i.

Use memoization by storing the intermediate results in a dictionary dp, where dp[i] is computed only once and reused whenever it's needed again.

For each upper hemisphere U_j, increment the count for all i ≥ U_j. Similarly, for each lower hemisphere L_k, decrement the count for all i ≤ L_k.

The final answer would be dp[C].

===END PLAN===
