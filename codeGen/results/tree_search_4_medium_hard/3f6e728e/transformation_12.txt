===BEGIN PLAN===
The problem can be solved by using dynamic programming with a bottom-up approach, where we fill up a table in a systematic way.

State expression could be dp[i][j] = number of ways to build an i-sequence using j upper and M-lower hemispheres.
dp[i][j] = number of ways to build a sequence with i-1 spheres in total, using exactly j upper hemispheres and the current sphere is an upper hemisphere.

Create a 2D table dp[N+1][M+1] where dp[i][j] represents the number of ways to build a sequence with i-1 spheres in total, using exactly j upper hemispheres.
For each cell dp[i][j], consider two cases:
- If the current sphere is an upper hemisphere: we can choose from N-i+1 options for the radius of this upper hemisphere. Then, we need to subtract 1 because the current sphere cannot be used again.
- If the current sphere is a lower hemisphere: we can choose from M-j+1 options for the radius of this lower hemisphere.

Initialize dp[0][j] = 1 for all j (base case: there are no spheres yet).

Fill up the table using a loop:
for i in range(1, N+1):
    for j in range(0, min(i,M)+1):
        if j < M:
            dp[i][j] = (dp[i-1][j] * (N-i+1) + dp[i-1][j+1] * (M-j)) % (10**9+7)
        else:
            dp[i][j] = dp[i-1][j] * (N-i+1) % (10**9+7)

Print the answer in a loop:
for i in range(1, C+1):
    print(dp[i][M], end=' ')
print()
===END PLAN===
