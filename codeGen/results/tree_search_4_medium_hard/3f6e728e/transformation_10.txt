===BEGIN PLAN===
The problem can be solved by using dynamic programming with a bottom-up approach, where we fill up a table in a systematic way.

dp[i] represents the total number of X-sequences that can be built using hemispheres with radii from 1 to i.
dp[i] = sum(dp[j] * (count of j-radius upper hemispheres) * (count of i-j radius lower hemispheres))

To calculate dp[i], iterate through all possible values j from 1 to i. For each j, calculate the number of ways to build X-sequences with radii from 1 to j using previously computed values in dp[].

Use memoization by storing and reusing previously computed values in a dictionary or cache to avoid redundant calculations.
For each test case, iterate through all possible values of i from 1 to C. For each i, calculate the number of ways to build X-sequences with radii up to i using previously computed values in dp[].

Finally, print the calculated values as output for each test case.

===END PLAN===
