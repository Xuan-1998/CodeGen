Memoization can be used to solve the problem by storing the results of subproblems and reusing them when needed.

The state expression is dp[i]: the number of ways to build an i-sequence, where 1 ≤ i ≤ C.

dp[i] = sum(binom(N_count[N_index].index(i), N_count[N_index][i]) * (dp[j] - dp[j-1]) for j in range(1, i)) + 
        sum(binom(M_count[M_index].index(i), M_count[M_index][i]) * (dp[j] - dp[j-1]) for j in range(1, i))

A recursive function with memoization can be implemented to solve this problem.

The plan includes edge cases by considering all possible values of N, M, and C.
