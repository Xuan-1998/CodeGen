===BEGIN PLAN===
We can use dynamic programming with recursion and memoization to solve this problem.

State: (i, j) where i is the current upper hemisphere index, and j is the count of different radii used so far. 
The base case is when i is equal to N or M (whichever comes first). 

Transition relationship:
- If U_i is less than L_1, then dp[i][j] = 0
- Else, dp[i][j] = sum(dp[k][j-1] * (U_k == U_i)) for k from i+1 to N
- Then, update dp[i][j] += M - j

Create a bottom-up dynamic programming solution by initializing a 2D table with dimensions max(N,M)+1 x C, where dp[i][j] represents the number of ways to build an X-sequence using i upper hemispheres and j different radii. Fill in the table using the given constraints.

Finally, return dp[N][C]
===END PLAN===
