===BEGIN PLAN===
Memoization can be used to solve the problem by storing the results of subproblems and reusing them when needed.

The state expression is dp[i][j]: the number of ways to build a sequence with exactly j spheres having radii up to i, where 1 ≤ i ≤ C and 0 ≤ j ≤ min(N, M).

dp[i][j] = sum(dp[max(0, i-k)][min(j, m+k)] for k in range(1, min(i+1, C)+1))

Memoize the state expression dp[i][j] using a 2D array to store the intermediate results.

For each test case:
    Initialize a 2D array dp of size (C+1) x (min(N,M)+1) with all values initialized to 0.
    Initialize dp[0][j] = 1 for j in range(min(N,M)+1), because there is exactly one way to build an empty sequence.
    Iterate over i from 1 to C:
        Iterate over j from 0 to min(N,M):
            Calculate the value of dp[i][j] using the state expression and store it in dp[i][j].
    Print the values stored in dp[C][j] for j in range(min(N,M)+1).
===END PLAN===
