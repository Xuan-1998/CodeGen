===BEGIN PLAN===
Consider using dynamic programming to solve this problem by breaking it down into smaller subproblems and storing the results of subproblems to avoid redundant computation.
The state can be defined as dp[k][n], where k is the digit place (0-indexed) and n is the integer value. The base case is when n < 10^(k-1), since all integers less than that do not have a kth digit.

dp[k][n] = sum(dp[k-1][i] for i in range(n//10+1)) + (n%10 == 1)
Apply dynamic programming with a prefix sum approach.
The final answer is dp[9][n]

===END PLAN===
