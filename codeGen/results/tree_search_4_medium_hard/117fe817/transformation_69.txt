===BEGIN PLAN===
Use a bottom-up approach with dynamic programming to count the total number of digit 1's in all non-negative integers less than or equal to n.

The state can be the number of times the digit 1 appears in integers from 0 to k, where k is a variable. The transition relationship is that adding one to an integer either keeps the last significant bit as 1 (if it was already 1) or changes it from 0 to 1.
Design a function that iterates over all possible values of k and calculates the number of times the digit 1 appears in integers from 0 to k. The function should use dynamic programming by storing intermediate results.

The base case is when k = 0, at which point the result is 0.

Calculate the number of times the digit 1 appears in integers from 0 to k + 1 as follows:
- If k's least significant bit is 1, then add the number of times the digit 1 appears in integers from 0 to k.
- If k's least significant bit is 0, then add the result calculated for k minus 1 (since adding one changes the last significant bit) and subtract the number of times the digit 1 appears in the integer k + 1.

Return the total count after calculating it for all values of k up to n.
===END PLAN===
