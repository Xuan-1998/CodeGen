===BEGIN PLAN===
Consider using dynamic programming to solve this problem by breaking it down into smaller subproblems and storing the results of subproblems to avoid redundant computation.

The state can be defined as dp[k][n], where k is the digit place (0-indexed) and n is the integer value. The base case is when n < 10^(k-1), since all integers less than that do not have a kth digit.
dp[k][n] = 
    if n >= 10^k:
        sum(dp[k-1][int(str(n)[:k])] for _ in range(10))
    else:
        dp[k-1][n] + (str(n)[k] == '1')

Apply dynamic programming by initializing a 2D table and filling it up recursively.

Let dp[i][j] be the number of integers less than or equal to j that have i digits and contain at least one digit '1'.
Then, for any integer j:

- If j has more than i digits, then we can add dp[i][j//10] (where // is integer division) multiplied by 10^(i-1), since all numbers with i+1 digits must start with a number that ends in the previous digit.
- If j has exactly i digits, then we count the number of '1's it contains and add this to dp[i][j//10].
In Python:
