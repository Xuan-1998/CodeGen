===BEGIN PLAN===
The graph can be viewed as a sequence of bits, where each bit represents whether there's an edge from one vertex to another. 
Use this insight to formulate the dynamic programming problem.

Define the state as: dp[u][v] = whether there's a directed path from u to v. Base case: for any vertex, there's no path to itself.
dp[u][v] represents the existence of a path from vertex u to vertex v. 
Transition relationship: dp[u][v] = OR of all possible paths from vertex u to vertex v, considering each neighbor w such that (u & w) == w and not visited[w].
Use a 2D array with tabulation for dynamic programming.

For each query (u, v), check if there's a path from u to v. If dp[u][v] is true, print "YES", else print "NO".

This plan seems correct. It's based on the observation that the graph can be viewed as a sequence of bits and uses this insight to formulate a dynamic programming problem.

===END PLAN===
