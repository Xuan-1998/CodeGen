===BEGIN PLAN===
There are two types of vertices - ones with outgoing edges and those without. The problem can be viewed as finding the shortest path from each vertex to all others. This insight can guide the choice of dynamic programming approach.

The state is a boolean array dp where dp[i] is true if there's a path from 0 to i, and false otherwise. The base case is that there's no path to any vertex with an in-degree of 1.

For each query (u, v), we can use memoization to avoid redundant computation. We start by initializing the dp array as all False.

Then for each vertex i in increasing order:
    Initialize dp[i] to be True if u &= i == i and dp[u] is True
    For each neighbor j of i where dp[j] is True, set dp[i] to be True

Finally, check dp[v] to determine if there's a path from 0 to v.

===END PLAN===
