===BEGIN PLAN===
The graph can be viewed as a sequence of bits, where each bit represents whether there's an edge from one vertex to another.

Define the state as: dp[i] = number of vertices reachable by i. Base case: 1 for all vertices (since every vertex can reach itself).

Consider a bit at position j in both u and v; if the bits are equal, consider only lower bits; otherwise, add jth bit of v to all previous reachable states.

Use bitwise operations to update the states by considering the ith bit of v and its implications on the reachability of previous vertices. For example, if the ith bit is 0, it means there's no edge from any vertex to a new vertex with that bit set to 1. If the ith bit is 1, it means there's an edge from all reachable vertices to a new vertex.

Initialize dp array with base cases and then iterate over each bit in v from most significant to least significant.

Update the states by considering the implications of setting the current bit of v to 0 or 1. Use bitwise operations to efficiently update the states.

The final state, dp[v], will represent the number of vertices reachable by v.

Return "YES" if this number is greater than 0; otherwise, return "NO".
===END PLAN===
