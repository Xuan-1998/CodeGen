===BEGIN PLAN===
There are two types of vertices - ones with outgoing edges and those without. The problem can be viewed as finding the shortest path from each vertex to all others.

The state is a boolean array dp where dp[i] is true if there's a path from 0 to i, and false otherwise. The base case is that there's no path to any vertex with an in-degree of 1.
dp[i] = (u & v == v) and dp[v]

DP solution using top-down approach where you recursively check if a path exists from vertex u to vertex v.

For each query, iterate through all vertices to the left of u. If there's a path to any such vertex from which there's a path to v, then there is a path from u to v.
===END PLAN===
