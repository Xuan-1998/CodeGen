{
DP transition: Initialize dp[0][j] for all j in [0, k], since the lexicographically smallest string of length j that can be formed from 0 characters is always an empty string.
Create a 2D table dp[n+1][k+1] where dp[i][j] represents the lexicographically smallest string of length j that can be formed from the last i characters of s.
Update dp[0][j] for all j in [0, k]: dp[0][j] = "" (since an empty string is always lexicographically smallest)
Update dp[i][0] for all i in [1, n]: dp[i][0] = "a" repeated i times (this is the only possible string of length 0 that can be formed from the last i characters of s)
For i in [1, n] and j in [1, k]:
    If j == 1:
        Update dp[i][j]: dp[i][j] = s[i-1:j-1] (if we delete the last character of the string, we get a string of length 1)
    Else:
        Update dp[i][j]: 
            Min possible string: dp[i-1][j-1] (delete the last character and repeat the process for the remaining characters)
            Duplicate the string: s[i-1:j-1] + s[j-1] (duplicate the string, keeping the last character and adding it to the front)
        Update dp[i][j]: dp[i][j] = min possible string
Return dp[n][k]
}
