===BEGIN PLAN===
Consider the strings that can be obtained by deleting the last character of s, which are all substrings of s. The lexicographically smallest string among these is either the original string or the string obtained by deleting its last character. If k > n, then the optimal solution is to duplicate the string until we reach a length of k.

dp[i][j] = 
    1 if i == 0, 
        the lexicographically smallest string that can be obtained from s[:i] with exactly j characters is either the original string or the string obtained by deleting its last character.
dp[i][j] = 
    1 if i < n and j <= len(s), 
        the lexicographically smallest string that can be obtained from s[:i] with exactly j characters is either the original string or the string obtained by deleting its last character
dp[i][j] = min(
    dp[i-1][j], 
    dp[n][max(0, j-len(s)+n)]
)

if k > n:
    return s * (k // n) + s[:k % n]

return s if k <= len(s) else s[-1] + solve(len(s)-1, k-1)
===END PLAN===
