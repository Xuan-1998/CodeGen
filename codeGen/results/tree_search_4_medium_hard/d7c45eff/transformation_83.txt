===BEGIN PLAN===
Consider all possible strings that can be formed by either deleting the last character or duplicating the original string.

Think about each string that can be formed by either deleting the last character or duplicating the original string as a state, and try to find the lexicographically smallest one among them.

Implement a recursive function with memoization using a dictionary to keep track of the results of subproblems. This way, you can avoid re-computing the same subproblems multiple times.

To avoid unnecessary computation, initialize the dictionary with base cases: when k is 0 or less, return an empty string because there are no characters left to consider.

For each state (string), compute two possible strings by either deleting the last character or duplicating the original string. Then, find the lexicographically smallest one among them and update the dictionary accordingly.

Finally, call the recursive function with the initial state (the input string) and k, and return the result.
===END PLAN===
