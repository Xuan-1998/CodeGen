A bottom-up approach with tabulation can be used where we fill up a 2D table in which each cell represents the minimum cost for a given timestamp, considering all possible ticket combinations from the start till now.

Let's define dp[i][j] as the minimum cost for the passenger to reach time t_i using j tickets. Initially, dp[0][0] = 20 (the cost of one ticket) and dp[0][1] = 50 (the cost of a 90-minute ticket).

The state transition equation can be written as:

dp[i][j] = min(dp[i-1][k] + 20 for k in range(j+1)) if j < i // use the previous tickets
           min(50 + dp[i-1][0], 120 + dp[max(i-1440,0)][0]) if j == i // use the current ticket

We can fill up the table column by column from left to right. For each cell, we calculate its minimum cost considering all possible previous tickets.

After filling up the entire table, we can return dp[n][j] as the answer, where n is the number of trips and j is the optimal number of tickets used in the last trip.
