===BEGIN PLAN===
Think about how you can use memoization to avoid solving the same subproblem multiple times and store the results in a table for later reference.

Let dp[i][j] be a boolean indicating whether p[0]+p[1], ..., +p[2i-1]+p[2i] is less than or equal to p[2j]+p[2j+1], ..., +p[2n-1]. If it's true, then dp[i][j]=1; otherwise, dp[i][j]=0.

Consider implementing a bottom-up dynamic programming approach, where you start by solving the smallest subproblems and gradually build up to the largest ones:

* For each i from 0 to n-1:
	+ For each j from 0 to i:
		- If p[2i]+p[2i+1] is less than or equal to p[2j]+p[2j+1], then dp[i][j]=1; otherwise, dp[i][j]=0
* Then check if there exists some k such that dp[k][n-1]=1. If so, output "YES"; otherwise, output "NO".

This approach ensures that you consider all possible ways to split the permutation into two arrays a and b.
===END PLAN===
