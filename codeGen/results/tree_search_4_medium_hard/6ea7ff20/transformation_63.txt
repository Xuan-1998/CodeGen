===BEGIN PLAN===
Decide whether to use tabulation (bottom-up approach) where you start with the base case and work your way up, or top-down approach with memoization where you recursively break down the problem into smaller ones.

state dp[i][j] = { pair of arrays a and b such that merge(a,b) equals permutation up to index i, with array a having length j };

state dp[i][j] is whether the permutation up to index i can be generated by merging two arrays of length j, with no common elements, and the first element of one array is smaller than the first element of the other array;

Fill 2D table from bottom-up, with base cases:
- When i = 0 or j = 0, dp[i][j] = YES (since we can generate an empty permutation by merging two empty arrays)
- For non-empty i and j, check if there exists a pair of arrays a and b such that merge(a,b) equals permutation up to index i-1, with array a having length j-1. If yes, dp[i][j] = YES; otherwise dp[i][j] = NO

For the given permutation p, start from the last element and work your way down:
- For each element pi in reverse order: 
  - Check if there exists an index k such that dp[i-k][k] = YES. If yes, return "YES" (since we can generate the current permutation by merging two arrays of length i-k and k)
  - Otherwise, return "NO" (since we cannot generate the current permutation)

===END PLAN===
