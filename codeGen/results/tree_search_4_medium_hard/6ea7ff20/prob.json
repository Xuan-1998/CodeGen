"{\"statement\": \"Task: Given a permutation p of length 2n, determine if there exist two arrays a and b, each of length n and with no elements in common, so that p=merge(a,b), where merge is a recursive function that takes two arrays and returns a new array of length n+m, defined as follows:\\n\\n  * If one of the arrays is empty, the result is the other array. That is, merge(\\u2205,b)=b and merge(a,\\u2205)=a. In particular, merge(\\u2205,\\u2205)=\\u2205. \\n  * If both arrays are non-empty, and a_1<b_1, then merge(a,b)=[a_1]+merge([a_2,\\u2026,a_n],b). That is, we delete the first element a_1 of a, merge the remaining arrays, then add a_1 to the beginning of the result. \\n  * If both arrays are non-empty, and a_1>b_1, then merge(a,b)=[b_1]+merge(a,[b_2,\\u2026,b_m]). That is, we delete the first element b_1 of b, merge the remaining arrays, then add b_1 to the beginning of the result. \\n\\nInput: The input consists of multiple test cases. The first line of each test case contains a single integer n, the length of the arrays. The second line contains 2n integers, the permutation p. The input is read from standard input.\\n\\nOutput: For each test case, output \\\"YES\\\" if there exist arrays a and b, each of length n and with no common elements, so that p=merge(a,b). Otherwise, output \\\"NO\\\". The output should be written to standard output.\\n\\nConstraints: 1 \\u2264 n \\u2264 2000, 1 \\u2264 t \\u2264 1000, 1 \\u2264 pi \\u2264 2n, where pi is the i-th element of the permutation. The sum of n across all test cases does not exceed 2000.\", \"editorial\": \"\", \"tag\": \"['Dynamic programming']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/1382/D\", \"sample_test_cases\": [{\"input\": \"1\\n9\\n2 1 4 3 7 6 5 10 9 8 13 12 11 18 17 16 15 14\\n\", \"output\": \"YES\\n\"}, {\"input\": \"1\\n16\\n27 1 28 2 29 3 4 5 6 7 30 8 9 10 11 12 13 31 14 15 16 17 18 19 32 20 21 22 23 24 25 26\\n\", \"output\": \"YES\\n\"}, {\"input\": \"6\\n2\\n2 3 1 4\\n2\\n3 1 2 4\\n4\\n3 2 6 1 5 7 8 4\\n3\\n1 2 3 4 5 6\\n4\\n6 1 3 7 4 5 8 2\\n6\\n4 3 2 5 1 11 9 12 8 6 10 7\\n\", \"output\": \"YES\\nNO\\nYES\\nYES\\nNO\\nNO\\n\"}]}"