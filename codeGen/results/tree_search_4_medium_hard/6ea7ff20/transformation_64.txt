===BEGIN PLAN===
state dp[2*max_n+1][max_n+1] = { pair of arrays a and b such that merge(a,b) equals permutation, with array a having the same length as array b };
dp[i][j] will represent whether there exist two arrays a and b, each of length i-j, so that p=merge(a,b).

Create a 2D DP table dp[2*max_n+1][max_n+1] where:

    * dp[0][k] = true for all k, because merge(∅,b)=b and merge(a,∅)=a.
    * If i>0 and j<=n:
        + If p[i-1] < p[j-1], then dp[i][j] = false unless there exists a pair of arrays c and d such that p=merge(c,d) and the length of c is less than or equal to i-j, and the length of d is less than or equal to n. In this case, dp[i][j] = true.
        + If p[i-1] >= p[j-1], then dp[i][j] = false unless there exists a pair of arrays e and f such that p=merge(e,f) and the length of e is less than or equal to i-j, and the length of f is less than or equal to n. In this case, dp[i][j] = true.
    * Otherwise, dp[i][k] will be calculated recursively based on the values of dp[i-1][k-1], dp[i-1][k], and dp[i-2][k-1].

For each test case:
    1. Initialize a variable ans to false.
    2. Iterate over all i from n+1 to 2n, and for each i, iterate over all j from max_n down to i-n+1.
    3. If dp[i][j] is true, set ans to true.

Output "YES" if ans is true; otherwise, output "NO".
===END PLAN===
