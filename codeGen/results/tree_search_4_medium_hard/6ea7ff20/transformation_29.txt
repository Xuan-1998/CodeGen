===BEGIN PLAN===
Consider using dynamic programming to solve this problem by breaking it down into smaller subproblems that can be solved recursively.

The base case is when i=n and j=0, meaning we've reached the end of both arrays. In this case, return true if p is empty, indicating that the permutation is a valid merge of two arrays with no common elements.

State: (i, j) = indices of the last elements used from a and b respectively;
Transition relationship:
    dp[i][j] = True if p[i+j-1] is not in {a[0..i-1], b[0..j-1]} and
        either i or j is 0 (base case), or
        the recursive case where i > 0 and j > 0;
    otherwise, dp[i][j] = False;

Implement memoization by storing the intermediate results in a dictionary.

===END PLAN===
