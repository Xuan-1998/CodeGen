===BEGIN PLAN===
Use a bottom-up approach with tabulation to fill up a 2D table, where each cell represents the maximum beauty of a subarray. The state expression could be (n, prev_reduced) where n is the subarray's length and prev_reduced is a boolean indicating if the subarray has been reduced by at least one bad prime number earlier.
Consider the maximum beauty of an array as a function of its length and whether it has been reduced by at least one bad prime number previously. The state expression could be (n, prev_reduced) where n is the subarray's length and prev_reduced is a boolean indicating if the subarray has been reduced by at least one bad prime number earlier.
Fill up the table as follows:
- For each cell (n, prev_reduced), calculate the maximum beauty of the corresponding subarray. If the subarray has not been reduced yet (prev_reduced = False), try to reduce it by finding the largest element that is a good prime and divide the subarray into two halves.
	+ If the largest element is in the set of bad primes, then don't perform any operations and just calculate the maximum beauty based on the current state.
	+ If the largest element is not in the set of bad primes, then reduce the subarray by dividing it into two halves and recursively compute the maximum beauties for each half.
- For the base case (n = 1), return 0 because there's no operation to be performed.
- The final answer will be stored at cell (n, prev_reduced = False).
===END PLAN===
