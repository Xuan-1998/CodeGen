===BEGIN PLAN===
Consider each number in the array as a 'pivot'. For each pivot, calculate its greatest common divisor (GCD) with all other numbers in the array. This will create new subproblems that can be solved recursively or iteratively.

The base case would be when the array contains only one element, in which case the beauty is 0.

Then we use dynamic programming to fill up the table:
- Initialize a table dp of size n * (max(a[i]) + 1) with all elements set to -1.
- For each number in the array, calculate its GCD with other numbers and update the dp table accordingly.
- The beauty of an array is then the sum of the values in the dp table.

Consider all numbers in the array as a 'pivot' initially; then for each pivot, calculate its GCD with all other numbers in the array to create new subproblems.

Tabulate the beauty of subarrays by iterating through the array and storing intermediate results in a table.
- Initialize a table f of size n + 1 with all elements set to 0.
- For each number in the array, update f[i] as the maximum beauty that can be achieved up to index i.
- The final answer is then f[n].

===END PLAN===
