===BEGIN PLAN===
Consider each number in the array as a 'pivot'. For each pivot, calculate its greatest common divisor (GCD) with all other numbers in the array. This will create new subproblems that can be solved recursively or iteratively.

Define state dp[i] as the maximum beauty that can be achieved by performing operations on a subarray of length i+1, considering the last number in the subarray as the current pivot. The base case is when the subarray has only one element, in which case the beauty is equal to the single element itself.

State could also be updated based on whether the last number in the subarray is a good prime or not. If it's a good prime, then we add its value to the maximum beauty of the subarray without it; otherwise, we subtract its value from the maximum beauty of the subarray without it.

Use dynamic programming to build a bottom-up solution where dp[i] represents the maximum beauty that can be achieved by performing operations on a subarray of length i+1. The base case is when the subarray has only one element, in which case the beauty is equal to the single element itself.

Finally, return dp[n-1], which represents the maximum beauty that can be achieved by performing operations on the entire array.
===END PLAN===
