===BEGIN PLAN===
Determine whether this problem can be solved using a greedy algorithm, where you start by selecting the most promising department and then iteratively add players until the team is complete. This might involve some form of sorting or priority queue.

Base case: If h = 1, then the probability is either 0 (if s1 < n) or 1 (if s1 >= n).

The state is the total number of players from the desired department so far, with transitions based on adding one more player from this department.
Use a bottom-up dynamic programming approach where you start by calculating the probability for small values of n and gradually build up to larger values.

Consider using a separate variable to keep track of the cumulative sum of players in the desired department, which can be used to simplify the transition logic. This will also help with edge cases such as when n is smaller than the number of players in the desired department.

===END PLAN===
