"{\"statement\": \"Task: Given a directed acyclic graph with n vertices and m edges, find the maximum number of vertices that can be visited starting from vertex 1 and ending at vertex n within a time limit of T. Each edge has a non-negative integer weight representing the time required to traverse it. \\n\\nInput: The input consists of three integers n, m, and T, followed by m lines that describe the edges of the graph. Each line contains three integers u, v, and t, meaning that there is a directed edge from vertex u to vertex v with weight t. The input arrives from standard input.\\n\\nOutput: The output should consist of two lines. The first line should contain a single integer k, which is the maximum number of vertices that can be visited starting from vertex 1 and ending at vertex n within a time limit of T. The second line should contain k distinct integers, which are the indices of vertices that can be visited on the route from vertex 1 to vertex n, in the order of encountering them.\\n\\nConstraints: 2 \\u2264 n \\u2264 5000, 1 \\u2264 m \\u2264 5000, 1 \\u2264 T \\u2264 10^9, 1 \\u2264 u, v \\u2264 n, u \\u2260 v, and 1 \\u2264 t \\u2264 10^9. It is guaranteed that there is at most one edge between each pair of vertices, and that there is a directed path from vertex 1 to vertex n that can be traversed within T time units.\", \"editorial\": \"\", \"tag\": \"['Dynamic programming', 'Graph algorithms']\", \"difficulties\": \"MEDIUM_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/721/C\", \"sample_test_cases\": [{\"input\": \"4 3 13\\n1 2 5\\n2 3 7\\n2 4 8\\n\", \"output\": \"3\\n1 2 4 \\n\"}, {\"input\": \"6 6 7\\n1 2 2\\n1 3 3\\n3 6 3\\n2 4 2\\n4 6 2\\n6 5 1\\n\", \"output\": \"4\\n1 2 4 6 \\n\"}, {\"input\": \"5 5 6\\n1 3 3\\n3 5 3\\n1 2 2\\n2 4 3\\n4 5 2\\n\", \"output\": \"3\\n1 3 5 \\n\"}, {\"input\": \"10 10 100\\n1 4 1\\n6 4 1\\n9 3 2\\n2 7 2\\n5 8 11\\n1 2 8\\n4 10 10\\n8 9 2\\n7 5 8\\n3 6 4\\n\", \"output\": \"10\\n1 2 7 5 8 9 3 6 4 10 \\n\"}, {\"input\": \"10 10 56\\n4 8 5\\n9 3 11\\n2 5 5\\n5 9 9\\n3 6 1\\n1 4 9\\n8 7 7\\n6 10 1\\n1 6 12\\n7 2 9\\n\", \"output\": \"3\\n1 6 10 \\n\"}, {\"input\": \"4 4 3\\n1 2 1\\n2 3 1\\n3 4 1\\n1 3 1\\n\", \"output\": \"4\\n1 2 3 4 \\n\"}, {\"input\": \"4 4 2\\n1 2 1\\n2 3 1\\n3 4 1\\n1 3 1\\n\", \"output\": \"3\\n1 3 4 \\n\"}, {\"input\": \"10 45 8\\n1 2 1\\n1 3 1\\n1 4 1\\n1 5 1\\n1 6 1\\n1 7 1\\n1 8 1\\n1 9 1\\n1 10 1\\n2 3 1\\n2 4 1\\n2 5 1\\n2 6 1\\n2 7 1\\n2 8 1\\n2 9 1\\n2 10 1\\n3 4 1\\n3 5 1\\n3 6 1\\n3 7 1\\n3 8 1\\n3 9 1\\n3 10 1\\n4 5 1\\n4 6 1\\n4 7 1\\n4 8 1\\n4 9 1\\n4 10 1\\n5 6 1\\n5 7 1\\n5 8 1\\n5 9 1\\n5 10 1\\n6 7 1\\n6 8 1\\n6 9 1\\n6 10 1\\n7 8 1\\n7 9 1\\n7 10 1\\n8 9 1\\n8 10 1\\n9 10 1\\n\", \"output\": \"9\\n1 2 3 4 5 6 7 8 10 \\n\"}, {\"input\": \"2 1 1\\n1 2 1\\n\", \"output\": \"2\\n1 2 \\n\"}, {\"input\": \"12 12 8\\n1 2 2\\n2 3 5\\n3 12 1\\n4 5 1000000000\\n1 7 1\\n7 6 3\\n6 12 1\\n1 9 1\\n9 10 1\\n10 11 1\\n11 8 1\\n8 12 1\\n\", \"output\": \"6\\n1 9 10 11 8 12 \\n\"}, {\"input\": \"12 12 5\\n1 2 2\\n2 3 5\\n3 12 1\\n4 5 1000000000\\n1 7 1\\n7 6 3\\n6 12 1\\n1 9 1\\n9 10 1\\n10 11 1\\n11 8 1\\n8 12 1\\n\", \"output\": \"6\\n1 9 10 11 8 12 \\n\"}, {\"input\": \"12 12 4\\n1 2 2\\n2 3 5\\n3 12 1\\n4 5 1000000000\\n1 7 1\\n7 6 2\\n6 12 1\\n1 9 1\\n9 10 1\\n10 11 1\\n11 8 1\\n8 12 1\\n\", \"output\": \"4\\n1 7 6 12 \\n\"}, {\"input\": \"11 11 9\\n1 2 1\\n2 3 1\\n1 4 1\\n4 5 1\\n5 6 1\\n6 3 1\\n3 7 1\\n7 8 1\\n8 11 1\\n11 10 1\\n10 9 1\\n\", \"output\": \"8\\n1 4 5 6 3 7 8 11 \\n\"}, {\"input\": \"11 11 7\\n1 2 1\\n2 3 1\\n1 4 1\\n4 5 1\\n5 6 1\\n6 3 1\\n3 7 1\\n7 8 1\\n8 11 1\\n11 10 1\\n10 9 1\\n\", \"output\": \"8\\n1 4 5 6 3 7 8 11 \\n\"}, {\"input\": \"11 11 6\\n1 2 1\\n2 3 1\\n1 4 1\\n4 5 1\\n5 6 1\\n6 3 1\\n3 7 1\\n7 8 1\\n8 11 1\\n11 10 1\\n10 9 1\\n\", \"output\": \"6\\n1 2 3 7 8 11 \\n\"}]}"