A dynamic programming approach can be used to solve this problem by constructing a 2D array dp where dp[i][j] represents the minimum number of changes needed to make the substring s[i..i+j-1] equal to a substring of 'RGBRGBRGB...'.
dp[0][0] = 0, because an empty string is already a substring of 'RGBRGBRGB...'. 
For i > 0, dp[i][j] can be calculated by considering three cases: 
- If s[i-1] matches with the last character of the previous substring, then dp[i][j] = dp[i-1][j-1].
- If s[i-1] does not match and it's equal to 'R', then dp[i][j] = dp[i-1][j-1] + 1.
- If s[i-1] does not match and it's equal to 'G' or 'B', then dp[i][j] = dp[i-1][j-1] + k - j + 1. This is because we need to change at least one character in the previous substring, and this will also affect the characters in the current substring.
dp[0..i-1] can be extended to s[0..i+j-1] by either appending 'R', 'G' or 'B'. 
The minimum number of changes needed is then dp[i][j] + 1.

For each query, we only need to calculate dp[n][k], where n and k are the corresponding values in the query. The answer for the query is then dp[n][k].
