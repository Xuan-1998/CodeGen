===BEGIN PLAN===
Consider using a hash set to store prime numbers below n_max. 
Let's create a 2D list dp where dp[i][j] represents the count of prime numbers with exactly i prime permutations that are below j.

Transition relationship:
If the current number has exactly k_ perms prime permutations, increment the count by 1.
Let's iterate over each number from 2 to n_max. 
For each number, check if it's a prime number and has exactly k_ perms prime permutations. If so, update dp[k][num].
Finally, return the count of entries in dp where the first element is equal to k_ perms.

This plan seems correct and can be improved by using memoization to avoid redundant computations.
Potential issues with this plan include:
- What if there are no prime numbers that have exactly k_ perms prime permutations below n_max? The plan doesn't handle edge cases well.
- How do we determine whether a number is prime or not? We need a function to check primality.

===END PLAN===
