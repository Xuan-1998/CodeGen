===
Plan:
Use dynamic programming with a recursive function that checks if a number is prime and has k_perms permutations, updating the results as needed.
Consider base cases: n_max is less than or equal to 2, as prime numbers below this value have no more than one permutation.
Develop an iterative approach by iterating from n_max downwards, checking each number's primality and permutation count, and updating the results as needed.
Use a recursive function with memoization to store the results of subproblems.
For edge cases: handle k_perms = 1 separately since it is trivially true that any prime number has exactly one permutation (itself).
To reduce computation time, start by checking if the current number's permutation count is greater than k_perms, and if so, skip further checks as this number cannot have exactly k_perms permutations.
Memoize results of subproblems to avoid redundant computations.
Return a list containing the count of prime numbers with k_perms permutations below n_max, the smallest such prime number, and the largest such prime number.
===
