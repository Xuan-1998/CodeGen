===
Develop an iterative solution by generating all prime numbers up to n_max, then checking the number of permutations for each one.
The base case is when n exceeds n_max. The state then becomes None.
Determine the state as the number of permutations for a given prime number, and update the state by iterating over all numbers less than or equal to n_max.
Use a dynamic programming table to store the number of permutations for each prime number.
Check if k_perms is within the valid range (1-3), and adjust accordingly.
Generate prime numbers using the Sieve of Eratosthenes algorithm up to n_max.
Iterate over the generated prime numbers, and for each one:
  Count the number of permutations by checking all possible rearrangements of its digits.
  If the count equals k_perms, increment a counter for the total count of such prime numbers.
  Keep track of the smallest and largest such prime numbers.
Return the count, along with the smallest and largest prime numbers.
===
