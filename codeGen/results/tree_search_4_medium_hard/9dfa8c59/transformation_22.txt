===BEGIN PLAN===
Consider using a hash set to store prime numbers from 2 to n_max. Then iterate over each number in the hash set and count its permutations using recursion.

Let the state be a dictionary to store the count of permutations for each prime number, with its key being the number itself and value being the count of permutations below that number.

Memoize the function that checks whether a number is prime using dynamic programming.

For each prime number, check if it has exactly k_perms prime permutations by counting the number of unique permutations of its digits. If it does, increment the count in the state dictionary.

The base case would be when the current number is less than 2, at which point it's not a prime number and we can stop recursing.

At the end, return the count of prime numbers with k_perms prime permutations below n_max, along with the smallest and largest such primes.

===END PLAN===
