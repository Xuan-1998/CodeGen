===BEGIN PLAN===
Consider using a hash set to store prime numbers from 2 to n_max, then iterate over each prime number to count its permutations.

The base case would be when num = 2, as there's only one permutation for the smallest prime number, which is itself.

Develop a recursive function that calculates the permutations count for each prime number.
    - Base case: if num is a single digit, return 1 (only 1 way to rearrange it)
    - Recursive case: split num into digits, calculate the permutations of each digit, and multiply them together
Store prime numbers in an array and iterate over it to find prime numbers with k_perms.
    - Initialize count, smallest, and largest variables to zero
    - Iterate over each prime number in the hash set:
        - Calculate the permutations for this prime number using the recursive function
        - If the permutations count matches k_perms, increment the count and update smallest and largest if necessary

Edge cases: handle n_max = 2 (only one prime number) and k_perms > 0 (should return [1, 2, 2] since there's only one prime number below 3 with 1 permutation)

===END PLAN===
