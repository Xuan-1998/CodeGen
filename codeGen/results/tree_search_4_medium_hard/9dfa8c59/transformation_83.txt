===BEGIN PLAN===
Develop an iterative solution by generating all prime numbers up to n_max, then checking the number of permutations for each one.

Consider using a sieve algorithm (such as Sieve of Eratosthenes) to generate all prime numbers up to n_max. This will ensure efficient generation of primes.
Store the generated primes in a set or list for easy iteration.
Iterate through the prime numbers and, for each prime:
    Check the number of permutations by rearranging its digits. You can use a helper function that takes a string representation of the prime number as input and returns the count of unique permutations.
    Store the permutation count in a dictionary with the prime number as key.

Implement memoization by storing the permutation counts in a dictionary, so you only need to calculate each permutation count once.
Use the stored permutation counts to find the number of prime numbers with k_perms prime permutations below n_max. This will involve counting the occurrences of k_perms in the dictionary values.
To find the smallest and largest such prime numbers, iterate through the dictionary keys (prime numbers) and check if the permutation count for each key is equal to k_perms. Keep track of the minimum and maximum values you encounter.

===END PLAN===
