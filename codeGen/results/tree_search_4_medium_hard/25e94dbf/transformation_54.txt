===BEGIN PLAN===
Consider using a bottom-up approach with tabulation. Initialize a 1D DP array where each cell i represents the maximum distance after executing i commands and use a loop to fill in the table, considering all possible modifications at each step.

Define the state as dp[i][j] = maximum distance after executing i commands, considering that exactly j of them are 'T' commands. 

Fill the 2D DP array by iterating through the commands from left to right:

- Initialize dp[0][0] = 1 (since we start at the origin)
- For each command c from 1 to n:
    - If c is 'F', update dp[i][j] as follows: 
        * if j == 0, set dp[i][j] = dp[i-1][0] + 1
        * else, set dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + 1
    - If c is 'T', update dp[i][j] as follows: 
        * if j == i, set dp[i][j] = dp[i-1][i-1]
        * else, set dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1

Return the maximum distance after executing n commands, considering that exactly j of them are 'T' commands. This is stored in dp[n][*].

===END PLAN===
