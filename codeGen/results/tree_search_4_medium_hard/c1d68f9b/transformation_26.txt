The approach could be top-down with memoization, breaking down the problem into smaller subproblems and storing their solutions in a memoized dictionary.

The state could be defined as a tuple (n, p), where n is the number of knights with good moods and p is a permutation representing the order of their positions around the table. 

Let dp[i] represent whether it's possible to form a regular polygon with i knights having good moods. Initialize dp with all False values.

For each knight, check if the current knight has a good mood. If so, calculate the number of knights in good moods needed to complete the polygon and find the first occurrence of that value in the remaining knights. This is the minimum requirement for forming a regular polygon. If found, update dp[i] to True.

The time complexity would be O(n^2) due to the generation of all permutations. However, this could be optimized by only generating valid permutations, i.e., those where the number of good moods alternates between 0 and 1, or always stays the same.

The space complexity would be O(n) for storing the memoized values.
