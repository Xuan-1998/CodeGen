===BEGIN PLAN===
Consider a dynamic programming solution where you build up a table of valid polygon configurations from left to right, using the current knight's mood as input for each configuration.

The state expression is a tuple (mood_sum, k_count), where mood_sum is the sum of all knights' moods seen so far and k_count is the count of good moods.

State: ((k_count-1) % n if k_count > 0 else 0, mood_sum+1 if m==1 else mood_sum-1)
Transition:
    If (state[1]%n) < n//3 and state[0] == n-1:
        return "YES"
    elif state[0] != 0 or state[1] % n >= n//3:
        return "NO"

Consider using memoization with dictionary lookups for previously computed values in the DP table.

===END PLAN===
