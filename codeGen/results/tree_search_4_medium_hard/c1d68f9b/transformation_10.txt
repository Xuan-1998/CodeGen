===BEGIN PLAN===
Consider a dynamic programming solution where you build up a table of valid polygon configurations from left to right, using the current knight's mood as input for each configuration.

The state expression is the maximum number of consecutive good moods seen so far. Initialize it with 0, representing an empty string.

For each knight's mood (0 or 1), check if including this knight in the current configuration makes it still valid:

* If the current mood is good (1) and the previous maximum length is even, update the state to be the previous maximum length plus 2.
* If the current mood is bad (0) or the previous maximum length is odd, reset the state to 0.
* Update the dictionary with the new state using the current knight's mood as a key.

Use this updated state to determine whether a regular polygon can be formed:

* Check if the final state is at least 3. If it is, output "YES", indicating that a regular polygon can be formed. Otherwise, output "NO".

===END PLAN===
