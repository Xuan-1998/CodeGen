===BEGIN PLAN===
Consider a dynamic programming solution where you build up a table of valid polygon configurations from left to right, using the current knight's mood as input for each configuration.

The state expression is the maximum length of a substring of good knights that would result in a valid polygon configuration. The initial state is 1, representing a single good knight.
Consider each knight's mood (0 or 1):
    - If the mood is 1, check if including this knight in the current configuration makes it still valid:
        * If the maximum length of good knights so far plus 1 does not exceed n, update the state to the maximum length plus 1
        * Otherwise, reset the state to the previous maximum length
    - If the mood is 0, simply reset the state to the previous maximum length

Utilize a dynamic programming list in Python to store and update the state as you iterate through the knights' moods.

===END PLAN===
