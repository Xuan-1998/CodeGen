===BEGIN PLAN===
Dynamic programming can solve this problem by defining a state that represents the maximum amount of money earned for each possible table configuration and total amount of money spent. The base case would be when there are no more tables or no more money to spend, then return 0.
Then, use tabulation to fill in the states in bottom-up manner.

dp[0][j] = 0 for j in range(1, k+1)
dp[i][0] = 0 for i in range(1, n+1)

for i in range(1, n+1):
    for j in range(1, min(i, k)+1):
        dp[i][j] = max(dp[i-1][j], requests[i-1][1] * min(k, requests[i-1][0]))
Transition: dp[i][j] = max(dp[i-1][j], pi * min(k, ci)) for each request

Favor a top-down dynamic programming approach by defining a recursive function that calculates the maximum amount of money earned for each possible configuration.

max_earn(requests, i, k) = 
    if i == 0 or k == 0:
        return 0
    else:
        dp[i][k] = max(dp[i-1][k], requests[i-1][1] * min(k, requests[i-1][0]))
        return dp[i][k]
max_earn(requests, n, k)
===END PLAN===
