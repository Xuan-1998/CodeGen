===BEGIN PLAN===
The problem has optimal substructure because the solution to the larger problem (n) is constructed from the solutions of smaller problems (i.e., the perfect squares that sum up to n).
Consider a base case: dp[0] = 0, because there are no perfect squares that sum up to 0.
dp[i] represents the minimum number of perfect squares that sum up to i. Initialize dp with dp[0] = 0 and then fill in the rest using dynamic programming:
for i from 1 to n: 
    if sqrt(i) is an integer (i.e., i is a perfect square):
        dp[i] = 1
    else:
        min_squares = infinity
        for j from 1 to i:
            if j is a perfect square and i - j >= 0:
                min_squares = min(min_squares, 1 + dp[i-j])
        dp[i] = min_squares

Define a function f(n) that returns the minimum number of perfect squares summing up to n. Then, use dynamic programming to compute the result for each number from 0 to n and store it in memo:
f(n):
    if n is already computed: return memo[n]
    if n is less than 1: return 0
    min_squares = infinity
    for i from 1 to sqrt(n):
        if i^2 <= n:
            min_squares = min(min_squares, 1 + f(n-i^2))
    memo[n] = min_squares
    return memo[n]

===END PLAN===
