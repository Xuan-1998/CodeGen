===BEGIN PLAN===
Consider a recursive function that checks if a substring is a palindrome, then use memoization to store the results of expensive function calls.

State: dp[i] represents whether the last cut at position i resulted in a palindrome partition.

1. Initialize dp array with False for all indices.
2. Iterate over the string and for each character:
   - Check if the current substring is a palindrome using a rolling hash.
   - If it's a palindrome, update the dp array accordingly.
3. The minimum number of cuts required is then the number of positions where the last cut resulted in a palindrome partition.

To implement memoization by storing the results of expensive function calls in a dictionary.

1. Create a dictionary to store the results of substring checks as they are computed.
2. Before checking if a substring is a palindrome, check if it's already been computed and stored in the dictionary. If so, return the stored result instead of recomputing it.
3. Store the result of each computation in the dictionary for future reference.

===END PLAN===
