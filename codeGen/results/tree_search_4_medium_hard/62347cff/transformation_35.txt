===BEGIN PLAN===
The optimal substructure can be defined as the minimum sum of a single cell being either from above (top-down) or from left (bottom-up).
Let dp[i][j] be the minimum sum of all numbers along a path ending at cell [i][j]. The base case is when i is 0 or j is 0, which means we've reached the top or left boundary.
For each cell, there are two possibilities: either come from above (dp[i-1][j]) or from left (dp[i][j-1]), and the state expression is the minimum of these two values plus the value at the current cell.

State Expression:
dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]

To avoid recomputing the same subproblems multiple times, we can use dynamic programming to store and reuse previously computed values.
Create a memo dictionary to store the results of subproblems. Before calculating the value for a cell, check if it is already in the memo dictionary. If so, return the stored value.

Memoized Function:
def get_min_sum(i, j):
    if (i, j) in memo:
        return memo[(i, j)]
    if i == 0 or j == 0:
        return grid[i][j]
    min_sum = min(get_min_sum(i-1, j), get_min_sum(i, j-1)) + grid[i][j]
    memo[(i, j)] = min_sum
    return min_sum

To fill up the dp table (or memo dictionary) in a bottom-up manner:
Start from the top-left corner and fill up the dp table row by row or cell by cell.
For each cell, call the memoized function get_min_sum to compute its value.

Main Function:
def main():
    m, n = map(int, input().split())
    grid = [list(map(int, input().split())) for _ in range(m)]
    memo = {}
    min_sum = get_min_sum(m-1, n-1)
    print(min_sum)

===END PLAN===
