===BEGIN PLAN===
The optimal substructure can be defined as the minimum sum of a single cell being either from above (top-down) or from left (bottom-up).
dp[i][j] represents the minimum sum of all numbers along a path ending at cell [i][j]. The base case is when i or j is equal to 0, meaning we've reached the top or left boundary. For each cell, there are two possibilities: either come from above (dp[i-1][j]) or from left (dp[i][j-1]).
To avoid redundant calculations, use memoization by storing the computed values in a list dp with dimensions m and n.
dp = [[0 for _ in range(n)] for _ in range(m)]
Fill the base case values first (i.e., top or left boundary).
for i in range(m):
    dp[i][0] = 0
for j in range(n):
    dp[0][j] = 0
Then, iterate through each cell from top to bottom and left to right.
for i in range(1, m):
    for j in range(1, n):
        # Choose the minimum sum of coming from above or left
        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
Return the value at the bottom right corner (dp[m-1][n-1]).
return dp[m-1][n-1]
===END PLAN===
