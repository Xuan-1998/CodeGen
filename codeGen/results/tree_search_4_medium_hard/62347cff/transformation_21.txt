===BEGIN PLAN===
The optimal substructure can be defined as the minimum sum of a single cell being either from above (top-down) or from left (bottom-up).
dp[i][j] represents the minimum sum of all numbers along a path ending at cell [i][j]. The base case is when i or j is 0, meaning we've reached the top or left boundary.
The state expression is dp[i-1][j] + grid[i][j] for moving down and dp[i][j-1] + grid[i][j] for moving right.
dp[i][j] = min(dp[k][j] for k in range(i)) + grid[i][j]
Tabulate the DP state using a 2D array, initializing all values to infinity, then iteratively update each cell based on the minimum sum of adjacent cells.

for i in range(m):
    dp[i][0] = sum(grid[j][0] for j in range(i+1))
for j in range(n):
    dp[0][j] = sum(grid[0][k] for k in range(j+1))

for i in range(1, m):
    for j in range(1, n):
        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]

return dp[m-1][n-1]
===END PLAN===
