
1. Preprocessing: Count the frequency of each integer in the sequence using an array `freq` where `freq[i]` stores the number of times integer `i` appears in the sequence. Also, find the maximum value in the sequence to limit the range of our DP array.
2. State Definition: Define `dp[i]` as the maximum points that can be obtained by considering integers from `1` to `i`.
3. Base Cases: Initialize `dp[0] = 0` since no points can be earned from an empty sequence. Initialize `dp[1] = freq[1] * 1` since the only possible points come from the integer `1` if it exists.
4. Transition: For each integer `i` from `2` to the maximum value in the sequence:
   - Either skip the integer `i` and take the maximum points up to the previous integer: `dp[i-1]`
   - Or select the integer `i`, add its value multiplied by its frequency, and skip the next integer (`i-1`): `dp[i-2] + freq[i] * i`
   - Hence, the recurrence relation is `dp[i] = max(dp[i-1], dp[i-2] + freq[i] * i)`
5. Result: The value `dp[max_value]` will give the maximum points that can be obtained.

