
1. Count Frequencies: Create an array `count` where `count[x]` stores the number of occurrences of integer x in the sequence. This way, we can easily access the frequency of any integer.
2. State Expression: Define `dp[x]` as the maximum points that can be obtained considering all integers from 1 to x.
3. Base Cases: Initialize `dp[0] = 0` (no integers to consider) and `dp[1] = count[1]` (only integer 1 to consider).
4. Transition Relationship: For each integer x from 2 to the maximum integer in the sequence (let's call it `max_val`), calculate `dp[x]` using the relation:
   - `dp[x] = max(dp[x-1], dp[x-2] + x * count[x])`
   This relation ensures that the player either skips x (hence `dp[x-1]`) or includes x in the score (hence `dp[x-2] + x * count[x]`).
5. Compute the Result: The final result will be stored in `dp[max_val]`, which represents the maximum points obtainable considering all integers from 1 to `max_val`.
6. Edge Cases: Handle cases where n = 1 or all elements in the sequence are the same.

