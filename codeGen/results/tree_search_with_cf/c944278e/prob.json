"{\"statement\": \"Task: Given an integer n and a binary string s of length n, determine all possible integers x from 1 to $2^n$ that can be the maximum in a sequence p of length $2^n$, where p is a permutation of integers from 1 to $2^n$. The sequence p is constructed in the following way: for each i-th bit in the string s (starting from 0), if the bit is 0, then in the i-th phase, $2^{n-i}$ pairs of consecutive elements in the sequence are compared and the smaller one is kept, if the bit is 1, the larger one is kept. This process is repeated until only one element remains in the sequence.\\n\\nInput: The first line of input contains one integer n ($1 \\\\le n \\\\le 18$). The second line contains a binary string s of length n.\\n\\nOutput: The output should consist of a sequence of integers in ascending order. Each integer represents a possible maximum value in the sequence p after all operations are performed according to the binary string s.\\n\\nConstraints: n, the length of the binary string, is between 1 and 18 inclusive. The binary string s consists only of the characters 0 and 1.\", \"editorial\": \"\", \"tag\": \"['Constructive algorithms', 'Combinatorics', 'Greedy algorithms', 'Dynamic programming', 'Mathematics']\", \"difficulties\": \"MEDIUM\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/1767/D\", \"sample_test_cases\": [{\"input\": \"3\\n101\\n\", \"output\": \"4 5 6 7 \"}, {\"input\": \"1\\n1\\n\", \"output\": \"2 \"}, {\"input\": \"2\\n01\\n\", \"output\": \"2 3 \"}, {\"input\": \"2\\n00\\n\", \"output\": \"1 \"}, {\"input\": \"1\\n0\\n\", \"output\": \"1 \"}, {\"input\": \"2\\n11\\n\", \"output\": \"4 \"}, {\"input\": \"3\\n000\\n\", \"output\": \"1 \"}, {\"input\": \"3\\n010\\n\", \"output\": \"2 3 4 5 \"}, {\"input\": \"3\\n111\\n\", \"output\": \"8 \"}, {\"input\": \"4\\n0000\\n\", \"output\": \"1 \"}, {\"input\": \"4\\n0100\\n\", \"output\": \"2 3 4 5 6 7 8 9 \"}, {\"input\": \"4\\n0110\\n\", \"output\": \"4 5 6 7 8 9 10 11 12 13 \"}, {\"input\": \"4\\n1011\\n\", \"output\": \"8 9 10 11 12 13 14 15 \"}, {\"input\": \"4\\n1111\\n\", \"output\": \"16 \"}, {\"input\": \"5\\n10110\\n\", \"output\": \"8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \"}, {\"input\": \"5\\n01100\\n\", \"output\": \"4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \"}, {\"input\": \"6\\n111000\\n\", \"output\": \"8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 \"}, {\"input\": \"6\\n101111\\n\", \"output\": \"32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \"}, {\"input\": \"7\\n1011011\\n\", \"output\": \"32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 \"}, {\"input\": \"18\\n000000000000000000\\n\", \"output\": \"1 \"}, {\"input\": \"18\\n111111111111111111\\n\", \"output\": \"262144 \"}]}"