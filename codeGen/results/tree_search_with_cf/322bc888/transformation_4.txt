
1. Precompute all possible "beautiful" strings of length up to 3 using the first three lowercase Latin alphabets ('a', 'b', 'c'). There are six permutations: "abc", "acb", "bac", "bca", "cab", "cba".
2. For each of these permutations, precompute the cost of transforming any substring of the given string `s` into each of these permutations.
3. Create a 2D array `cost` where `cost[i][p]` represents the cost of transforming the substring `s[0:i+1]` into the permutation `p`.
4. Populate the `cost` array for each permutation by iterating through the string and updating the cost incrementally.
5. For each query, use the precomputed `cost` array to determine the minimum cost of transforming the substring `s[l_i-1:r_i]` into a "beautiful" string by comparing the costs for all six permutations.
6. Output the minimum cost for each query.

