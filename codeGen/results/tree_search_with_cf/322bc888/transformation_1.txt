
1. Precompute the costs for all possible substrings of length up to 3 in the string. This is because any palindrome of length 2 or 3 can be fixed with at most one change.
2. Generate all the possible "beautiful" patterns of length 3 using the first three lowercase Latin alphabets ('a', 'b', 'c'). These patterns are "abc", "acb", "bac", "bca", "cab", "cba".
3. For each possible pattern, precompute the cost to transform every substring of length 3 in the original string to match this pattern. Store these costs in a 2D array.
4. For each query, extract the relevant substring and compute the minimum cost using the precomputed costs. If the query length is greater than 3, break the substring into overlapping segments of length 3 and sum the minimum costs for these segments.
5. Output the minimum cost for each query.

