
1. Precompute the costs for all possible substrings of the string to make them "beautiful". This approach involves creating all possible "beautiful" patterns and computing the cost to transform any substring into one of these patterns.
2. State Expression: Let cost[i][j][p] be the minimum cost to transform the substring s[i:j] into the p-th "beautiful" pattern. Here, p represents one of the possible "beautiful" patterns.
3. Generate all possible "beautiful" patterns of length up to n. There are 6 possible patterns for lengths 1 to 3 (e.g., "abc", "acb", "bac", "bca", "cab", "cba" for length 3).
4. Transition: For each substring s[i:j] and each pattern p, compute the cost to transform s[i:j] into the pattern p. This involves counting the number of mismatched characters and summing up the cost.
5. Precompute the costs for all possible substrings and store them in a table.
6. For each query, use the precomputed table to quickly return the cost for the specified substring.

