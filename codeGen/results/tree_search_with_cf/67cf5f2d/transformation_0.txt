
1. Define the state as dp[i], which represents the minimum number of points removed if we start activating points from the i-th point to the rightmost point. The base case is dp[n] = 0, as there are no points to the right of the newly added point.

2. Sort the points based on their positions in ascending order. This helps us to process the points from right to left easily.

3. Iterate from the second last point to the first point (i.e., from right to left) and calculate the dp values:
   - For each point i, determine the farthest point j that can be removed when point i is activated. This can be found by performing a binary search to find the rightmost point that lies within the range of point i.
   - Use the relation dp[i] = dp[j+1] + (j - i) to update the dp value for point i, where (j - i) represents the number of points removed between points i and j (inclusive).

4. The result will be stored in dp[0], which represents the minimum number of points removed when starting from the first point to the rightmost point.

5. Return dp[0] as the output.

