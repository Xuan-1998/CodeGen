"{\"statement\": \"Task: Given the coordinates of n + 2 points on a number line, where some points are marked as bearing and others are marked as ordinary, and the durability of each ordinary point, find the minimum durability required for an additional ordinary point to be added at any point between the first and last point such that the bearing points are connected and the building doesn't collapse. A point collapses if the length of the segment of the ceiling supported by it exceeds its durability, and the load is redistributed between the neighboring points. If there are only two bearing points left in the end, the whole construction collapses under the weight of the roof.\\n\\nInput: The input consists of three lines. The first line contains an integer n (1 \\u2264 n \\u2264 105) \\u2014 the number of ordinary points. The second line contains n + 2 integers x0, x1, ..., xn, xn + 1 (x0 = 0, xi < xi + 1 for 0 \\u2264 i \\u2264 n, xn + 1 \\u2264 109) \\u2014 the coordinates of the points. The third line contains n integers d1, d2, ..., dn (1 \\u2264 di \\u2264 109). The input arrives from standard input.\\n\\nOutput: Print a single number \\u2014 the minimum possible durability of the point that you need to add in order to connect the bearing points and make the building stay. If you do not have to add the point, please print 0. The output is a single integer and it should be printed to standard output. The answer will be checked with the relative or absolute error 10 - 4.\\n\\nConstraints: The number of ordinary points is at most 105, the coordinates of the points are non-negative integers, and the durability of each ordinary point is a positive integer not exceeding 109.\", \"editorial\": \"\", \"tag\": \"['Dynamic programming', 'Data structures']\", \"difficulties\": \"VERY_HARD\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/533/D\", \"sample_test_cases\": [{\"input\": \"1\\n0 3 10\\n2\\n\", \"output\": \"3.5\\n\"}, {\"input\": \"3\\n0 50 100 150 200\\n50 1 50\\n\", \"output\": \"50.0\\n\"}, {\"input\": \"4\\n0 2 4 6 8 10\\n1 3 2 1\\n\", \"output\": \"2.0\\n\"}, {\"input\": \"1\\n0 3 10\\n4\\n\", \"output\": \"1.5\\n\"}, {\"input\": \"2\\n0 1 2 3\\n1000000000 1000000000\\n\", \"output\": \"0\\n\"}]}"