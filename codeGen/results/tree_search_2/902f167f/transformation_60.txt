It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
The base case is when i == 1, in which case the only possible square is a single unit square, so dp[1][j] = 1 for all j.
An alternative approach is to define the state as (i, m) representing the minimum number of squares that tile a rectangle of size i x m, and then transition can be formulated as dp[i][m] = min(dp[i-1][m], 1 + dp[1][m-i])
Define a recursive function with memorized values for i and j such that dp[i][j] = min(dp[i-1][j], 1 + dp[1][m-i])
