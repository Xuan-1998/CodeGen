It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
Let the state be dp[i][j], representing the minimum number of squares that tile a rectangle of size i x j.
dp[i][j] represents the minimum number of squares that can cover an area of i x j. For a given i and j, we need to find the minimum number of squares that can cover the area up to (i-1) x (j-1). The transition relationship is then dp[i][j] = min(dp[k][j] + dp[i-k][j]) for k from 0 to i
Another option is to use memoization with a hash function that maps the state (i, j) to its corresponding value. This approach would require you to implement a custom hash function that takes into account the properties of the problem.
