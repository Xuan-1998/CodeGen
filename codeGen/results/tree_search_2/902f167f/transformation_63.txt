It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
Let the state be dp[i][j] as before, and consider the minimum number of squares that tile the top-left (i-1) x (j-1) sub-rectangle, plus one more square with side length min(i, j).
dp[i][j] = min({dp[k][j] + (i-k) for k in range(min(i,j), -1, -1)})
Initializing the base case for the dynamic programming by setting dp[0][j] and dp[i][0] to 1, since a single square can always tile a rectangle with zero or one sides.
