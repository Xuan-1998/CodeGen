It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
The base case is when i == 1 or j == 1, in which case there are no possible squares, so dp[i][0] = dp[0][j] = 0 for all i and j.
dp[i][j] is the minimum number of squares that tile a rectangle of size (i + h) x j when h satisfies 1 <= h <= n
Use memoization with a dictionary to store the results for each subproblem and avoid redundant computation.
