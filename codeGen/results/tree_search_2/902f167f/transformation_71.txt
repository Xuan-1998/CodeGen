It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
The base case is when i == 1 or j == 1, in which case there are no possible squares, so dp[i][0] = dp[0][j] = 0 for all i and j.
dp[i][j] is the minimum number of squares that tile a rectangle of size i x j, and for each cell dp[i][j], it depends on the value of dp[i-1][j] and dp[i][j-1]
Implement memoization by defining a function to calculate dp[i][j] and storing its result in a dictionary, with keys as tuples (i, j).
