It's possible to use dynamic programming with tabulation by iterating over all possible values of n and m, and for each value, computing the minimum number of squares that tile the rectangle, and then storing this result in a 2D array.
Let the state be dp[i][j] as before, and consider the minimum number of squares that tile either the top part (i-1) x j or left part i x (j-1), whichever requires fewer squares.
Another possibility is to consider the state dp[i][j] as before, and consider the minimum number of squares that tile either the entire rectangle i x j, or a smaller rectangle with dimensions (i-a) x (j-b), where 0 <= a <= i and 0 <= b <= j. This could lead to a recursive formula.
Let the state be dp[i][j] as before, and consider the minimum number of squares that tile either the top part (i-1) x j or left part i x (j-1), whichever requires fewer squares.
