The problem requires calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
The state expression could be the maximum sum of subarrays ending at each position i, which is dp[i]. The base case would be when the current window size is less than k, we just need to calculate the maximum value in this window.
dp[i] is the maximum sum of subarrays ending at index i, including the last element and considering all possible previous windows of size k-1.
Create a 2D table with dimensions n+1 x k, where n is the length of the array and k is the window size
