The dynamic programming solution involves calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
The state is dp[i] which represents the maximum sum of the subarray from index 0 to i, considering all possible partitions.
dp[i] = max(dp[j-1] + arr[j...i].max() for j in range(k-1, i+1))
Create a 2D array to store the maximum sums for subarrays of different lengths.
