The problem requires calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
The state expression could be the maximum sum of subarrays starting from each position i, which is dp[i]. The base case would be when the current window size is 0, we assume it's an empty array and return 0.
dp[i] represents the maximum sum of subarrays starting from each position i.
Employ a 2D DP approach by initializing a table dp of size (n+1) x (k+1), where dp[i][j] is the maximum sum of subarrays of length j ending at index i.
