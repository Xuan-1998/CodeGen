The problem requires calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
dp[i] can represent the maximum sum of all subarrays ending at index i that have a length less than or equal to k. The base case would be when i is less than k, in which case dp[i] = max(arr[:i]) since we are only considering subarrays with lengths less than or equal to k.
dp[i] represents the maximum sum of all subarrays ending at index i that have a length less than or equal to k, dp[i + 1] = max(dp[i], arr[i]),
Create a table (tabulation) to store the maximum sum for each subarray of length k and then calculate the maximum sum for longer subarrays by considering the last element of the previous subarray.
