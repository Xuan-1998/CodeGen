The dynamic programming solution involves calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
State: dp[i] = max sum for arr[:i], and maximum value in that subarray.
dp[i] = max(dp[i-1], arr[i]) and transition relationship: dp[i+1] = max(dp[i], arr[i]),
Design a recursive function that takes the current index, k, and the previous maximum value as parameters.
