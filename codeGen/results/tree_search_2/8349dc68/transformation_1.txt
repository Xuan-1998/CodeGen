The dynamic programming solution involves calculating the maximum sum for each subarray of length k, then for every other subarray that is a continuation of the previous one, we only need to recalculate the maximum sum considering the last element of the previous subarray and all elements in the current subarray. This means we can use memoization to store the results for subarrays of different lengths.
The state is dp[i][j] which represents the maximum sum of a subarray ending at index i with length j.
dp[i][j] = max(dp[i-1][min(j, k)] + arr[i], dp[i-1][j-k+1] + arr[i])
To use dynamic programming with memoization by storing the results in a dictionary with tuples as keys, where each tuple represents an index i and a subarray length j.
