Consider a top-down dynamic programming approach where you recursively remove elements from the array until you find the longest subarray of ones. Then, use memoization to store the results of subproblems.
Consider a binary search approach, where you maintain two pointers left and right that initially point to the start and end of the array. The state could be defined as (left, right), representing the longest subarray ending at index right.
The state could be defined as (left, right), representing the longest subarray ending at index right. The transition relationship could be described by two possible states: (i, j-1) or (i+1, j).
Design a recursive function that takes an array as input, removes one element at a time from the array, and uses memoization to store the lengths of the longest subarrays found so far.
