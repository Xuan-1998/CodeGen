Consider a top-down dynamic programming approach where you recursively remove elements from the array until you find the longest subarray of ones. Then, use memoization to store the results of subproblems.
The state could be defined as dp[i], where dp[i] represents the length of the longest subarray containing only 1's in the first i elements of nums.
dp[i] could represent the maximum number of consecutive ones ending at index i, considering the last element is either a 1 or not included in the subarray.
Use a bottom-up dynamic programming approach by initializing a dp array and iterating over the input array to fill it up with values.
