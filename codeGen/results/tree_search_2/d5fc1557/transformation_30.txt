Think about using a bottom-up approach with tabulation, where you iterate over the array and maintain a running maximum length of consecutive ones. You can then modify this approach to find the longest subarray containing only 1's after removing one element from the input array.
Consider the current maximum length of consecutive ones up to index i as the state, denoted by dp[i].
For every subarray [i, j], consider its length and the number of 0's within this subarray. If there are any 0's, update dp[j] to be the maximum of its current value and the length of this subarray minus one.
Use a bottom-up approach with tabulation by initializing an array dp of size n+1 and setting dp[0] = 0, then iterating over the array from left to right and updating dp[i] as you go.
