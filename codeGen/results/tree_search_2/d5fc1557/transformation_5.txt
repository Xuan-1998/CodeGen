Consider a top-down dynamic programming approach where you recursively remove elements from the array until you find the longest subarray of ones. Then, use memoization to store the results of subproblems.
The state could be defined as dp[i], where dp[i] represents the length of the longest subarray containing only 1's in the first i elements of nums.
Consider a bottom-up dynamic programming approach where dp[i] represents the length of the longest subarray containing only 1's in the first i elements of nums. The transition relationship could be based on whether the current element is a 1 or a 0, and the previous maximum length.
Implement memoization to store the results of subproblems in a dictionary and use it to avoid redundant computations.
