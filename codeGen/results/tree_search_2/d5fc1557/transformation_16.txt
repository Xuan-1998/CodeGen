Consider a top-down dynamic programming approach where you recursively remove elements from the array until you find the longest subarray of ones. Then, use memoization to store the results of subproblems.
Consider a binary search approach, where you maintain two pointers left and right that initially point to the start and end of the array. The state could be defined as (left, right), representing the longest subarray ending at index right.
Let f[i] denote the length of the longest subarray containing only 1's when removing elements from nums[0:i]. Then, f[i] can be calculated as max(f[j-1], 1) if nums[j] == 1 and j >= 1.
Use a list comprehension to create a table where each element at index i represents the length of the longest subarray containing only 1's when removing elements from nums[0:i].
