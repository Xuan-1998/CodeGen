Consider a top-down dynamic programming approach where you recursively remove elements from the array until you find the longest subarray of ones. Then, use memoization to store the results of subproblems.
The state could be defined as dp[i], where dp[i] represents the length of the longest subarray containing only 1's in the first i elements of nums.
Define dp[i][j] as the length of the longest subarray containing only 1's in the first i elements of nums, considering the last j elements are consecutive ones. The state could be updated by considering the current element and the previous maximum length.
Define a dp table with n rows and 2 columns (0 and 1) to store whether each element in nums can be used in the longest subarray of ones.
