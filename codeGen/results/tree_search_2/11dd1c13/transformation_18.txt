Memoization can be used to solve this problem by recursively calling a function and storing the results of subproblems in a dictionary.
The state expression could be dp[i][j] = grid[i][j] if i == 0 else min(dp[i-1][0], dp[i-1][1]) + grid[i][j]
Consider using a tuple (row_index, last_column_index) as the state, which keeps track of the current row index and the last column index chosen.
Use a 2D dictionary to store the results of subproblems where each key is a tuple (i, j) representing the current row index and last column index chosen.
