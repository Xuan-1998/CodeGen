Memoization can be used to solve this problem by recursively calling a function and storing the results of subproblems in a dictionary.
The state expression could be dp[i][j] = min(sum(grid[i][j] + dp[i-1][j+1]), sum(grid[i][j] + dp[i-1][j-1]))
dp[i][j] = min(sum(grid[i][j] for j in range(len(row))), sum(dp[i-1][k] for k in range(len(grid[0]))))
You can create a 2D array dp with the same size as the input grid, where dp[i][j] represents the minimum sum of a falling path ending at cell (i, j).
