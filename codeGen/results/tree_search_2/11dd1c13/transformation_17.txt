Memoization can be used to solve this problem by recursively calling a function and storing the results of subproblems in a dictionary.
The state expression could be dp[i][j] = min(sum(grid[i][j] + dp[i-1][j+1]), sum(grid[i][j] + dp[i-1][j-1]))
for j in range(len(row)): dp[i][j] = min(dp[i-1][k] for k in range(len(grid[0])))
Implement a bottom-up approach using tabulation, filling the 2D table from top-down and left-right.
