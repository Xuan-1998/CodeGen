Memoization can be used to solve this problem by recursively calling a function and storing the results of subproblems in a dictionary.
The state expression could be dp[i][j] = min(sum(grid[i][j] + dp[i-1][j+1]), sum(grid[i][j] + dp[i-1][j-1]))
dp[i][j] = min(dp[i-1][j-1] + grid[i][j], dp[i-1][j+1] + grid[i][j]) if i > 0 else grid[i][j]
Memoize the problem by storing the results of subproblems in a dictionary and use dynamic programming to solve it.
