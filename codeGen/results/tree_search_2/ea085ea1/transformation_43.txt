A bottom-up approach with tabulation can be used by initializing a 2D table of size (N+1) x (N+1), where dp[i][j] represents the maximum number of non-overlapping common substrings between str1[0..i-1] and str2[0..j-1].
dp[i][j] represents the maximum number of non-overlapping common substrings between str1[0..i] and str2[0..j], where dp[i-1][j-1] is updated based on whether str1[i-1] matches str2[j-1].
Think about initializing dp[i][j] as the maximum of two cases: when the current characters match, and when they don't. Then, update the state accordingly.
Use a hash map to store previously computed values, where keys are tuples of characters from both strings and values are maximum numbers of common substrings found so far.
