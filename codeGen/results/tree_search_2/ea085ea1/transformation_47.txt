A bottom-up approach with tabulation can be used by initializing a 2D table of size (N+1) x (N+1), where dp[i][j] represents the maximum number of non-overlapping common substrings between str1[0..i-1] and str2[0..j-1].
dp[i][j] represents the maximum number of non-overlapping common substrings between str1[0..i] and str2[0..j], where dp[i-1][j-1] is updated based on whether str1[i-1] matches str2[j-1].
Determine if a common substring ending at i and j exists by comparing characters and updating the state based on whether this substring is non-overlapping with previously found substrings.
Initialize a 2D table with all values initialized to -1, then iterate through each cell to fill it based on whether the current characters in str1 and str2 match.
