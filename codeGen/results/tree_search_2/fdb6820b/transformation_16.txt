The problem can be solved by using dynamic programming with memoization, where we build a table of solutions to subproblems and use this table to compute the solution to the original problem.
The state expression could be dp[n], where n is the remaining sum needed to reach N, and the base case would be dp[0] = 1 (since one way to form a sum of 0 is to not include any numbers).
let dp[i] = 1 if i == 0 (base case), and let dp[i] be the sum of dp[j] + dp[k] where j, k add up to i
Implement a bottom-up dynamic programming approach using a 2D table
