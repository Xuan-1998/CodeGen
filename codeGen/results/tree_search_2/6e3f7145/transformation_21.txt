Think about a bottom-up dynamic programming approach where you build up the solution from smaller subproblems by considering each character's impact on the palindrome-ness of its surrounding characters
Define the state expression as a 2D array dp where dp[i][j] represents whether the substring S[i...j] is palindromic.
Consider two cases: the characters at both ends are equal and the substring between them is palindromic, or the characters at both ends are not equal.
Expand around the center of the palindrome, considering odd-length and even-length cases separately
