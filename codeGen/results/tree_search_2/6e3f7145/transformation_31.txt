Think about a bottom-up dynamic programming approach where you build up the solution from smaller subproblems by considering each character's impact on the palindrome-ness of its surrounding characters
The base case could be setting all one-character substrings to True (palindromic) and all empty strings to False (not palindromic).
Look into creating a 'center' variable that tracks the character at the center of the palindrome, and then expand outwards on both sides as long as the characters match.
Employ a memoization dictionary to store and reuse intermediate results
