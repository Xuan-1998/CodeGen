What if we already know some palindromes, and we can use those as building blocks? What would be an 'optimal' choice in that case?
Define the state expression and base case as follows: Let dp[i][j] be true if the substring S[i..j] is a palindrome, false otherwise.
If a palindrome ending at i and starting at j has been found, we can extend it to both sides as long as they match. So, let dp[i][j] = (S[i] == S[j]) && (dp[i-1][j+1]),
Use a top-down dynamic programming approach with memoization, where the function dp(i, j) returns True if the substring S[i..j] is a palindrome.
