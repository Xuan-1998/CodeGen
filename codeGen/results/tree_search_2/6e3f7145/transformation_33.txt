Think about a bottom-up dynamic programming approach where you build up the solution from smaller subproblems by considering each character's impact on the palindrome-ness of its surrounding characters
Define the state expression as a 1D array p where p[i] represents the length of the longest palindromic substring ending at index i, with base case being p[0] = 0.
Define p[i] as the maximum length of palindrome that can be formed by considering characters from position i to j (inclusive).
Use dynamic programming to fill up a 2D array dp where dp[i][j] represents whether the substring S[i..j] is palindromic
