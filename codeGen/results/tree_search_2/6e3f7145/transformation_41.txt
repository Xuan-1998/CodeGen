Think about a bottom-up dynamic programming approach where you build up the solution from smaller subproblems by considering each character's impact on the palindrome-ness of its surrounding characters
Define the state expression as a 1D array p where p[i] represents the length of the longest palindromic substring ending at index i, with base case being p[0] = 0.
Define p[i] as the length of the longest palindromic substring ending at index i. The transition relation is: p[i] = 2 if S[i] == S[i-1], and p[i] = p[i-1] - 1 otherwise.
Dynamically construct the 1D array p where p[i] is calculated based on the previous value p[i-1] and the current character S[i].
