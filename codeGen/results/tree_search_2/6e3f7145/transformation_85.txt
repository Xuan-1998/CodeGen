What if we already know some palindromes, and we can use those as building blocks? What would be an 'optimal' choice in that case?
Define the state expression and base case as follows: Let dp[i][j] be true if the substring S[i..j] is a palindrome, false otherwise.
Let dp[i][j] = (S[i] == S[j]) && (i - j <= k) ? true : dp[i-1][j+1], where k is the length of the longest palindromic substring found so far.
Use dynamic programming by iterating through the string and checking for palindromes in each position, with O(n^2) space complexity and O(n) time complexity
