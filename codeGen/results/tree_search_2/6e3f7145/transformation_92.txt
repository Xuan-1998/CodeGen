What if we already know some palindromes, and we can use those as building blocks? What would be an 'optimal' choice in that case?
 Define the state expression and base case as follows: Let dp[i] be the length of the longest palindromic substring ending at index i.
Define dp[i] as the longest palindromic substring ending at index i, and define state transition relationship as dp[i-1] if the current character is the same as the previous one, otherwise 0.
Use a bottom-up dynamic programming approach by initializing a 2D table with dimensions (n x n), where n is the length of the input string S, and fill it in a bottom-up manner using the following recurrence relation: dp[i][j] = 1 if s[i-1] == s[j+1], otherwise dp[i][j] = 0. Then, return the maximum value in the table as the length of the longest palindromic substring.
