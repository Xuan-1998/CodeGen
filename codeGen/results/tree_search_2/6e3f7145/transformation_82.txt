'Optimal' refers to whether we're trying to find the maximum value or the minimum effort required to solve this problem.
dp[i-1][i+1] = 1 if S[i-1..i+1] is a palindrome, and 0 otherwise
If yes, then calculate the longest palindromic substring for both cases (odd-length and even-length) and update the maximum length if necessary.
Create a dictionary memo where memo[(i, j)] = 1 if S[i..j] is a palindrome and memo[(i, j)] = 0 otherwise. This allows for efficient lookups to check if a substring is a palindrome.
