To solve this problem using dynamic programming, we can consider the maximum element in a subarray as the state variable. This means that for each subarray ending at index i, we need to know its maximum element.
Define dp[i] as the number of contiguous subarrays ending at index i with max element greater than K.
dp[i] = sum(1 for j in range(i, -1, -1) if Arr[j] > K and max(Arr[j:i + 1]) > K)
Use a bottom-up dynamic programming approach where you initialize dp with all zeros, then iterate from the end of the array to the start, updating dp[i] based on the previous subarrays
