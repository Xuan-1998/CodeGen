To apply memoization, we can use a dictionary to store the results of subproblems as we solve them, so that if a subproblem is encountered again later, it can be quickly looked up instead of having to recalculate.
The state expression could be (i, k): an integer i from 0 to N-1 representing the current index in the array, and an integer k representing the maximum value allowed in the subarray.
dp(k) = sum(1 for i from 0 to N-1 if max(arr[i:i+K-K]))
Implement memoization using a dictionary to store the results of subproblems, where each key is a tuple (i, k) representing the current index and the maximum allowed value in the subarray, and the corresponding value is the number of contiguous subarrays ending at that position with maximum value less than or equal to k.
