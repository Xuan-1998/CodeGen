To solve this problem using dynamic programming, we can consider the maximum element in a subarray as the state variable. This means that for each subarray ending at index i, we need to know its maximum element.
Let the state be dp[i] = 1 if max(arr[0..i]) > K, otherwise 0.
dp[i] = 1 if arr[i] > K and max(dp[:i-1]) == 0, otherwise dp[i-1].
Design a recursive function that takes an index i as input and returns the maximum element in the subarray ending at i, using memoization to avoid redundant computations.
