To apply memoization, we can use a dictionary to store the results of subproblems as we solve them, so that if a subproblem is encountered again later, it can be quickly looked up instead of having to recalculate.
The state expression could be (i, k): an integer i from 0 to N-1 representing the current index in the array, and an integer k representing the maximum value allowed in the subarray.
dp(i) = sum(1 for j from i to N-1 if arr[j] > K)
Define a 2D array called dp where dp[i][k] is True if there exists a contiguous subarray ending at i with maximum value less than or equal to k, and False otherwise.
