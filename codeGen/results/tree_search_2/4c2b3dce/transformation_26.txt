Split the string into two parts at a random position, check if one part is 'AB' and the other part is 'BA', then recursively split the remaining parts.
dp[i][j] = 1 if there exists a pair of indices k, l such that i <= k < l <= j and s[k...k+2] is 'AB' and s[l-2...l] is 'BA'. Otherwise, dp[i][j] = 0.
Define a state as the last position where either 'A' or 'B' was seen. Transition to a new state when an 'A' or 'B' is encountered, and check if the current state plus 1 equals the end of one of the substrings
Use memoization by storing the results of subproblems in a dictionary and reusing them when needed.
