Check if 'AB' appears in the string, then check if the remaining part contains 'BA'.
Define the state as a tuple (found_A, found_B) where found_A and found_B are booleans indicating whether 'A' and 'B' have been found respectively, and the base case is when found_A == found_B.
The state consists of two indices, one for the start of the substring 'AB' and one for the end. The transition relationship is that if the current character matches the expected character at the correct position in the substring, then we move forward in both indices.
Create a recursive function that uses an optional argument to store the result of subproblems and avoid redundant computation.
