Consider the fact that the maximum number of points that can be earned by deleting elements from the sequence is equivalent to finding the minimum number of non-deleted elements. A bottom-up approach with tabulation might be more suitable for this problem as we can iterate through the sequence and calculate the minimum number of non-deleted elements.
The state expression is dp[i] = minimum number of non-deleted elements up to index i. Base case: dp[0] = n, since the maximum number of points that can be earned by deleting elements from the sequence is equivalent to finding the minimum number of non-deleted elements.
dp[i] = min(dp[i-1], dp[i-2]) + 1 if a_i is not equal to a_{i-1} and a_{i-1} is not equal to a_{i-2}
Use a bottom-up dynamic programming approach where the state dp[i] represents the minimum number of non-deleted elements up to index i, and update it according to the rules you've described.
