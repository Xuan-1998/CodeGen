Since we can delete elements at most once, there might be an overlap in subproblems when choosing whether to delete a certain element or not. This suggests that top-down approach with memoization could be used.
The state is the number of elements left in the sequence, i.e., 0 <= s <= n-1; The maximum points earned with s elements remaining are dp[s].
dp[s] = {points: points + (s+1) if s > 0 and a[s] != i for i in range(a[s-1], a[s]+2)} | {dp[i-1] for i in range(max(0, s-1), min(s+1, n))}
Use a recursive function with a dictionary-based memoization to store intermediate results.
