\
State: Let f(i) represent the maximum number of times array[0..i] can be partitioned into two contiguous subarrays with equal sum, and base case is when i is 1.
The state is dp[i], where dp[i] represents the maximum number of times array[0..i] can be partitioned into two contiguous subarrays with equal sum.
Create a bottom-up dynamic programming approach by iterating from i=1 to n, updating dp[i] based on previous states
