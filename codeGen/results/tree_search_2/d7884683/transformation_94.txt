\
Let the state be dp[i] = the maximum number of times the array can be partitioned up to index i, considering all possible partitions that end at i.
dp[i] = max(1 + dp[k]) for k in range(0, i//2+1) if sum(arr[:k]) == sum(arr[k:])
DP approach: Initialize a table with size n+1 and fill it based on the state transition dp[i] = max(1 + dp[k]) for k in range(0, i//2+1) if sum(arr[:k]) == sum(arr[k:])
