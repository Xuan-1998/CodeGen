\
Let the state be dp[i] = the maximum number of times the array can be partitioned up to index i, considering all possible partitions that end at i.
dp[i] = max(dp[j]) for j in range(i-1, 0, -1) where sum(arr[:j]) == sum(arr[j:])
Implement top-down dynamic programming using recursion to calculate the maximum number of times the array can be partitioned up to each index.
