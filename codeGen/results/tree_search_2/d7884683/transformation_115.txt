\
Consider each element arr[i] as a pivot. Then dp[i] = max(dp[j-1] + (arr[i-1] <= arr[i])) for all j from 0 to i.
Consider a greedy approach. For each element arr[i], if its sum equals to the sum of the remaining elements, we increment the result by 1. If not, we try to find a larger pivot that can be used to partition the array into two subarrays with equal sums. The state transition relationship is dp[i] = max(dp[j-1] + (arr[i-1] <= arr[i])) for all j from 0 to i.
You can implement tabulation using a bottom-up approach, where you build the dp table from the base cases and then fill up the rest of the table using the recurrence relation.
