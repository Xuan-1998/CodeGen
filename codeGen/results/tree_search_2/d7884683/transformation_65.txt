\
The base case is when the array has only one element or an empty array, return 0. Then for each test case, we calculate the total sum and then the maximum possible partitions.
Let the state be (n, sum), where n is the current size of the array and sum is the cumulative sum of elements from the start of the array to the nth element. Then, transition to the next state by incrementing n and updating sum accordingly.
Define a dictionary memo where memo[(n, sum)] = max(memo.get((n-1, sum-left), 0) + memo.get((n-1, sum-right), 0), 1)
