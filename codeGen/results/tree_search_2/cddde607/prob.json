"{\"statement\": \"Task: Given an N x N matrix, where each cell contains a non-negative integer representing the number of coins in that cell, count the number of paths from the top left corner to the bottom right corner that collect exactly K coins, where K is a non-negative integer. From any cell (i, j), you can only move to either (i+1, j) or (i, j+1).\\n\\nInput: The input consists of three integers: K, N, and a 2D matrix arr[][] of size N x N, where each element represents the number of coins in that cell. The input is provided through standard input.\\n\\nOutput: The function should return an integer representing the number of possible paths that collect exactly K coins.\\n\\nConstraints: 1 <= K < 100, 1 <= N < 100, and 1 <= arr_{ij} <= 200. The time complexity of the solution should be O(n*n*k) and the auxiliary space used should be O(n*n*k).\", \"editorial\": \"\", \"tag\": \"['Matrices', 'Dynamic programming', 'Data structures', 'Complete search']\", \"difficulties\": \"MEDIUM\", \"source\": \"geeksforgeeks\", \"url\": \"https://practice.geeksforgeeks.org/problems/number-of-paths-in-a-matrix-with-k-coins2728/1\", \"sample_test_cases\": [{\"input\": \"K = 12, N = 3\\r\\narr[] = [[1, 2, 3], \\r\\n         [4, 6, 5], \\r\\n         [3, 2, 1]]\", \"output\": \"2\"}, {\"input\": \"K = 16, N = 3\\r\\narr[] = [[1, 2, 3], \\r\\n         [4, 6, 5], \\r\\n         [9, 8, 7]]\", \"output\": \"0\"}]}"