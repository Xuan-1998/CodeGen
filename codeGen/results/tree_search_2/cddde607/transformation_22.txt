Consider a 2D DP table where each cell dp[i][j] represents the number of ways to reach cell (i, j) with exactly K coins. The base case would be when i == N-1 and j == N-1, in which case dp[N-1][N-1] = count the number of ways to collect exactly K coins from cells (0, 0) to (N-1, N-1).
state dp[i][j] is the total number of coins in cells (0, 0) to (i, j), base case dp[0][0] is 1 if arr[0][0] == K and 0 otherwise.
dp[i][j] is the sum of dp[i-1][j] and dp[i][j-1], representing the number of ways to reach cell (i, j) by either moving down or right from cell (i-1, j) or cell (i, j-1), respectively.
Apply memoization using a dictionary dp_dict to store the dynamic programming table values.
