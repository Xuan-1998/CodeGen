Consider a 2D DP table where each cell dp[i][j] represents whether it's possible to reach cell (i, j) with exactly K coins. The base case would be when i == N-1 and j == N-1, in which case dp[N-1][N-1] = true if it's possible to collect exactly K coins from cells (0, 0) to (N-1, N-1).
dp[i][j] is true if the current cell has K - arr[i][j] coins left to collect and either i == N-1 or j == N-1.
Let f(i, j) be a boolean indicating whether it's possible to collect exactly K coins by reaching cell (i, j). Then, f(i, j) is true if either i == 0 or j == 0, or for all 0 <= k < i and 0 <= l < j, f(k, l) is also true.
Applying a top-down dynamic programming approach using recursion with memoization to store previously computed values
