Top-down approach with memoization: You can start by calculating the lengths of common and uncommon subsequences for each pair of characters in S and T. Then, you can use memoization to store these values as you go along, so that you don't have to recalculate them later.
dp[i][j] = min(1 + dp[i-1][j-1] if S[i-1] == T[j-1] else 0, dp[i-1][j], dp[i][j-1])
dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1) if S[i-1] != T[j-1]
You can implement a bottom-up approach with dynamic programming by initializing a 2D array dp of size (len(S)+1)*(len(T)+1) and filling it up in a bottom-up manner.
