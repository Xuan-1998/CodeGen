Optimal substructure: A solution to this problem is optimal because if you find a shorter uncommon subsequence, it will be a part of any longer uncommon subsequences. Therefore, the optimal subsequence will always be the shortest one found so far.
State: dp[i][j] is 1 plus the length of the longest common subsequence between S[:i-1] and T[:j-1] (if they exist). The state is 0 if there are no such subsequences.
Use dp[i-1][j-1] as the state variable. The transition relation could be something like dp[i][j] = 1 if S[i-1] != T[j-1] and dp[i-1][j-1] > 0, else dp[i][j] = dp[i-1][j-1].
Use dynamic programming with a 2D table where each cell represents the length of the longest common subsequence between two prefixes of S and T.
