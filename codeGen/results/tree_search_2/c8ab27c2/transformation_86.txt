Bottom-up approach with tabulation: You can also solve this problem using dynamic programming by filling up a 2D table where the entry at row i and column j represents the length of the shortest uncommon subsequence in S[i..] and T[j..].
The state expression is dp[i][j] = i + (S[:i+1] not in T[:j+1]) or dp[i-1][j], where i is the current index of S and j is the current index of T, and the base case is False for all i.
dp[i][j] = 1 + (S[:i+1] not in T[:j+1]) - dp[i-1][j-1]
Use a 2D array where each cell represents whether the subsequence ending at that position is uncommon in both strings.
