Bottom-up approach with tabulation: You can also solve this problem using dynamic programming by filling up a 2D table where the entry at row i and column j represents the length of the shortest uncommon subsequence in S[i..] and T[j..].
The state expression is dp[i][j] = min(dp[i-1][k]) for k in range(j+1), where i is the current index of S and j is the current index of T, and the base case is dp[i][0] = -1 for all i.
State: dp[i][j] represents the length of the shortest uncommon subsequence in S[:i] and T[:j]. Transition: dp[i][j] = min(dp[i-1][k]) for k in range(j+1).
memo = {(-1, -1): None}
