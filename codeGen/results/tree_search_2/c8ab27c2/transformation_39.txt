Optimal substructure: A solution to this problem is optimal because if you find a shorter uncommon subsequence, it will be a part of any longer uncommon subsequences. Therefore, the optimal subsequence will always be the shortest one found so far.
State: dp[i][j] is 1 if S[:i] or T[:j] does not contain any of the previous characters in the other string. Otherwise, it's 1 plus the length of the longest common subsequence between S[:i-1] and T[:j-1].
State: dp[i][j] is the length of the longest common subsequence between S[:i] and T[:j]. If no such subsequence exists, then it's the length of the shortest uncommon subsequence in S[:i] or T[:j].
Use a 2D array to store the lengths of longest common subsequences and update them based on previous values
