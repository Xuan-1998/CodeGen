Top-down approach with memoization: You can start by calculating the lengths of common and uncommon subsequences for each pair of characters in S and T. Then, you can use memoization to store these values as you go along, so that you don't have to recalculate them later.
dp[i][j] = 1 + dp[i-1][j-1] if S[i-1] == T[j-1] else max(dp[i-1][j], dp[i][j-1]),
Determine the longest increasing subsequence in both S and T, then find the difference between these two values to get the length of the shortest uncommon subsequence.
You can use dynamic programming to build up a table of values, where each value represents the length of the longest common subsequence ending at a given position in S or T.
