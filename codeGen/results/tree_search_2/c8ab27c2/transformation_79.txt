Bottom-up approach with tabulation: You can also solve this problem using dynamic programming by filling up a 2D table where the entry at row i and column j represents the length of the shortest uncommon subsequence in S[i..] and T[j..].
The state expression is dp[i][j] = 1 + (i > 0 and j > 0 and s[i-1] != t[j-1]) or max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]), and the base case is all zeros.
dp[i][j] represents the length of shortest uncommon subsequence in S[:i+1] and T[:j+1]. State transition is: if s[i] != t[j]: dp[i][j] = 1 + max(dp[i-1][j], dp[i][j-1]) else: dp[i][j] = min(dp[i-1][j], dp[i][j-1])
Using a 2D table to store the state of each subproblem and iterating over all possible subproblems, filling up the table in bottom-up manner
