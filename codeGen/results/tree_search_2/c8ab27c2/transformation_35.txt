Optimal substructure: A solution to this problem is optimal because if you find a shorter uncommon subsequence, it will be a part of any longer uncommon subsequences. Therefore, the optimal subsequence will always be the shortest one found so far.
State: dp[i][j] is 1 if S[:i] or T[:j] does not contain any of the previous characters in the other string. Otherwise, it's 1 plus the length of the longest common subsequence between S[:i-1] and T[:j-1].
State: dp[i][j] is 1 if S[:i] and T[:j] do not share any common characters. Otherwise, it's the minimum length of an uncommon subsequence in S[:i-1] or T[:j-1].
Implement dynamic programming by filling the 2D table row by row or column by column, depending on the problem's properties.
