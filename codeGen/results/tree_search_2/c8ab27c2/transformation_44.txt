Top-down approach with memoization: You can start by calculating the lengths of common and uncommon subsequences for each pair of characters in S and T. Then, you can use memoization to store these values as you go along, so that you don't have to recalculate them later.
dp[i][j] = 1 + dp[i-1][j-1] if S[i-1] == T[j-1] else max(dp[i-1][j], dp[i][j-1]),
Consider the lengths of common subsequences between prefixes of S and T, and use this information to construct the uncommon subsequences.
Develop a recursive function with memoization to avoid redundant calculations.
