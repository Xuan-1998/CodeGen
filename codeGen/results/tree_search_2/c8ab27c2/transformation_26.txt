Optimal substructure: A solution to this problem is optimal because if you find a shorter uncommon subsequence, it will be a part of any longer uncommon subsequences. Therefore, the optimal subsequence will always be the shortest one found so far.
State: dp[i][j] represents the length of the shortest uncommon subsequence in S[:i] and T[:j]. The state is true if there exists a common subsequence between S[:i] and T[:j], otherwise it's false.
dp[i][j] = dp[i-1][j] + 1 if S[i-1] not in T[:j] else -1 if S[i-1] in T[:j]
Memoization
