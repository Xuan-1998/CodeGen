Top-down approach with memoization: You can start by calculating the lengths of common and uncommon subsequences for each pair of characters in S and T. Then, you can use memoization to store these values as you go along, so that you don't have to recalculate them later.
dp[i][j] = 1 if S[:i+1] is not a subsequence of T[:j+1] else min(dp[i-1][j], dp[i][j-1]) + 1
Compare each pair of characters in S and T to find the uncommon characters. If a character is not present in T or vice versa, add 1 to your current answer.
You can use a top-down approach with memoization to calculate dp[i][j] values based on the lengths of common and uncommon subsequences for each pair of characters in S and T.
