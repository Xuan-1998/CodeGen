The problem can be solved using a two-dimensional DP table where the rows represent the current index in the array, and the columns represent the maximum sum of subsequences with the given constraint.
dp[i][j] could represent the maximum sum of subsequences ending at index i with the last element being j indices apart from the previous one.
Create dp[i][j] as the maximum sum of subsequences ending at index i with the last element being j indices apart from the previous one, considering all possible choices of the previous element.
dp[i][j] = max(dp[i-1][j] + nums[i], dp[i-k-1][min(j-1, k)+1] + nums[i]) if j > 0 else dp[0][0] + nums[i] for i in range(len(nums)) for j in range(min(k+1, len(nums)-i))]
