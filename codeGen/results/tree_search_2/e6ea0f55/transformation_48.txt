The optimal solution can be found by using dynamic programming and tabulation to fill in a 2D table with the maximum sum of subsequences for each pair of consecutive elements and their difference.
dp[i][j] represents the maximum sum of a subsequence with length i where the absolute difference between any two consecutive elements is not greater than j.
State: dp[i][j] = max(sum(subsequence ending at i, with diff <= j)) for all 0 <= i < n and 0 <= j <= k
Create a 2D DP table filled by iterating over the array and its differences
