A bottom-up approach with tabulation could be used to solve this problem by initializing a DP table with all zeros, then filling up the table using the given constraint.
The base case could be when i = 0, where the maximum sum is simply the maximum element in nums.
Represent each possible subsequence ending at index i as a tuple (i, max_sum), where max_sum is the maximum sum of that subsequence. The state could then be updated by iterating over all previous subsequences with indices within k distance from i and updating the maximum sum if necessary.
for i from 1 to len(nums) - 1: dp[i][k+1] = max(dp[i-1][k], dp[i-1][k-1] + nums[i]) for k from 0 to min(i, len(nums)-i-1), and finally return dp[-1][-1].
