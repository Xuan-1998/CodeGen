Think about using memoization to store the results of subproblems and optimize the recursive function by avoiding repeated computations.
dp(i, k) = 1 if i == 0, sum(dp(j-1, k-j)*is_divisible(n, j)) for j in range(1, k+1)
dp(i, k) = dp(i-1, k-1) * sum(dp(j-1, k-j)*is_divisible(n, j)) for j in range(1, i+1) if the transition relies on the previously computed results of subproblems
Store intermediate results in an array dp[][] and fill it in a bottom-up manner.
