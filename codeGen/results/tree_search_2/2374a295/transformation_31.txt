Think about using memoization to store the results of subproblems and optimize the recursive function by avoiding repeated computations.
dp(i, k) = 1 if i > n or k == 0, 0; dp(i, k) = sum(dp(j-1, k-j)*is_divisible(i, j)) for j in range(2, min(i, k)+1)
Use the concept of a sliding window to maintain a current sequence and check if it's good by verifying divisibility between adjacent numbers.
Memoize the recursive function using a dictionary to store the results of subproblems
