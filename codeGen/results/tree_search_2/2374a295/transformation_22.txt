Think about using memoization to store the results of subproblems and optimize the recursive function by avoiding repeated computations.
dp(i, k) = 1 if i == 0, sum(dp(j-1, k-j)*is_divisible(n, j)) for j in range(1, k+1)
dp(i, k) = 0 if i > n and is_divisible(n, i), dp(i, k) = sum(dp(j-1, k-j)*is_divisible(n, j)) for j in range(1, min(k+1, i+1)) if the state only depends on the current value and not on previous values
Use a combination of recursion and memoization to optimize the solution
