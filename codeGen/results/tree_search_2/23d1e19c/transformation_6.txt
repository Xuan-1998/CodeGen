Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
The state expression is (v, prev_path) where v is the current vertex and prev_path is the sequence of vertices in the path from s to t up to the previous vertex.
(v, prev_path) = (t, []) initially; DP transition: update state with new vertex by checking if it's in the fixed path and updating accordingly
Memoization using recursion: Define a recursive function that takes the current vertex and previous path as arguments, and returns the minimum and maximum number of recomputations. Store the results in a dictionary to avoid redundant computation.
