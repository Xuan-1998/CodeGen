Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
The state expression is (prev_v, prev_path) where prev_v is the last vertex in the path and prev_path is the sequence of vertices up to prev_v.
The dynamic programming state can be formulated as (v, rec) where v is the current vertex and rec is a boolean indicating whether the shortest path needs to be recomputed for v.
Use a 2D array dp[][] to store the minimum and maximum number of recomputations for each vertex, where dp[i][j] = (min_rec, max_rec) represents the minimum and maximum number of times the shortest path from the current vertex to t needs to be recomputed when the previous vertex is i and the previous path is j.
