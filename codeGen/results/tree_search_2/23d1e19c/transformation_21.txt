Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
The state expression is (prev_v, prev_path) where prev_v is the last vertex in the path and prev_path is the sequence of vertices up to prev_v.
The dynamic programming state can be formulated as (v, rec) where v is the current vertex and rec is a boolean indicating whether the shortest path needs to be recomputed for v.
Implement a memoization function that takes as input the current vertex v and the previous path prev_path and returns the minimum and maximum number of times the shortest path from v to t needs to be recomputed given the previous path.
