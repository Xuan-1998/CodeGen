Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
Define the state as a single variable 'v' representing the current vertex and the base case is when v equals t since there's no need to recalculate at this point.
The state can be represented as a tuple (v, path), where v is the current vertex and path is a list of previous vertices in the fixed path.
Use memoization to store the results of subproblems as you solve them, so that when a subproblem is encountered again later, it can be looked up in the cache instead of recomputed.
