Explore the idea of using a priority queue to maintain the shortest distance from each vertex to t and update the minimum and maximum number of recomputations based on the path recomputation.
State: dp[i] = number of times the shortest path from vertex i to t needs to be recomputed
dp[i] = max(dp[j] + 1, j in path from s to i) for all vertices j in the fixed path
Applying dynamic programming and memoization by storing the intermediate results in a dictionary dp, where dp[i] represents the minimum and maximum number of times the shortest path from vertex i to t needs to be recomputed.
