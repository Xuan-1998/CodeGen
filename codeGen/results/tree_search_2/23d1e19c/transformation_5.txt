Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
The state expression is (v, prev_path) where v is the current vertex and prev_path is the sequence of vertices in the path from s to t up to the previous vertex.
(v, prev_path) = (t, []) initially; DP transition: update state with new vertex by checking if it's in the fixed path and updating accordingly
DP with a 2D array: Initialize an n x k table to store the minimum and maximum number of recomputations for each vertex, where k is the length of the fixed path. Use the state representation (v, prev_path) as mentioned in the steps.
