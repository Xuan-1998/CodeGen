Think about using a disjoint set data structure to keep track of connected components in the graph and update the minimum and maximum number of recomputations accordingly.
The state expression is the current vertex v, with dp[v] representing the minimum and maximum number of times the shortest path from v to t needs to be recomputed. The base case is when v equals t, where dp[t] = [0, 0].
dp[v] = [min(min(dp[u] for u in children[v])), max(max(dp[u] for u in children[v]))], where children[v] contains all vertices that are connected to v.
You could implement a top-down memoization approach by defining a recursive function that returns the minimum and maximum number of recomputations for a given vertex v, and then use memoization to avoid redundant computations.
