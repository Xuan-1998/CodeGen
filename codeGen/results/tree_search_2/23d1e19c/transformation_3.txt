Consider using dynamic programming with a 2D array to store the minimum and maximum number of recomputations for each vertex, where the state represents the current vertex and the previous path.
The state expression is (v, prev_path) where v is the current vertex and prev_path is the sequence of vertices in the path from s to t up to the previous vertex.
(v, prev_path) represents the shortest path from v to t considering the recomputation history up to prev_path; (u, path) -> ((u, path[1:]) + 1 if u == p for some p in path else min_recomp + 1) where p is the current vertex on the fixed path
Define a recursive function to compute the minimum and maximum number of recomputations for each vertex, and use memoization to avoid redundant calculations
