Apply a bottom-up dynamic programming approach using tabulation, by iterating through all possible subproblems in order of increasing size.
DP_state = (n, same_color): boolean indicating whether the first color is the same as the last color. If true, we need to recolor all lamps.
DP_state = (i, s1, c) and DP_state = (n-i-1, s2, c'): boolean indicating whether the first color is the same as the last color and the middle color is different from both ends in a garland of length n.
Employ a dictionary to store previously computed values and avoid redundant computation
