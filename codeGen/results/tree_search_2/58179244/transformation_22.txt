Apply a bottom-up dynamic programming approach using tabulation, by iterating through all possible subproblems in order of increasing size.
DP_state = (n, last_color): number of recolors needed for garland up to index n with last color as 'last_color'.
Choose DP_state = (n, last_color, prev_colors): number of recolors needed for garland up to index n with last color as 'last_color' and previous colors as 'prev_colors'.
Using a dictionary where DP_state[(n, last_color)] = number of recolors needed for garland up to index n with last color as 'last_color'.
