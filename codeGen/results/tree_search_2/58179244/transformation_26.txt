Apply a bottom-up dynamic programming approach using tabulation, by iterating through all possible subproblems in order of increasing size.
DP_state = (n, last_color): number of recolors needed for garland up to index n with last color as 'last_color'.
Select DP_state = (n, last_color): number of recolors needed for garland up to index n with last color as 'last_color', considering only the current state.
Initialize a 3D DP array dp[i][c] = min(dp[i-1][other_color]) + 1 for i in range(n+1), and iterate through all possible subproblems in order of increasing size.
