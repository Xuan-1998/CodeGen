Apply a bottom-up dynamic programming approach using tabulation, by iterating through all possible subproblems in order of increasing size.
DP_state = (n, last_color): number of recolors needed for garland up to index n with last color as 'last_color'.
Choose DP_state = (n, last_color, prev_colors): number of recolors needed for garland up to index n with last color as 'last_color' and previous colors as 'prev_colors'.
Maintaining an array of size (n+1) x 3 where DP_state[i][c] represents the minimum number of recolors needed for garland up to index i with the last lamp having color c.
