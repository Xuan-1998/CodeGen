"{\"statement\": \"Task: Given a garland of $n$ lamps, each colored red, green or blue, the task is to recolor some lamps in such a way that the garland becomes diverse, i.e., any two adjacent lamps have distinct colors. Find the minimum number of lamps that need to be recolored to achieve this, and output any diverse garland obtained from the initial one with the minimum number of recolors.\\n\\nInput: The input consists of two lines. The first line contains an integer $n$ representing the number of lamps. The second line contains a string $s$ of length $n$ consisting of characters 'R', 'G' and 'B', representing the colors of the lamps in the garland. Input is provided through standard input.\\n\\nOutput: The output consists of two lines. The first line contains an integer $r$ representing the minimum number of recolors needed to obtain a diverse garland from the given one. The second line contains a string $t$ of length $n$, representing a diverse garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, any of them can be printed.\\n\\nConstraints: $1 \\\\le n \\\\le 2 \\\\cdot 10^5$.\", \"editorial\": \"\", \"tag\": \"['Greedy algorithms', 'Dynamic programming', 'Constructive algorithms']\", \"difficulties\": \"MEDIUM\", \"source\": \"codeforces\", \"url\": \"https://codeforces.com/problemset/problem/1108/D\", \"sample_test_cases\": [{\"input\": \"9\\nRBGRRBRGG\\n\", \"output\": \"2\\nRBGRGBRGR\\n\"}, {\"input\": \"8\\nBBBGBRRR\\n\", \"output\": \"2\\nBRBGBRGR\\n\"}, {\"input\": \"13\\nBBRRRRGGGGGRR\\n\", \"output\": \"6\\nBGRBRBGBGBGRG\\n\"}, {\"input\": \"1\\nB\\n\", \"output\": \"0\\nB\\n\"}, {\"input\": \"2\\nBB\\n\", \"output\": \"1\\nBR\\n\"}, {\"input\": \"3\\nRGG\\n\", \"output\": \"1\\nRGR\\n\"}, {\"input\": \"5\\nGBBRG\\n\", \"output\": \"1\\nGBGRG\\n\"}, {\"input\": \"500\\nBRGRRBBGGRBBRBBGGGRBGBGRGRRBRRRBGRBGBRGGGRBBRRBBBRGGBGBBBGGGRGRBBBRBGGBRGGGBRGGRBRGBBGBRRGGBGRGBGGGGGRBBRGBGGRBGGGRBRGGBBGRBBRRRGBRRBGGBGBGGGGRBGRGRRGGGBRBRRGBGGGRBRBBGBBGGBRBGBRRGGRRBGGRRRRBRGRBBBRRBGRBBGBGBRRGGBRRBBRRGGRRRBGBRBBGRRRRBGGGBRGRRBRRRRGGRBRRBBRRGRGBGRRRBRRGGBBGRRBBGRGRBRGBRBBRBBBBGBRGGGGGGBBBGRGGBGRRBRBBBBRBGBRRGGRGBGGBRGRBGRBGBGRRGRGBGGRRRGRGBRGBGBBGRRBBGGGBRGGBGRRGGGRBGGRRBRGBGGBRRBBGGGGRRBGGGBRGGBRRRBRBGGRRRRGBRBBRBRGRGRRBBBBGBRGRRRRGBGBRGGGRBRGGGBGBBRGRRRBBRBGGGRGBRRGGRRGGBBGRR\\n\", \"output\": \"131\\nBRGRGBRGBRBGRBRGBGRBGBGRGRGBRGRBGRBGBRGBGRBGRGBGBRGRBGBRBGBGRGRBGBRBGRBRGRGBRGBRBRGBRGBRBGRBGRGBGBGBGRBGRGBGBRBGBGRBRGRBRGRBGRBRGBRGBGRBGBGBGBRBGRGRBGRGBRBRBGBGBGRBRBRGBRGRBRBGBRBGBRGBGBRGRGBRGRBGBRGBGRBRGBGBRBGRBRGBGRBGBRGRBGBRBRGRGRGBGRGBRGRGBRBRBGBRBRGBGRBGRGBGRGRBRBGRBRGRGBRGRGRBRGBRBGRBRBRGBRGRGRGRBRBGRGRBGRGBRBGBGRBGBRBGBRGBGRBRGRBGRBGBGRBGRGBGBRBRGRGBRGBGBRGRGBRGRGBRGRBGRBGBGRBGBRGBRGBGRBRGBRGBGBRGBGRGBRGRBRGRBRBGBRBRBGBRBGRBRGRGRGBRBRGBRGRBRBGBGBRGBGRBRGRGBGBGRGRGRBGRBGBGRGBRBGBRBGRBRGRG\\n\"}, {\"input\": \"69\\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\n\", \"output\": \"34\\nRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGR\\n\"}, {\"input\": \"5\\nGBBRG\\n\", \"output\": \"1\\nGBGRG\\n\"}, {\"input\": \"3\\nRGG\\n\", \"output\": \"1\\nRGR\"}, {\"input\": \"500\\nBRGRRBBGGRBBRBBGGGRBGBGRGRRBRRRBGRBGBRGGGRBBRRBBBRGGBGBBBGGGRGRBBBRBGGBRGGGBRGGRBRGBBGBRRGGBGRGBGGGGGRBBRGBGGRBGGGRBRGGBBGRBBRRRGBRRBGGBGBGGGGRBGRGRRGGGBRBRRGBGGGRBRBBGBBGGBRBGBRRGGRRBGGRRRRBRGRBBBRRBGRBBGBGBRRGGBRRBBRRGGRRRBGBRBBGRRRRBGGGBRGRRBRRRRGGRBRRBBRRGRGBGRRRBRRGGBBGRRBBGRGRBRGBRBBRBBBBGBRGGGGGGBBBGRGGBGRRBRBBBBRBGBRRGGRGBGGBRGRBGRBGBGRRGRGBGGRRRGRGBRGBGBBGRRBBGGGBRGGBGRRGGGRBGGRRBRGBGGBRRBBGGGGRRBGGGBRGGBRRRBRBGGRRRRGBRBBRBRGRGRRBBBBGBRGRRRRGBGBRGGGRBRGGGBGBBRGRRRBBRBGGGRGBRRGGRRGGBBGRR\\n\", \"output\": \"131\\nBRGRGBRGBRBGRBRGRGRBGBGRGRGBRGRBGRBGBRGRGRBGRGBRBRGRBGBRBGRGRGRBRBRBGRBRGRGBRGBRBRGBRGBRBGRBGRGBGRGRGRBGRGBGBRBGRGRBRGRBRGRBGRGRGBRGBGRBGBGRGBRBGRGRBGRGBRBRBGBGRGRBRBRGBRGRBRBGBRBGBRGBGBRGRGBRGRBRBRGBGRBRGBGBRBGRBRGBGRBGBRGRBGBRBRGRGRGBGRGBRGRGBRGRBGBRBRGBGRBGRGBGRGRBRBGRBRGRGBRGRGRBRGBRBGRBRBRGBRGRGRGRBRBGRGRBGRGBRBRBGRBGBRBGBRGBGRBRGRBGRBGBGRBGRGBGBRGRGRGBRGBGBRGRGBRGRGBRGRBGRBGRGRBGBRGBRGBGRBRGBRGRGBRGBGRGBRGRBRGRBRBGBRGRBGBRBGRBRGRGRGBRBRGBRGRGRBGBGBRGRGRBRGRGBGBGRGRGRBGRBGRGRGBRBGBRBGRBRGRG\"}, {\"input\": \"69\\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\\n\", \"output\": \"34\\nRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGR\\n\"}, {\"input\": \"1\\nB\\n\", \"output\": \"0\\nB\\n\"}, {\"input\": \"2\\nBB\\n\", \"output\": \"1\\nBR\"}]}"