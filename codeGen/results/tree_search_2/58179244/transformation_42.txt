Apply a bottom-up dynamic programming approach using tabulation, by iterating through all possible subproblems in order of increasing size.
DP_state = (n, same_color, prev_color): tuple representing the number of recolors needed for garland up to index n with same color as the previous one and its previous color.
DP_state = (n, prev_color): tuple representing the number of recolors needed for garland up to n with same color as its previous color.
Using a 2D DP array where each cell dp[i][j] represents the minimum number of recolors needed for garland up to index i with color j. The state transitions are based on whether the current lamp's color is the same as its previous one.
