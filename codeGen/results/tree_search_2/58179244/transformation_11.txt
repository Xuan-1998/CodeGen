Use a top-down dynamic programming approach with memoization to store previously computed values, and recursively solve the problem for smaller subproblems.
dp[i][c] could represent the total number of distinct colors in the first i lamps, with the ith lamp being colored c. In this case, the base case would be when i = 1, where we would have dp[1][c] = 1 for each possible color c.
Consider using a 2D array dp[i][j] where dp[i][j] is 1 if the first i lamps are diverse with the ith lamp having color j, and 0 otherwise. The state would be (i, j) and the transition would be from state (i-1, k) for any k.
Designing a recursive function that uses memoization to store intermediate results and avoid redundant computations
