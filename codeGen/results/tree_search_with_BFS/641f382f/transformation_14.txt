Your plan seems to be on the right track. However, there are some modifications needed. The main issue with your plan is that you are assuming that if the gcd of a subarray is not 1, then dp[i][j] = 0, but that's not correct. If the gcd of a subarray is not 1, it doesn't mean that we can't perform operations to make it 1, it just means that we need more operations. So, dp[i][j] should not be set to 0 in this case. 

Here is an updated version of your plan:
===BEGIN PLAN===
1. Initialize a 2D array dp of size n x n. Fill the diagonal elements dp[i][i] with 0. Also, initialize an array gcd to store the gcd of all subarrays from i to j. gcd[i][j] = gcd(gcd[i][j-1], arr[j]).
2. Base Case: If there is any element in the array which is already 1, then return 0 as no operations are needed.
3. Transition: For each subarray of size 2 to n, compute the minimum number of operations required to make all elements equal to 1. If the gcd of any subarray is 1, then dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + 1) for all i <= k < j. If the gcd of the subarray is not 1, then dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + 1) for all i <= k < j.
4. If the gcd of the entire array is 1, then return dp[0][n-1] which is the minimum number of operations required to make all elements of the array equal to 1. If the gcd of the entire array is not 1, then it's not possible to make all elements equal to 1, return -1.
===END PLAN===

This plan covers all edge cases and should work for all inputs within the constraints. The time complexity of this approach is O(n^3), which is feasible as n is up to 2000. The space complexity is O(n^2) for the dp and gcd arrays.
