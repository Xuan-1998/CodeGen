
2. Bottom-up strategy with tabulation: This method involves solving smaller subproblems first and using their solutions to build up the solution to the original problem. It is typically implemented using iterative loops and a table to store intermediate results.
1. State Definition: Define dp[i][j] as the number of ways to form a subtree with i vertices and j good vertices.
2. State Expression: Define dp[i][j] as the number of ways to form a subtree with i vertices and j good vertices. Base Case: dp[1][1] = 1, indicating there's one way to form a subtree with one vertex (the root itself) which is also a good vertex.
3. Transition: For each vertex, consider it as the root of a subtree. Distribute its out-degree to its children and calculate the number of ways to form subtrees for each child. Use combinatorial methods to count the ways to distribute vertices and good vertices among children.
4. Iterate through all vertices and their possible out-degrees, updating the dp table accordingly.
5. Sum the number of good vertices for all subtrees rooted at each vertex.
6. Return the sum modulo 998244353.

