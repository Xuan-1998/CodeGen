python
===BEGIN PLAN===
1. Understand the problem: We need to count the number of good vertices in all possible good rooted directed trees that can be formed with given out-degrees for each vertex. A good vertex is one where the minimum vertex number in its subtree is itself.
2. Note the constraints: The sum of out-degrees is N-1, which matches the property of a tree with N vertices having N-1 edges.
3. State expression: Let dp[i][j] represent the number of ways to form a subtree with i vertices where the root has an out-degree of j.
4. Base case: dp[1][0] = 1, since a single vertex with no children is a valid subtree.
5. Transition relationship: dp[i][j] = sum(dp[k][x] * dp[i-1-k][j-1-x] for all valid k and x), where we consider different ways to distribute the children among the subtrees rooted at the current vertex. This ensures that we account for all possible subtree configurations.
6. Calculate the total number of good vertices: For each subtree configuration, determine if the root is a good vertex by checking if it is the minimum vertex in its subtree.
7. Sum up the number of good vertices for all valid subtree configurations.
8. Apply modulo 998244353 to the final result to handle large numbers.
===END PLAN===

