===BEGIN PLAN===
Use dynamic programming for a bottom-up approach by iterating over the characters in both strings, updating the DP table accordingly
Define dp[i][j] as the length of the shortest subsequence in S[:i] that is not a subsequence in T[:j]
Initialize two 2D arrays, one for S and one for T, with dimensions (len(S) + 1) x (len(T) + 1), filled with -1
For each character c in both strings:
    Iterate over the characters in S and T respectively, using pointers i and j
    If the current characters match, update the DP table accordingly
    Else, set dp[i][j] to 0
Return dp[len(S)][len(T)] if it's not -1; otherwise, return -1
Use memoization to store the intermediate results and avoid redundant computations
===END PLAN===
