===BEGIN PLAN===
Use dynamic programming for a bottom-up approach by iterating over the characters in both strings
Consider dp[i][j] as the length of the shortest subsequence ending at index i in string S and j in string T
Initialize dp table with 0s (or -1s) to represent no common subsequences
Iterate over each character pair in S and T:
    If characters match, update dp[i][j] = dp[i-1][j-1] + 1
    If characters don't match, update dp[i][j] = 1 (as this character is not part of a common subsequence)
Update the DP table accordingly
For each index i in string S:
    Find the maximum length of common subsequences ending at that position
    The length of the shortest uncommon subsequence would be the difference between the length of string S and the maximum length found
===END PLAN===
