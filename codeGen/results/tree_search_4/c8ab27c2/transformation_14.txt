===BEGIN PLAN===
Use dynamic programming for a bottom-up approach by iterating over the characters in both strings
Update the DP table accordingly using the following recurrence relation:
    dp[i][j] = min(dp[i-1][j-1] + 1 if S[i-1] == T[j-1], else max(dp[i-1][j], dp[i][j-1]))
Initialize the base case: dp[0][0] = 0
Implement memoization by storing the results of subproblems as you solve them
Iterate over the characters in both strings, updating the DP table row-wise (i.e., for each character in S and T)
Return the minimum length of a subsequence that ends with the last character in either string - 1, since we want to find the shortest uncommon subsequence
===END PLAN===
