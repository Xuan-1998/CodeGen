===BEGIN PLAN===
Use dynamic programming for a bottom-up approach by iterating over the characters in both strings, updating the DP table accordingly
Consider dp[i][j] as the length of the shortest subsequence ending at index i in string S and j in string T.
dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1 if S[i] != T[j], else dp[i-1][j-1]
Consider a 2D array dp where dp[i][j] is the minimum length of subsequence ending at index i in string S and j in string T.
Fill up the dp array based on the previous step:
    Initialize dp[0][0] = 0
    For each i in range(1, S.length()):
        For each j in range(1, T.length()):
            If S[i-1] != T[j-1]:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1
            Else:
                dp[i][j] = dp[i-1][j-1]
    Return dp[S.length() - 1][T.length() - 1]
===END PLAN===
