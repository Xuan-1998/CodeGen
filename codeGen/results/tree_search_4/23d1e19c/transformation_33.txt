===BEGIN PLAN===
dp[j] = (min_dp[0], max_dp[0]) if j == 1 else 
    ((j > 1) * (dp[j-1][0] + 1, dp[j-1][1])) or ((p[j] == t) * (dp[k-1][0] + 1, dp[k-1][1])) else
    ((dp[0][0] + 1, dp[0][1]),)
min_dp = [float('inf')] * (n+1); min_dp[1] = (0,0); 
max_dp = [float('-inf')] * (n+1); max_dp[1] = (0,0);
for i in range(2, n+1):
    if p[i-1] == t: 
        min_dp[i] = min(min_dp[i-1][0]+1, dp[k-1][0]), max(max_dp[i-1][1], dp[k-1][1])
        max_dp[i] = (min_dp[i][0], max_dp[i][1]) if p[i-1] == t else (min_dp[0][0]+1, min_dp[0][1])
    else:
        min_dp[i] = min(min_dp[i-1][0]+1, dp[0][0]+1), max(max_dp[i-1][1], dp[0][1])
        max_dp[i] = (min_dp[i][0], max_dp[i][1]) if p[i] == t else (min_dp[0][0]+1, min_dp[0][1])
print(min_dp[n], max_dp[n])
===END PLAN===
