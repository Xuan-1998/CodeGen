Optimal substructure: The optimal solution to this problem is to find the minimum and maximum number of times the shortest path needs to be recomputed. This can be achieved by finding the maximum and minimum lengths of the recommended paths between vertices in the fixed path, as these will determine when the shortest path needs to be recomputed.

dp[i][0] = the minimum number of times the shortest path from vertex 1 to t needs to be recomputed when the current vertex is i
dp[i][1] = the maximum number of times the shortest path from vertex 1 to t needs to be recomputed when the current vertex is i

dp[0] = (0, 0)
for i in range(1, k+1):
    if p[i] == t:
        dp[i] = (dp[i-1][0] + 1, min(dp[i-1][0], dp[i-1][1]))
    else:
        dp[i] = (min(dp[0][0], dp[i-1][0]) + 1, max(dp[0][1], dp[i-1][1]))

return dp[k]
