===BEGIN PLAN===
Consider dynamic programming where each subproblem is defined as a tuple (N, i) representing the remaining value N and the index i in the array. The optimal substructure can be identified by realizing that the problem of finding ways to form N with the first i elements of the array is similar to the original problem but with reduced size.

State: dp[N][i] represents the number of ways to form N using the first i elements.
Base case: when i is 0 or N is less than 0, return 0.

dp[N][i] = sum(dp[N-k][j] for k in array[:i+1]), where j varies from the maximum index that can be reached by subtracting a number in array[:i+1] from N to 0.
Memoizing function calls

===END PLAN===
