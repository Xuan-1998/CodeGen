===BEGIN PLAN===
The optimal substructure lies in the fact that the solution to the current problem depends on the solutions to the subproblems of smaller sizes.

State: Consider the subset sums for each subset size from 0 to N, where N is the total number of elements in the set. The state would be a tuple (subset_size, current_sum).

State: dp[i][j][k] represents whether the sum k can be generated by a subset of size j using the first i elements. The state would be a 3D array where dp[i][j][k] is either True or False.

Initialize a 2D array memo[100][101][101] with all values as False, except for dp[0][0][0] being True, indicating that sum 0 can be generated by an empty subset of size 0 using the first 0 elements.

Function dp(i, j, k) that returns True if the sum k can be generated by a subset of size j using the first i elements, otherwise False:

    If i == 0 or j == 0 or k == 0, return False
    For each element ai in the set from i-1 down to 0:
        If ai <= k and dp[i-1][j-1][k-ai], return True
    Return False

For each integer N in the input:

    Initialize a set S containing all integers from 1 to N
    Initialize an empty set distinct_sums
    For each subset size j from 0 to N:
        For each sum k from 0 to N:
            If dp[N][j][k], add k to distinct_sums

Sort the elements in distinct_sums and print it

===END PLAN===
