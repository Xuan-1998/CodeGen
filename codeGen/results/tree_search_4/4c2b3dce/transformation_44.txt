===BEGIN PLAN===
Use a sliding window approach to check for the presence of both substrings 'AB' and 'BA'
The state is a tuple (i, j) where i is the index of the last character seen from 'AB', and j is the index of the last character seen from 'BA'. The base case is when both substrings have been processed.
Maintain two separate dynamic programming arrays dp_ab and dp_ba to keep track of the presence or absence of each substring up to a given index.

Initially, set dp_ab[0][0] = True and dp_ba[0][0] = False to represent the base case where no characters have been seen yet.
Iterate over the string s, and for each character:
    If the current character is 'A', update dp_ab[i+1][j] = True and dp_ba[i+1][0] = False
    If the current character is 'B' and dp_ab[i][j] == True, update dp_ba[i+1][j+1] = True and dp_ab[i+1][0] = False
    If the current character is not 'A' or 'B', set both dp_ab[i+1][j] = dp_ab[i][j] and dp_ba[i+1][j] = dp_ba[i][j]

After processing the entire string, check if both substrings are present by checking dp_ba[|s|][0] and dp_ab[|s|][0]
If both are True, print "YES", otherwise print "NO"
===END PLAN===
