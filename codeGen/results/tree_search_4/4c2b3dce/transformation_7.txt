===BEGIN PLAN===
Split the string into two halves and recursively solve for each half, combining the results
Let s[i] be a boolean indicating whether 'AB' or 'BA' is found in the first i characters of s.
Consider a 2D DP table where dp[i][j] represents whether 'AB' or 'BA' appears in the substring from index i to j. The base case is when i == j, in which case we only need to check if 'AB' or 'BA' is present at this position.
Create a dictionary memo to store and reuse previously computed results for subproblems.
For each character c at position k:
  If dp[k][k] is True, return "YES" as 'AB' or 'BA' has been found in the string
  Otherwise, iterate over all possible substrings of s from index i to j (i <= k and k <= j)
    If substring matches 'AB' or 'BA', update dp[i][j] = True and memo[(i, j)] = True
    Recursively solve for subproblems in the remaining part of the string
  Return "NO" if no substrings match 'AB' or 'BA'
===END PLAN===
