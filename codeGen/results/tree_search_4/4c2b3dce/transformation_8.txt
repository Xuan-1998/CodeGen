===BEGIN PLAN===
Split the string into two halves and recursively solve for each half, combining the results
Let s[i] be a boolean indicating whether 'AB' or 'BA' is found in the first i characters of s.
Consider a 1D DP table where dp[i] represents whether 'AB' or 'BA' appears in the substring from index 0 to i. 
The base case is when i == 0, in which case we only need to check if 'AB' or 'BA' is present at this position.
Implement tabulation by iterating over the string and filling up the dp table top-down. 
For each position i:
    Check if s[i] contains 'AB' or 'BA'
    If yes, set dp[i] to True
    Otherwise, set dp[i] to False
Let's define a function is_valid(s) that returns True if 'AB' and 'BA' are found in the string, and False otherwise.
The function is_valid can be implemented as follows:
    Iterate over the string from left to right
    For each position i:
        Check if s[i] contains 'AB'
        If yes, check if there's a remaining part of the string that also contains 'BA' and return True
        If not, continue checking for 'BA'
    If we reach the end of the string without finding 'AB' or 'BA', return False
===END PLAN===
