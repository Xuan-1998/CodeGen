===BEGIN PLAN===
Split the string into two halves and recursively solve for each half, combining the results
    * This approach can be inefficient as it involves repeated computations
    * Consider using dynamic programming instead
The base case would be when i equals 0, since there are no more characters to consider.
Determine the first occurrence of 'A' and 'B' in the string. Then check if there is an 'A' before every 'B' and vice versa.
    * This part seems correct, but it's not clearly stated how you would determine these occurrences
Use memoization by creating a dictionary to store the results of subproblems as you solve them
    * This can be useful for reducing computation time, especially if there are repeated patterns in the string

Updated plan:
