===BEGIN PLAN===
Consider dp[i][j] as the maximum sum of array from index i to j considering k-size subarrays and max value in each partition.
Use dynamic programming with 2D table dp[i][j] where:
    - dp[i][0] represents the maximum sum of the array from index 0 to i, considering k-size subarrays and max value in each partition.
    - For every 1 <= j <= k, calculate dp[i][j] as the maximum of:
        * The current element + dp[i-k][k-1]
        * The previous maximum value
    - Use bottom-up approach to fill up the table
===END PLAN===
