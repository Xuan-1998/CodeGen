===BEGIN PLAN===
Consider the maximum sum of the current subarray ending at index i as the state, and use memoization to store the maximum sum for each prefix. Then, dynamically calculate the maximum sum for each subarray by considering the maximum value of the previous subarray.

let state(i) be the maximum sum of arr[:i]. base case: state(0) = 0

Define a function f(i) that returns the maximum sum for arr[:i]. The transition relationship would be: f(i) = max(arr[i-k:i]) + f(i-k) if i >= k, otherwise f(i) = state(i)

Implement a hashmap memo where memo[i] is the maximum sum for subarray arr[:i].

===END PLAN===
