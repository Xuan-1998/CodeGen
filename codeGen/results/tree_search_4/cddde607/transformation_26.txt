===BEGIN PLAN===
Dynamic programming can also be used with tabulation approach where a 2D table dp[][] is filled from top-down manner with memoization to avoid overlapping sub-problems.

The state expression could be dp[i][j] = number of ways to reach cell (i, j) collecting exactly K coins.
dp[i][j] = dp[i-1][j] + dp[i][j-1] if arr[i][j] is included in the path and k >= arr[i][j], otherwise 0

The base case could be when i or j reaches N-1, set dp[i][j] to 1 if K equals 0, and 0 otherwise.

Fill the table from top-down with memoization.
===END PLAN===
