===BEGIN PLAN===
Consider teams that have won at least one game in each phase of the tournament, and use dynamic programming to find all such teams.

State expression: dp[i][j] = True if team j can win from the i-th phase onwards; otherwise False.

dp[i][j] = (s[i-1] == '1' or exists k < i where s[k] == '1' and dp[k][j])

Use dynamic programming with two nested loops to fill up the dp table. For each team j, check if it can win from phase i onwards. If yes, mark dp[i][j] as True; otherwise False.

Iterate over all teams (0-indexed) for each phase i from 1 to n.
For each team j in the current phase i:
    Check if there exists a k < i such that s[k] == '1' and dp[k][j]
    If yes, mark dp[i][j] as True; otherwise False

Finally, return all teams where dp[n-1][j] is True.
===END PLAN===
