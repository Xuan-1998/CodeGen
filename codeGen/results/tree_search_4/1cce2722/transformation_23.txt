===BEGIN PLAN===
dp[i] = max(dp[i-1], dp[i-2]) if i > 0 else 0;
Memoization can be used to store previously computed values and avoid redundant computation.
state = (i, dp[i]);
The state can represent the current position i in the sequence and the maximum number of points earned up to this point.
transition = max(dp[i-1], dp[i-2]) + a[i];
The transition relationship can capture the idea of deleting an element and all its neighbors, updating the maximum number of points accordingly.
dp[i] = max(dp[i-1], transition) if i > 0 else 0;
Use a hybrid approach combining both tabulation and memoization techniques to solve the problem efficiently.
for n in range(int(input())):
    a = list(map(int, input().split()));
    dp = [0 for _ in range(n+1)];
    dp[0] = a[0];
    for i in range(1, n):
        if a[i-1] == a[i]:
            dp[i] = max(dp[i-1], dp[i-2]) + 3;
        elif a[i-1] == a[i]-1 or a[i-1] == a[i]+1:
            dp[i] = max(dp[i-1], dp[i-2]) + 2;
        else:
            dp[i] = max(dp[i-1], dp[i-2]);
    print(max(dp));
===END PLAN===
