===BEGIN PLAN===
The bottom-up approach with tabulation can be used to build up solutions to the problem from smaller problems.

DP states: Let dp[i] represent the maximum number of points that can be earned by the i-th element in the sequence.
Let dp[i] = max(dp[j] + (i - j) for j such that 1 <= j < i and a_j == a_k] for k ranging from 0 to i-1, where a_k is the value at index k.

Use memoization to store and reuse intermediate results in a dictionary or map, and update the dp values accordingly.
dp[0] = 0

For each element in the sequence, calculate its corresponding dp value based on the previous calculated dp values. This can be done by iterating from i-1 to 0 (since we only consider elements with indices j < i) and updating the dp[i] as follows:
dp[i] = max(dp[i], dp[j] + (i - j)) for j such that a_j == a_k]

After calculating all dp values, return dp[n] as the maximum number of points that can be earned.

===END PLAN===
