===BEGIN PLAN===
Tabulate the dynamic programming table row by row, where each cell represents the longest subarray with only 1's up to that point.

Let dp[i] represent the length of the longest subarray containing only 1's in the first i elements of nums.

dp[i] = max(0, dp[j] + 1) if nums[j] == 1 and j - i > 1

    * For each element at index i, we consider two possibilities: 
      1. We delete the previous element (j - i > 1), in which case the maximum length of consecutive ones is the sum of the lengths of consecutive ones from the previous deleted element to the current element (dp[j]) + 1.
      2. We don't delete any elements, in which case the maximum length of consecutive ones is simply the previous length of consecutive ones.

    * If the current element is not a one (nums[j] != 1), then we can only consider deleting the previous element if there was no deletion before that (j - i > 1). In this case, the maximum length of consecutive ones is 0.

Let memo = {} to store the dynamic programming table values for memoization.

Return max(dp) if dp, else 0
===END PLAN===
