===BEGIN PLAN===
The problem can be broken down into smaller subproblems, where each subproblem has a distinct optimal solution.

Define the state expression as dp[i] = max(dp[i-1], nums[i] == 1) and the base case as dp[0] = 0. 

dp[i] = max(dp[i-1], nums[i] == 1) if nums[i] == 1, else dp[i-1]; 
Use a dynamic programming table to store the state of subproblems and their optimal solutions.

Initialize dp with all zeros. For each i from 1 to n:
    If nums[i-1] == 1, then update dp[i] = max(dp[i-1], 1). 
    Else, update dp[i] = dp[i-1]. 

The final answer is dp[n].
===END PLAN===
