===BEGIN PLAN===
Tabulate the dynamic programming table column by column, where each cell represents the longest subarray with only 1's up to that point.
Let dp[i] represent the length of the longest subarray containing only 1's in the first i elements of nums.
Consider dp[i] as the maximum number of consecutive 1s ending at index i, considering previous deletions and current array.
DP with iteration from left to right and maintaining the maximum seen so far
Let prev_ones = 0; // keep track of the consecutive 1's before i
for (int i = n - 1; i >= 0; i--) {
    if (nums[i] == 1) {
        prev_ones++;
    } else {
        dp[i] = Math.max(prev_ones, 0);
        prev_ones = 0;
    }
}
Return the maximum value in the DP table
===END PLAN===
