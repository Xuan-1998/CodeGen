===BEGIN PLAN===
The problem can be broken down into smaller subproblems, where each subproblem has a distinct optimal solution.

Define the state expression as dp[i], representing the maximum length of non-empty subarray containing only 1's ending at index i. The base case is dp[0] = 1 if nums[0] == 1, otherwise dp[0] = 0.

To update dp[i], consider two cases:
- If nums[i] == 1 and all elements in the previous subarray are also 1 (i.e., dp[i-1] > 0), then dp[i] = dp[i-1] + 1.
- Otherwise, dp[i] = 1 if nums[i] == 1, otherwise dp[i] = 0.

Use a bottom-up dynamic programming approach with a tabulation array dp to store the solution to each subproblem, where dp[i] represents the maximum length of non-empty subarray containing only 1's ending at index i.

After processing all elements in nums, return max(dp) as the result, which corresponds to the maximum length of non-empty subarray containing only 1's.

===END PLAN===
