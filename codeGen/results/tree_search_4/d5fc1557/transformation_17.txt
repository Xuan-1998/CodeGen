===BEGIN PLAN===
The problem can be broken down into smaller subproblems, where each subproblem has a distinct optimal solution.

Define the state expression as dp[i], where dp[i-1] is the previous longest subarray and dp[i] is the maximum length of subarray containing only 1's ending at index i, and the base case as dp[0] = 0.

Let dp[i][j] be the maximum length of subarray containing only 1's with an extra '1' at position j; then dp[i] = max(dp[i-1][k] + 1 for k in range(n)) if any such '1' exists, and dp[i] = dp[i-1] if there is no '1'.

The updated plan takes into account the edge cases where there are no ones in the array.

dp[i] = max((sum(nums[:i]))//2 + 1 if any('1' in nums[:i]), sum([dp[i-1][k] + 1 for k in range(i) if nums[k] == 1]) else dp[i-1])
===END PLAN===
