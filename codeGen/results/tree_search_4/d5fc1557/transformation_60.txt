===BEGIN PLAN===
Tabulate the dynamic programming table row by row, where each cell represents the longest subarray with only 1's up to that point.

Let dp[i] represent the length of the longest subarray containing only 1's in the first i elements of nums.

Consider dp[i] as the maximum number of consecutive 1s ending at index i, considering previous deletions and current array. 

For each row dp[i], iterate from left to right:

* If the current element is 0, set dp[i] to the value of dp[i-1]
* If the current element is 1, update dp[i] to be the maximum of its current value and 1 plus the value of dp[i-1] if the previous element was also 1

Use a dictionary-based memoization approach to store previously computed values.

Initialize a variable max_length to be 0, which will store the length of the longest subarray containing only 1's.

Iterate over each index i in nums:

* Update max_length to be the maximum of its current value and dp[i]

Finally, return max_length - 1 (since we deleted one element)

===END PLAN===
