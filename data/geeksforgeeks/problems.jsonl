{"statement": "Task: Given an array arr[] of n integers representing the lengths of n boards, and k painters, where each painter takes 1 unit time to paint 1 unit of the board, the task is to find the minimum time required to paint all the boards using k painters. Each painter can only paint continuous boards, and the goal is to minimize the time taken to paint all the boards.\n\nInput: The input consists of three integers: n, k, and an array arr[] of n integers representing the lengths of the boards. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum time required to paint all the boards using k painters.\n\nConstraints: 1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^5, and 1 \u2264 arr[i] \u2264 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Divide and conquer', 'Complete search']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/the-painters-partition-problem1535/1", "sample_test_cases": [{"input": "n = 5\nk = 3\narr[] = {5,10,30,20,15}", "output": "35"}, {"input": "n = 4\nk = 2\narr[] = {10,20,30,40}", "output": "60"}]}
{"statement": "Task: Given a set of integers, find all distinct sums that can be generated from the subsets of the given sets.\n\nInput: The input is a set of integers, which arrives from standard input. The first line of input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of integers in the set. The second line contains N integers, the elements of the set.\n\nOutput: The output should consist of T lines. Each line should contain a list of integers, which are the distinct sums that can be generated from the subsets of the corresponding set, in increasing order.\n\nConstraints: Each test case has at most 100 integers, and each integer is between 1 and 100. The sum of N over all test cases is at most 100.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/find-all-distinct-subset-or-subsequence-sums4424/1", "sample_test_cases": [{"input": "nums = {1,2}", "output": "{0,1,2,3}"}, {"input": "nums = {1,2,3}", "output": "{0,1,2,3,4,5,6}"}]}
{"statement": "Task: Given a garden with n flowers lined up in a row, where the height of the ith flower is a_{i} units, water the flowers for k days. In one day, w continuous flowers can be watered (only once in a day). Whenever a flower is watered, its height increases by 1 unit. Maximize the height of the smallest flower all the time.\n\nInput: The input consists of four parameters: an integer n representing the number of flowers, an integer k representing the number of days to water the flowers, an integer w representing the number of flowers that can be watered in a single day, and an array a[] of n integers representing the heights of the flowers. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the maximum possible height of the smallest flower after all the watering is done.\n\nConstraints: 1 \u2264 n \u2264 10^5, 1 \u2264 w \u2264 n, 1 \u2264 k \u2264 10^5, and 1 \u2264 a[i] \u2264 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/899540d741547e2d75d1c5c03a4161ab53affd13/1", "sample_test_cases": [{"input": "n=6\r\nk=2\r\nw=3\r\na[]={2,2,2,2,1,1}", "output": "2"}, {"input": "n=2\r\nk=5\r\nw=1\r\na[]={5,8}", "output": "9"}]}
{"statement": "Task: Given two strings str1 and str2 of length N and M respectively, find the maximum number of non-intersecting bridges that can be built between the banks of a river in the Forbidden Forest. A bridge can only be built between two similar trees in the forest.\n\nInput: The input consists of two strings, str1 and str2, each of length N and M respectively, received from standard input. Each string consists of characters belonging to one of the three categories represented by * or # or @.\n\nOutput: The output should be a single integer, representing the maximum number of non-intersecting bridges that can be built between the banks of the river.\n\nConstraints: 1 \u2264 N, M \u2264 100.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/a4f19ea532cee502aabec77c07e0d0a45b76ecf9/1", "sample_test_cases": [{"input": "str1 = \"*@#*\" \r\nstr2 = \"*#\"", "output": "2"}, {"input": "str1 = \"***\"\r\nstr2 = \"##\"", "output": "0"}]}
{"statement": "Task: Given a string S consisting of lowercase alphabets, find the length of the longest substring of S that can be rearranged to form a palindrome.\n\nInput: The input consists of a single string S, which only contains lowercase alphabets. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the length of the longest substring of S that can be rearranged to form a palindrome.\n\nConstraints: The length of the input string S is at most 10^5.\n\nExplanation: A palindrome is a string that reads the same backward as forward. To check if a given substring of S can be rearranged to form a palindrome, we need to check if each character in the substring appears an even number of times, except for at most one character which can appear an odd number of times. If this condition is satisfied, then the substring can be rearranged to form a palindrome. We need to find the longest substring that satisfies this condition.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-substring-whose-character-rearranged-can-form-a-palindrome/1", "sample_test_cases": [{"input": "S = \"aabe\"", "output": "3"}, {"input": "S = \"adbabd\"", "output": "6"}]}
{"statement": "Task: Given two strings S and T, find the length of the shortest subsequence in S which is not a subsequence in T. If no such subsequence is possible, return -1. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. A string of length n has  different possible subsequences.\n\nInput: The input consists of two strings S and T, each of length at most 500. The input is taken from standard input.\n\nOutput: The output is a single integer representing the length of the shortest subsequence in S which is not a subsequence in T. If no such subsequence is possible, return -1.\n\nConstraints: The length of strings S and T is between 1 and 500.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/shortest-uncommon-subsequence5746/1", "sample_test_cases": [{"input": "S = \"babab\"\r\nT = \"babba\"", "output": "3"}, {"input": "S = \"babhi\"\r\nT = \"babij\"", "output": "1"}]}
{"statement": "Task: Given an N x N matrix where each cell contains a non-negative integer representing the number of coins, find the number of paths from the top left corner to the bottom right corner that collect exactly K coins, where each path can only move down or right.\n\nInput: The input consists of three integers: K, N, and an N x N matrix of non-negative integers. The input is provided through standard input.\n\nOutput: The output is a single integer representing the number of possible paths that collect exactly K coins.\n\nConstraints: The input integers satisfy 1 <= K < 100, 1 <= N < 100, and 1 <= arr_{ij} <= 200.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures', 'Complete search']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/number-of-paths-in-a-matrix-with-k-coins2728/1", "sample_test_cases": [{"input": "K = 12, N = 3\r\narr[] = [[1, 2, 3], \r\n         [4, 6, 5], \r\n         [3, 2, 1]]", "output": "2"}, {"input": "K = 16, N = 3\r\narr[] = [[1, 2, 3], \r\n         [4, 6, 5], \r\n         [9, 8, 7]]", "output": "0"}]}
{"statement": "Task: Given a set of m distinct positive integers and a value N, count the total number of ways we can form N by adding the array elements. Repetitions and different arrangements are allowed. Output the answer modulo 10^9+7.\n\nInput: The input consists of three integers: m, N, and an array of m distinct positive integers. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the total number of ways to form N by adding the elements of the array.\n\nConstraints: 1 <= N, m <= 10^3.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/ways-to-sum-to-n5759/1", "sample_test_cases": [{"input": "m = 3 , N = 7\nArr[] = {1,5,6}", "output": "6"}, {"input": "m = 3 , N = 3\nArr[] = {1,2,3}", "output": "4"}]}
{"statement": "Task: Given a set of n non-negative integers and an integer m, determine if there exists a non-empty subset of the given set whose sum is divisible by m.\n\nInput: The input is taken from standard input and consists of three integers: n, m, and the set of n non-negative integers.\n\nOutput: The output should be a single integer, either 1 if there exists a non-empty subset whose sum is divisible by m, or 0 if no such subset exists.\n\nConstraints: The number of elements in the set and the integer m are both between 1 and 1000, and the elements in the set are non-negative integers.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/subset-with-sum-divisible-by-m2546/1", "sample_test_cases": [{"input": "n = 4 m = 6 \nnums[] = {3 1 7 5}", "output": "1"}, {"input": "n = 3, m = 5\nnums[] = {1 2 6}", "output": "0"}]}
