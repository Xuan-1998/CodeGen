{"statement": "Task: Given a set of K+1 players, you need to find the number of ways to pass the ball exactly N times so that a particular player (let's call this player 'P') receives the ball last. It's important to note that player 'P' can receive the ball multiple times during the N passes.\n\nInput: The first line of input contains an integer T, representing the number of test cases. Each of the following T lines contains two space-separated integers N and K. Input is read from standard input.\n\nOutput: For each test case, output a single integer, the number of ways the final pass can be made to player 'P', modulo 1000000007 (10^9+7).\n\nConstraints: The number of test cases T is an integer such that 1 \u2264 T \u2264 100. The number of passes N is an integer such that 2 \u2264 N \u2264 1000. The number of players K is an integer such that 1 \u2264 K \u2264 10.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/FCBARCA", "sample_test_cases": [{"input": ["2", "2 4", "4 2"], "output": ["4", "6"]}, {"input": "2\n3 4\n4 2", "output": "12\n6\n"}, {"input": "2\n3 4\n4 3", "output": "12\n21\n"}, {"input": "2\n3 1\n4 2", "output": "0\n6\n"}, {"input": "2\n3 1\n4 3", "output": "0\n21\n"}, {"input": "2\n6 1\n4 3", "output": "1\n21\n"}, {"input": "2\n6 2\n4 3", "output": "22\n21\n"}, {"input": "2\n6 2\n4 1", "output": "22\n1\n"}, {"input": "2\n5 2\n4 1", "output": "10\n1\n"}, {"input": "2\n5 2\n4 2", "output": "10\n6\n"}, {"input": "2\n3 2\n4 2", "output": "2\n6\n"}, {"input": "2\n3 4\n4 1", "output": "12\n1\n"}, {"input": "2\n3 1\n4 5", "output": "0\n105\n"}, {"input": "2\n3 1\n5 3", "output": "0\n60\n"}, {"input": "2\n3 1\n8 3", "output": "0\n1641\n"}, {"input": "2\n5 4\n4 1", "output": "204\n1\n"}, {"input": "2\n5 2\n4 3", "output": "10\n21\n"}, {"input": "2\n3 2\n4 3", "output": "2\n21\n"}, {"input": "2\n3 3\n4 1", "output": "6\n1\n"}, {"input": "2\n2 1\n4 5", "output": "1\n105\n"}, {"input": "2\n3 0\n4 4", "output": "0\n52\n"}, {"input": "2\n3 1\n5 1", "output": "0\n0\n"}, {"input": "2\n10 2\n8 1", "output": "342\n1\n"}, {"input": "2\n5 4\n4 2", "output": "204\n6\n"}, {"input": "2\n5 2\n2 3", "output": "10\n3\n"}, {"input": "2\n2 2\n4 5", "output": "2\n105\n"}, {"input": "2\n3 2\n5 1", "output": "2\n0\n"}, {"input": "2\n10 3\n8 1", "output": "14763\n1\n"}, {"input": "2\n2 1\n4 4", "output": "1\n52\n"}, {"input": "2\n16 3\n8 1", "output": "10761681\n1\n"}, {"input": "2\n2 1\n8 4", "output": "1\n13108\n"}, {"input": "2\n28 3\n8 1", "output": "198073708\n1\n"}, {"input": "2\n28 3\n8 0", "output": "198073708\n0\n"}, {"input": "2\n4 0\n8 4", "output": "0\n13108\n"}, {"input": "2\n4 0\n8 6", "output": "0\n239946\n"}, {"input": "2\n1 0\n5 6", "output": "0\n1110\n"}, {"input": "2\n6 2\n4 2", "output": "22\n6\n"}, {"input": "2\n4 4\n4 3", "output": "52\n21\n"}, {"input": "2\n3 0\n5 2", "output": "0\n10\n"}, {"input": "2\n3 1\n4 1", "output": "0\n1\n"}, {"input": "2\n6 2\n6 3", "output": "22\n183\n"}, {"input": "2\n7 2\n4 1", "output": "42\n1\n"}, {"input": "2\n5 4\n2 2", "output": "204\n2\n"}, {"input": "2\n3 3\n4 2", "output": "6\n6\n"}, {"input": "2\n4 1\n5 3", "output": "1\n60\n"}, {"input": "2\n3 1\n2 3", "output": "0\n3\n"}, {"input": "2\n6 0\n4 6", "output": "0\n186\n"}, {"input": "2\n6 2\n5 1", "output": "22\n0\n"}, {"input": "2\n7 4\n4 1", "output": "3276\n1\n"}, {"input": "2\n5 2\n4 5", "output": "10\n105\n"}, {"input": "2\n2 1\n4 0", "output": "1\n0\n"}, {"input": "2\n6 2\n8 2", "output": "22\n86\n"}, {"input": "2\n5 3\n4 2", "output": "60\n6\n"}, {"input": "2\n5 4\n2 3", "output": "204\n3\n"}, {"input": "2\n2 3\n4 5", "output": "3\n105\n"}, {"input": "2\n3 2\n2 1", "output": "2\n1\n"}, {"input": "2\n10 3\n3 1", "output": "14763\n0\n"}, {"input": "2\n5 2\n2 11", "output": "10\n11\n"}, {"input": "2\n2 2\n8 3", "output": "2\n1641\n"}, {"input": "2\n2 1\n5 4", "output": "1\n204\n"}, {"input": "2\n16 3\n8 2", "output": "10761681\n86\n"}, {"input": "2\n2 2\n8 4", "output": "2\n13108\n"}, {"input": "2\n28 3\n8 2", "output": "198073708\n86\n"}, {"input": "2\n4 1\n11 4", "output": "1\n838860\n"}, {"input": "2\n31 3\n8 1", "output": "347990060\n1\n"}, {"input": "2\n28 4\n3 0", "output": "706704962\n0\n"}, {"input": "2\n4 0\n8 8", "output": "0\n1864136\n"}, {"input": "2\n1 0\n16 6", "output": "0\n15698245\n"}, {"input": "2\n6 1\n4 2", "output": "1\n6\n"}, {"input": "2\n6 2\n6 5", "output": "22\n2605\n"}, {"input": "2\n13 2\n4 1", "output": "2730\n1\n"}, {"input": "2\n3 4\n2 2", "output": "12\n2\n"}, {"input": "2\n3 3\n5 2", "output": "6\n10\n"}, {"input": "2\n6 2\n4 4", "output": "22\n52\n"}, {"input": "2\n6 2\n5 2", "output": "22\n10\n"}, {"input": "2\n10 4\n4 1", "output": "209716\n1\n"}, {"input": "2\n5 3\n4 5", "output": "60\n105\n"}, {"input": "2\n4 3\n6 1", "output": "21\n1\n"}, {"input": "2\n6 1\n10 1", "output": "1\n1\n"}, {"input": "2\n6 2\n8 4", "output": "22\n13108\n"}, {"input": "2\n5 3\n8 2", "output": "60\n86\n"}, {"input": "2\n5 4\n2 4", "output": "204\n4\n"}, {"input": "2\n2 3\n5 5", "output": "3\n520\n"}, {"input": "2\n10 3\n3 2", "output": "14763\n2\n"}, {"input": "2\n9 2\n2 11", "output": "170\n11\n"}, {"input": "2\n16 3\n7 2", "output": "10761681\n42\n"}, {"input": "2\n2 3\n8 4", "output": "3\n13108\n"}, {"input": "2\n28 0\n8 2", "output": "0\n86\n"}, {"input": "2\n4 2\n11 4", "output": "6\n838860\n"}, {"input": "2\n35 3\n8 1", "output": "187194724\n1\n"}, {"input": "2\n51 4\n3 0", "output": "181097023\n0\n"}, {"input": "2\n4 0\n8 15", "output": "0\n160180665\n"}, {"input": "2\n1 0\n11 6", "output": "0\n51828150\n"}, {"input": "2\n5 2\n6 5", "output": "10\n2605\n"}, {"input": "2\n13 2\n3 1", "output": "2730\n0\n"}, {"input": "2\n2 4\n4 1", "output": "4\n1\n"}, {"input": "2\n3 4\n2 4", "output": "12\n4\n"}, {"input": "2\n6 3\n5 2", "output": "183\n10\n"}, {"input": "2\n9 2\n4 4", "output": "170\n52\n"}, {"input": "2\n6 0\n8 10", "output": "0\n9090910\n"}, {"input": "2\n6 2\n3 4", "output": "22\n12\n"}, {"input": "2\n2 4\n4 2", "output": "4\n6\n"}]}
{"statement": "Task: Given an initial sequence of n integers and a final sequence of k integers, determine if there exists a sequence of operations that transforms the initial sequence into the final sequence. An operation consists of selecting an integer from the sequence that is strictly greater than an adjacent integer, removing the smaller integer, and adding its value to the larger integer. If such a sequence of operations exists, provide one possible sequence.\n\nInput: The first line of the input contains a single integer n (1 \u2264 n \u2264 500), the length of the initial sequence. The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^6), the elements of the initial sequence. The third line contains a single integer k (1 \u2264 k \u2264 n), the length of the final sequence. The fourth line contains k integers b_1, b_2, ..., b_{k} (1 \u2264 b_{j} \u2264 5\u00b710^8), the elements of the final sequence.\n\nOutput: If no sequence of operations can transform the initial sequence into the final sequence, print \"NO\" (without quotes) in a single line. Otherwise, print \"YES\" (without quotes) in the first line, followed by n - k lines describing the operations. Each line should contain an integer x representing the position of the integer in the current sequence that performs the operation, followed by a space, and then 'L' if the operation involves the integer to the left of x or 'R' if it involves the integer to the right of x.\n\nConstraints: n is the length of the initial sequence. The initial sequence consists of integers a_i (1 \u2264 a_{i} \u2264 10^6). k is the length of the final sequence. The final sequence consists of integers b_j (1 \u2264 b_{j} \u2264 5\u00b710^8). Sequences are ordered from left to right.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Amortized analysis', 'Constructive algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/733/C", "sample_test_cases": [{"input": "6\n1 2 2 2 1 2\n2\n5 5\n", "output": "YES\n2 L\n1 R\n4 L\n3 L\n"}, {"input": "5\n1 2 3 4 5\n1\n15\n", "output": "YES\n5 L\n4 L\n3 L\n2 L\n"}, {"input": "5\n1 1 1 3 3\n3\n2 1 6\n", "output": "NO"}, {"input": "5\n1 1 1 1 2\n3\n1 1 4\n", "output": "YES\n5 L\n4 L\n"}, {"input": "5\n1 1 1 1 1\n4\n1 1 2 1\n", "output": "NO"}, {"input": "6\n2 1 2 2 1 2\n2\n5 5\n", "output": "YES\n3 L\n2 L\n4 L\n3 L\n"}, {"input": "8\n2 5 3 1 4 2 3 4\n3\n10 6 8\n", "output": "NO"}, {"input": "1\n959139\n1\n470888\n", "output": "NO"}, {"input": "3\n2 2 1\n1\n5\n", "output": "YES\n2 R\n2 L\n"}, {"input": "3\n1 2 2\n1\n5\n", "output": "YES\n2 L\n1 R\n"}, {"input": "5\n1 2 3 4 5\n1\n10\n", "output": "NO"}, {"input": "5\n325539 329221 106895 882089 718673\n5\n699009 489855 430685 939232 282330\n", "output": "NO"}, {"input": "10\n30518 196518 274071 359971 550121 204862 843967 173607 619138 690754\n3\n171337 183499 549873\n", "output": "NO"}, {"input": "3\n2 1 1\n1\n3\n", "output": "NO"}, {"input": "4\n2 2 2 1\n3\n2 2 2\n", "output": "NO"}, {"input": "3\n1 2 3\n1\n3\n", "output": "NO"}, {"input": "2\n1 2\n2\n3 1\n", "output": "NO"}, {"input": "5\n3 3 2 2 1\n2\n8 3\n", "output": "YES\n2 R\n2 L\n2 R\n"}, {"input": "3\n3 2 5\n1\n10\n", "output": "YES\n3 L\n2 L\n"}, {"input": "3\n1 5 1\n1\n6\n", "output": "NO"}, {"input": "5\n1 2 3 4 5\n3\n1 2 3\n", "output": "NO"}, {"input": "3\n5 2 3\n1\n10\n", "output": "YES\n1 R\n1 R\n"}, {"input": "3\n2 1 3\n1\n6\n", "output": "YES\n3 L\n2 L\n"}, {"input": "3\n3 2 1\n1\n6\n", "output": "YES\n1 R\n1 R\n"}, {"input": "2\n5 5\n1\n5\n", "output": "NO"}, {"input": "3\n1 2 3\n2\n1 2\n", "output": "NO"}, {"input": "4\n1 2 3 4\n3\n1 2 3\n", "output": "NO"}, {"input": "4\n4 3 2 1\n3\n3 2 1\n", "output": "NO"}, {"input": "2\n5 3\n1\n5\n", "output": "NO"}, {"input": "5\n1 1 1 1 1\n4\n1 1 1 1\n", "output": "NO"}, {"input": "3\n3 3 2\n1\n8\n", "output": "YES\n2 R\n2 L\n"}, {"input": "8\n2 2 1 2 2 1 2 4\n2\n9 8\n", "output": "NO"}, {"input": "4\n3 2 1 4\n3\n3 2 1\n", "output": "NO"}, {"input": "5\n3 3 2 3 1\n2\n11 1\n", "output": "YES\n4 L\n3 L\n2 L\n"}, {"input": "3\n2 1 3\n1\n3\n", "output": "NO"}, {"input": "4\n2 3 3 2\n2\n5 3\n", "output": "NO"}, {"input": "16\n2 2 2 1 2 2 2 1 1 2 2 2 1 2 2 2\n4\n7 7 7 7\n", "output": "YES\n3 R\n3 L\n2 L\n4 R\n4 L\n3 L\n4 L\n3 R\n3 R\n5 L\n4 R\n4 R\n"}, {"input": "2\n1 1\n1\n1\n", "output": "NO"}, {"input": "3\n1 2 1\n2\n3 2\n", "output": "NO"}, {"input": "3\n2 3 5\n1\n10\n", "output": "YES\n3 L\n2 L\n"}, {"input": "5\n1 2 3 4 5\n2\n3 7\n", "output": "NO"}, {"input": "4\n1 2 3 4\n2\n1 2\n", "output": "NO"}, {"input": "8\n1 2 2 2 1 2 1 1\n2\n5 5\n", "output": "NO"}, {"input": "3\n5 5 4\n1\n14\n", "output": "YES\n2 R\n2 L\n"}, {"input": "22\n3 2 3 3 3 1 1 2 1 2 1 1 1 2 2 3 1 2 3 3 3 3\n5\n5 16 5 5 15\n", "output": "YES\n1 R\n4 R\n4 R\n4 R\n4 R\n4 R\n4 L\n3 L\n6 L\n5 L\n4 L\n5 L\n7 L\n6 L\n5 R\n5 R\n5 R\n"}, {"input": "4\n2 2 1 2\n1\n7\n", "output": "YES\n4 L\n3 L\n2 L\n"}, {"input": "7\n2 2 2 1 2 2 2\n1\n13\n", "output": "YES\n5 L\n4 L\n3 L\n2 L\n1 R\n1 R\n"}, {"input": "2\n1 2\n1\n1\n", "output": "NO"}, {"input": "14\n5 5 5 5 4 4 4 3 3 3 4 4 4 4\n3\n32 21 4\n", "output": "YES\n4 R\n4 R\n4 R\n4 L\n3 L\n2 L\n5 L\n4 L\n3 L\n2 R\n2 R\n"}, {"input": "5\n2 2 1 2 2\n1\n9\n", "output": "YES\n4 L\n3 L\n2 L\n1 R\n"}, {"input": "1\n2\n1\n2\n", "output": "YES\n"}, {"input": "3\n2 1 3\n1\n6\n", "output": "YES\n3 L\n2 L\n"}, {"input": "3\n3 2 1\n1\n6\n", "output": "YES\n1 R\n1 R\n"}, {"input": "3\n1 2 2\n1\n5\n", "output": "YES\n2 L\n1 R\n"}, {"input": "2\n1 1\n1\n1\n", "output": "NO\n"}, {"input": "5\n1 2 3 4 5\n3\n1 2 3\n", "output": "NO\n"}, {"input": "5\n3 3 2 2 1\n2\n8 3\n", "output": "YES\n2 R\n2 L\n2 R\n"}, {"input": "3\n3 2 5\n1\n10\n", "output": "YES\n3 L\n2 L\n"}, {"input": "6\n2 1 2 2 1 2\n2\n5 5\n", "output": "YES\n1 R\n1 R\n2 R\n2 R\n"}, {"input": "2\n5 5\n1\n5\n", "output": "NO\n"}, {"input": "14\n5 5 5 5 4 4 4 3 3 3 4 4 4 4\n3\n32 21 4\n", "output": "YES\n4 R\n4 R\n4 R\n4 L\n3 L\n2 L\n5 L\n4 L\n3 L\n2 R\n2 R\n"}, {"input": "4\n2 2 1 2\n1\n7\n", "output": "YES\n2 R\n2 R\n2 L\n"}, {"input": "8\n2 5 3 1 4 2 3 4\n3\n10 6 8\n", "output": "NO\n"}, {"input": "3\n2 1 3\n1\n3\n", "output": "NO\n"}, {"input": "5\n1 2 3 4 5\n1\n10\n", "output": "NO\n"}, {"input": "22\n3 2 3 3 3 1 1 2 1 2 1 1 1 2 2 3 1 2 3 3 3 3\n5\n5 16 5 5 15\n", "output": "YES\n1 R\n4 R\n4 R\n4 R\n4 R\n4 R\n4 L\n3 L\n6 L\n5 L\n4 L\n5 L\n7 L\n6 L\n5 R\n5 R\n5 R\n"}, {"input": "3\n1 5 1\n1\n6\n", "output": "NO\n"}, {"input": "2\n1 2\n1\n1\n", "output": "NO\n"}, {"input": "5\n3 3 2 3 1\n2\n11 1\n", "output": "YES\n2 R\n2 R\n2 L\n"}, {"input": "2\n5 3\n1\n5\n", "output": "NO\n"}, {"input": "7\n2 2 2 1 2 2 2\n1\n13\n", "output": "YES\n3 R\n3 R\n3 R\n3 R\n3 L\n2 L\n"}, {"input": "4\n3 2 1 4\n3\n3 2 1\n", "output": "NO\n"}, {"input": "23\n3 2 1 3 3 3 1 1 2 1 2 1 1 1 2 2 3 1 2 3 3 3 3\n5\n6 16 5 5 15\n", "output": "YES\n1 R\n1 R\n4 R\n4 R\n4 R\n4 R\n4 R\n4 L\n3 L\n6 L\n5 L\n4 L\n5 L\n7 L\n6 L\n5 R\n5 R\n5 R\n"}, {"input": "1\n959139\n1\n470888\n", "output": "NO\n"}, {"input": "3\n5 5 4\n1\n14\n", "output": "YES\n2 R\n2 L\n"}, {"input": "4\n1 2 3 4\n2\n1 2\n", "output": "NO\n"}, {"input": "10\n30518 196518 274071 359971 550121 204862 843967 173607 619138 690754\n3\n171337 183499 549873\n", "output": "NO\n"}, {"input": "3\n5 2 3\n1\n10\n", "output": "YES\n1 R\n1 R\n"}, {"input": "3\n1 2 3\n2\n1 2\n", "output": "NO\n"}, {"input": "5\n325539 329221 106895 882089 718673\n5\n699009 489855 430685 939232 282330\n", "output": "NO\n"}, {"input": "3\n2 1 1\n1\n3\n", "output": "NO\n"}, {"input": "3\n2 3 5\n1\n10\n", "output": "YES\n3 L\n2 L\n"}, {"input": "4\n2 2 2 1\n3\n2 2 2\n", "output": "NO\n"}, {"input": "4\n4 3 2 1\n3\n3 2 1\n", "output": "NO\n"}, {"input": "8\n2 2 1 2 2 1 2 4\n2\n9 8\n", "output": "NO\n"}, {"input": "5\n1 1 1 1 1\n4\n1 1 1 1\n", "output": "NO\n"}, {"input": "8\n1 2 2 2 1 2 1 1\n2\n5 5\n", "output": "NO\n"}, {"input": "5\n2 2 1 2 2\n1\n9\n", "output": "YES\n2 R\n2 R\n2 R\n2 L\n"}, {"input": "16\n2 2 2 1 2 2 2 1 1 2 2 2 1 2 2 2\n4\n7 7 7 7\n", "output": "YES\n3 R\n3 L\n2 L\n4 R\n4 L\n3 L\n4 L\n3 R\n3 R\n5 L\n4 R\n4 R\n"}, {"input": "3\n1 2 3\n1\n3\n", "output": "NO\n"}, {"input": "3\n2 2 1\n1\n5\n", "output": "YES\n2 R\n2 L\n"}, {"input": "5\n1 2 3 4 5\n2\n3 7\n", "output": "NO\n"}, {"input": "5\n1 1 1 1 2\n3\n1 1 4\n", "output": "YES\n5 L\n4 L\n"}, {"input": "5\n1 1 1 1 1\n4\n1 1 2 1\n", "output": "NO\n"}, {"input": "3\n1 2 1\n2\n3 2\n", "output": "NO\n"}, {"input": "1\n2\n1\n2\n", "output": "YES\n"}, {"input": "4\n2 3 3 2\n2\n5 3\n", "output": "NO\n"}, {"input": "3\n3 3 2\n1\n8\n", "output": "YES\n2 R\n2 L\n"}, {"input": "4\n1 2 3 4\n3\n1 2 3\n", "output": "NO\n"}, {"input": "2\n1 2\n2\n3 1\n", "output": "NO\n"}, {"input": "3\n4 1 3\n1\n6\n", "output": "NO\n"}, {"input": "23\n3 2 1 3 3 3 1 1 2 1 2 1 1 1 2 2 3 1 2 2 3 3 4\n5\n6 16 5 5 15\n", "output": "YES\n1 R\n1 R\n4 R\n4 R\n4 R\n4 R\n4 R\n4 L\n3 L\n6 L\n5 L\n4 L\n5 L\n10 L\n9 L\n8 L\n7 L\n6 L\n"}, {"input": "3\n1 1 4\n1\n6\n", "output": "YES\n3 L\n2 L\n"}, {"input": "2\n1 1\n1\n2\n", "output": "NO\n"}, {"input": "5\n1 2 3 7 5\n3\n1 2 3\n", "output": "NO\n"}, {"input": "5\n4 3 2 2 1\n2\n8 3\n", "output": "NO\n"}, {"input": "6\n2 1 2 1 1 2\n2\n5 5\n", "output": "NO\n"}, {"input": "2\n5 5\n1\n9\n", "output": "NO\n"}, {"input": "14\n5 5 5 5 6 4 4 3 3 3 4 4 4 4\n3\n32 21 4\n", "output": "NO\n"}, {"input": "8\n2 5 3 1 4 2 3 4\n3\n1 6 8\n", "output": "NO\n"}, {"input": "3\n2 1 3\n1\n4\n", "output": "NO\n"}, {"input": "5\n1 2 3 4 5\n1\n12\n", "output": "NO\n"}, {"input": "22\n3 2 3 2 3 1 1 2 1 2 1 1 1 2 2 3 1 2 3 3 3 3\n5\n5 16 5 5 15\n", "output": "NO\n"}, {"input": "2\n0 2\n1\n1\n", "output": "NO\n"}, {"input": "7\n2 2 2 1 2 3 2\n1\n13\n", "output": "NO\n"}, {"input": "4\n3 0 1 4\n3\n3 2 1\n", "output": "NO\n"}, {"input": "23\n3 2 1 3 3 3 1 1 2 1 2 1 1 1 2 2 3 1 2 2 3 3 3\n5\n6 16 5 5 15\n", "output": "NO\n"}, {"input": "1\n959139\n1\n340586\n", "output": "NO\n"}, {"input": "3\n5 5 4\n1\n2\n", "output": "NO\n"}, {"input": "4\n1 2 3 4\n2\n1 4\n", "output": "NO\n"}, {"input": "10\n30518 196518 274071 359971 550121 356330 843967 173607 619138 690754\n3\n171337 183499 549873\n", "output": "NO\n"}, {"input": "3\n10 2 3\n1\n10\n", "output": "NO\n"}, {"input": "3\n1 0 3\n2\n1 2\n", "output": "NO\n"}, {"input": "5\n325539 329221 106895 882089 718673\n8\n699009 489855 430685 939232 282330\n", "output": "NO\n"}, {"input": "3\n2 2 1\n1\n3\n", "output": "NO\n"}, {"input": "3\n2 3 5\n1\n4\n", "output": "NO\n"}, {"input": "4\n2 2 4 1\n3\n2 2 2\n", "output": "NO\n"}, {"input": "4\n4 2 2 1\n3\n3 2 1\n", "output": "NO\n"}, {"input": "5\n1 1 1 2 1\n4\n1 1 2 1\n", "output": "NO\n"}, {"input": "8\n1 1 2 2 1 2 1 1\n2\n5 5\n", "output": "NO\n"}, {"input": "16\n2 2 2 1 2 2 2 1 1 2 2 2 1 2 2 4\n4\n7 7 7 7\n", "output": "NO\n"}, {"input": "5\n1 2 3 4 5\n2\n3 5\n", "output": "NO\n"}, {"input": "5\n1 0 1 1 2\n3\n1 1 4\n", "output": "NO\n"}, {"input": "4\n2 3 3 1\n2\n5 3\n", "output": "NO\n"}, {"input": "4\n0 2 3 4\n3\n1 2 3\n", "output": "NO\n"}, {"input": "5\n1 0 1 3 3\n3\n2 1 6\n", "output": "NO\n"}, {"input": "6\n2 2 2 2 1 2\n2\n5 5\n", "output": "NO\n"}, {"input": "5\n1 2 6 4 5\n1\n15\n", "output": "NO\n"}, {"input": "3\n4 1 4\n1\n6\n", "output": "NO\n"}, {"input": "5\n1 2 3 14 5\n3\n1 2 3\n", "output": "NO\n"}, {"input": "5\n4 3 2 2 1\n2\n8 2\n", "output": "NO\n"}, {"input": "6\n2 1 2 1 1 2\n2\n3 5\n", "output": "NO\n"}, {"input": "2\n5 5\n1\n10\n", "output": "NO\n"}, {"input": "14\n5 5 5 5 6 4 4 3 3 3 4 4 4 4\n3\n32 12 4\n", "output": "NO\n"}, {"input": "3\n1 1 3\n1\n4\n", "output": "NO\n"}, {"input": "5\n1 3 3 4 5\n1\n12\n", "output": "NO\n"}, {"input": "22\n3 2 3 2 3 1 1 2 1 2 1 1 1 2 2 3 1 2 3 3 3 3\n5\n5 19 5 5 15\n", "output": "NO\n"}, {"input": "4\n6 0 1 4\n3\n3 2 1\n", "output": "NO\n"}, {"input": "1\n959139\n2\n340586\n", "output": "NO\n"}, {"input": "3\n10 5 4\n1\n2\n", "output": "NO\n"}, {"input": "4\n1 2 3 4\n2\n2 4\n", "output": "NO\n"}, {"input": "10\n30518 196518 274071 359971 550121 356330 843967 141362 619138 690754\n3\n171337 183499 549873\n", "output": "NO\n"}, {"input": "3\n10 2 3\n1\n11\n", "output": "NO\n"}, {"input": "5\n325539 329221 106895 882089 718673\n8\n699009 489855 430685 939232 326402\n", "output": "NO\n"}, {"input": "3\n2 2 1\n1\n4\n", "output": "NO\n"}, {"input": "3\n3 3 5\n1\n4\n", "output": "NO\n"}, {"input": "4\n2 2 4 2\n3\n2 2 2\n", "output": "NO\n"}, {"input": "4\n4 4 2 1\n3\n3 2 1\n", "output": "NO\n"}, {"input": "5\n1 1 1 2 0\n4\n1 1 2 1\n", "output": "NO\n"}, {"input": "8\n2 1 2 2 1 2 1 1\n2\n5 5\n", "output": "NO\n"}, {"input": "16\n2 2 2 1 4 2 2 1 1 2 2 2 1 2 2 4\n4\n7 7 7 7\n", "output": "NO\n"}, {"input": "5\n2 2 3 4 5\n2\n3 5\n", "output": "NO\n"}, {"input": "5\n0 0 1 1 2\n3\n1 1 4\n", "output": "NO\n"}, {"input": "4\n2 3 3 1\n2\n5 1\n", "output": "NO\n"}, {"input": "4\n0 2 4 4\n3\n1 2 3\n", "output": "NO\n"}, {"input": "5\n1 1 1 3 3\n3\n2 1 2\n", "output": "NO\n"}, {"input": "6\n2 2 2 2 1 2\n2\n9 5\n", "output": "NO\n"}, {"input": "5\n1 2 3 14 5\n3\n1 4 3\n", "output": "NO\n"}, {"input": "6\n2 1 2 1 1 2\n2\n3 4\n", "output": "NO\n"}, {"input": "14\n5 5 5 5 6 4 4 3 3 3 4 4 4 4\n3\n32 12 0\n", "output": "NO\n"}, {"input": "5\n1 0 3 4 5\n1\n12\n", "output": "NO\n"}, {"input": "22\n3 2 3 2 3 1 1 2 1 2 1 1 2 2 2 3 1 2 3 3 3 3\n5\n5 19 5 5 15\n", "output": "NO\n"}, {"input": "4\n1 0 1 4\n3\n3 2 1\n", "output": "NO\n"}, {"input": "23\n3 2 1 3 3 3 1 1 2 2 2 1 1 1 2 2 3 1 2 2 3 3 4\n5\n6 16 5 5 15\n", "output": "NO\n"}, {"input": "1\n959139\n2\n589401\n", "output": "NO\n"}, {"input": "3\n10 5 5\n1\n2\n", "output": "NO\n"}, {"input": "4\n1 4 3 4\n2\n2 4\n", "output": "NO\n"}, {"input": "5\n1 1 1 3 3\n3\n2 1 6\n", "output": "NO\n"}, {"input": "6\n1 2 2 2 1 2\n2\n5 5\n", "output": "YES\n2 L\n1 R\n2 R\n2 R\n"}, {"input": "5\n1 2 3 4 5\n1\n15\n", "output": "YES\n5 L\n4 L\n3 L\n2 L\n"}]}
{"statement": "Task: Given a string composed of the first three lowercase Latin alphabets, define a \"beautiful\" string as one that does not contain a palindrome substring of length 2 or more. The cost to transform a string into a \"beautiful\" string is the minimum number of operations, where an operation is defined as changing any character to one of the first three lowercase Latin alphabets. Given multiple queries, each query specifies a substring of the original string by its start and end positions. The task is to calculate and return the cost of making each queried substring \"beautiful\".\n\nInput: The first line of input contains two integers n and m, representing the length of the string and the number of queries, respectively. The second line contains the string s, composed of n characters, each one of the first three lowercase Latin alphabets. The next m lines each contain two integers, l_i and r_i, representing the start and end positions of the substring for the i-th query.\n\nOutput: The output should consist of m lines. Each line should contain a single integer representing the cost to make the substring from the l_i-th to the r_i-th position \"beautiful\" for the corresponding query.\n\nConstraints: The length of the string and the number of queries, n and m, are each between 1 and 2*10^5. Each character of the string is one of the first three lowercase Latin alphabets. The parameters of each query, l_i and r_i, satisfy 1 <= l_i <= r_i <= n.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Complete search', 'Constructive algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1555/D", "sample_test_cases": [{"input": "5 4\nbaacb\n1 3\n1 5\n4 5\n2 3\n", "output": "1\n2\n0\n1\n"}, {"input": "1 1\na\n1 1\n", "output": "0\n"}, {"input": "10 3\nababababab\n1 2\n1 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n1 2\n1 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "1 1\na\n1 1\n", "output": "0\n"}, {"input": "10 3\naaabababab\n1 2\n1 2\n1 2\n", "output": "1\n1\n1\n"}, {"input": "5 4\nbaacb\n1 3\n1 5\n4 5\n2 4\n", "output": "1\n2\n0\n1\n"}, {"input": "10 3\nababababab\n1 2\n1 1\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n1 2\n1 2\n", "output": "0\n1\n1\n"}, {"input": "5 4\nbaacb\n1 3\n2 5\n4 5\n2 4\n", "output": "1\n1\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n2 2\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 4\n1 2\n", "output": "0\n1\n0\n"}, {"input": "10 3\nababababab\n1 3\n1 1\n1 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\naaabababab\n1 2\n1 1\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n2 4\n1 3\n", "output": "0\n1\n2\n"}, {"input": "10 3\naaabababab\n1 1\n1 4\n1 2\n", "output": "0\n2\n1\n"}, {"input": "10 3\naaabababab\n1 1\n2 7\n1 2\n", "output": "0\n3\n1\n"}, {"input": "10 3\naaabababab\n1 1\n1 4\n2 2\n", "output": "0\n2\n0\n"}, {"input": "10 3\naaabababaa\n1 1\n2 10\n1 2\n", "output": "0\n6\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n3 10\n1 2\n", "output": "0\n5\n1\n"}, {"input": "10 3\naaabababab\n1 2\n1 2\n2 2\n", "output": "1\n1\n0\n"}, {"input": "10 3\naaabababab\n1 2\n1 2\n1 3\n", "output": "1\n1\n2\n"}, {"input": "10 3\naaabababaa\n1 1\n1 7\n1 2\n", "output": "0\n4\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n2 10\n1 4\n", "output": "0\n6\n2\n"}, {"input": "10 3\naaabababaa\n1 1\n1 7\n1 3\n", "output": "0\n4\n2\n"}, {"input": "10 3\naaabababaa\n1 1\n2 10\n1 8\n", "output": "0\n6\n5\n"}, {"input": "10 3\naabababbaa\n1 1\n2 6\n1 1\n", "output": "0\n3\n0\n"}, {"input": "10 3\naaabababab\n1 3\n1 2\n1 2\n", "output": "2\n1\n1\n"}, {"input": "5 4\nbaacb\n1 3\n1 1\n4 5\n2 3\n", "output": "1\n0\n0\n1\n"}, {"input": "10 3\nbababacaba\n1 3\n1 1\n2 5\n", "output": "1\n0\n2\n"}, {"input": "10 3\naaabababab\n1 1\n1 4\n1 3\n", "output": "0\n2\n2\n"}, {"input": "5 4\nbaacb\n3 3\n1 3\n4 5\n2 3\n", "output": "0\n1\n0\n1\n"}, {"input": "10 3\naabbababaa\n1 2\n3 8\n1 2\n", "output": "1\n3\n1\n"}, {"input": "10 3\nbababababa\n1 4\n1 1\n2 3\n", "output": "2\n0\n0\n"}, {"input": "5 4\nbabcb\n2 3\n1 3\n3 5\n2 3\n", "output": "0\n1\n1\n0\n"}, {"input": "10 3\naaabababaa\n1 1\n2 10\n1 6\n", "output": "0\n6\n3\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 4\n1 4\n", "output": "0\n0\n2\n"}, {"input": "10 3\naaabababaa\n1 1\n2 7\n1 8\n", "output": "0\n3\n5\n"}, {"input": "5 4\nbaacb\n1 3\n1 1\n4 5\n2 2\n", "output": "1\n0\n0\n0\n"}, {"input": "5 4\nbaacb\n3 3\n1 3\n4 5\n3 3\n", "output": "0\n1\n0\n0\n"}, {"input": "10 3\nbababababa\n1 4\n1 1\n2 4\n", "output": "2\n0\n1\n"}, {"input": "10 3\naabababaaa\n1 1\n1 7\n2 2\n", "output": "0\n4\n0\n"}, {"input": "5 4\nbaacb\n1 3\n2 5\n4 5\n2 2\n", "output": "1\n1\n0\n0\n"}, {"input": "5 4\nbaacb\n1 4\n1 3\n4 5\n2 3\n", "output": "2\n1\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n2 7\n1 4\n", "output": "0\n3\n2\n"}, {"input": "10 3\naaababbaab\n1 2\n1 4\n1 2\n", "output": "1\n2\n1\n"}, {"input": "5 4\nbabcb\n1 3\n1 3\n3 5\n2 3\n", "output": "1\n1\n1\n0\n"}, {"input": "5 4\nbaacb\n1 3\n1 1\n1 5\n2 2\n", "output": "1\n0\n2\n0\n"}, {"input": "5 4\nbaacb\n2 3\n1 5\n3 5\n3 3\n", "output": "1\n2\n0\n0\n"}, {"input": "10 3\naaababbaab\n1 2\n1 4\n1 3\n", "output": "1\n2\n2\n"}, {"input": "10 3\naabbbaabaa\n1 2\n2 8\n1 2\n", "output": "1\n4\n1\n"}, {"input": "5 4\nbcaab\n1 3\n1 5\n4 5\n2 3\n", "output": "0\n2\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n1 8\n1 3\n", "output": "0\n5\n2\n"}, {"input": "5 4\nbabcb\n2 3\n1 3\n3 5\n2 5\n", "output": "0\n1\n1\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n2 9\n1 8\n", "output": "0\n5\n5\n"}, {"input": "5 4\nbaacb\n1 4\n1 3\n4 5\n3 3\n", "output": "2\n1\n0\n0\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 4\n1 8\n", "output": "0\n0\n4\n"}, {"input": "5 4\nbaacb\n1 2\n1 1\n1 5\n2 2\n", "output": "0\n0\n2\n0\n"}, {"input": "10 3\nbababbbaba\n1 4\n1 3\n2 3\n", "output": "2\n1\n0\n"}, {"input": "10 3\naaabababaa\n1 2\n3 7\n2 2\n", "output": "1\n3\n0\n"}, {"input": "5 4\nbabcb\n1 3\n1 5\n2 5\n1 3\n", "output": "1\n2\n1\n1\n"}, {"input": "5 4\ncaacb\n2 2\n1 1\n4 5\n2 3\n", "output": "0\n0\n0\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n1 3\n1 8\n", "output": "0\n2\n5\n"}, {"input": "10 3\naaabababaa\n1 2\n4 7\n2 2\n", "output": "1\n2\n0\n"}, {"input": "5 4\nbabcb\n1 3\n2 5\n2 5\n1 3\n", "output": "1\n1\n1\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n2 3\n1 8\n", "output": "0\n1\n5\n"}, {"input": "10 3\naabbaaabab\n1 3\n2 7\n1 4\n", "output": "1\n3\n2\n"}, {"input": "5 4\nbaacb\n1 5\n1 5\n4 5\n2 4\n", "output": "2\n2\n0\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n3 10\n1 1\n", "output": "0\n5\n0\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 4\n1 5\n", "output": "0\n1\n3\n"}, {"input": "10 3\nababababab\n1 5\n1 1\n2 4\n", "output": "3\n0\n1\n"}, {"input": "10 3\naaabababaa\n1 2\n2 10\n1 8\n", "output": "1\n6\n5\n"}, {"input": "5 4\nbabcb\n2 3\n2 3\n3 5\n2 3\n", "output": "0\n0\n1\n0\n"}, {"input": "10 3\naaabababaa\n1 1\n2 7\n1 6\n", "output": "0\n3\n3\n"}, {"input": "5 4\nbaacc\n1 3\n2 5\n4 5\n2 2\n", "output": "1\n2\n1\n0\n"}, {"input": "10 3\nbababacbaa\n1 5\n1 1\n2 3\n", "output": "3\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n2 4\n1 2\n", "output": "0\n1\n1\n"}, {"input": "5 4\nbaacb\n1 3\n1 3\n4 5\n2 3\n", "output": "1\n1\n0\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n2 4\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n4 4\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababababa\n1 3\n1 1\n1 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\naabbababaa\n1 1\n2 4\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\nbbbababaaa\n1 1\n4 4\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbababababa\n1 3\n1 1\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\naabbababaa\n1 1\n2 4\n1 1\n", "output": "0\n1\n0\n"}, {"input": "10 3\nbababacaba\n1 3\n1 1\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\nbababacaba\n1 3\n1 1\n2 3\n", "output": "1\n0\n0\n"}, {"input": "5 4\nbaacb\n2 3\n1 5\n4 5\n2 3\n", "output": "1\n2\n0\n1\n"}, {"input": "10 3\nababababab\n1 2\n1 1\n1 3\n", "output": "0\n0\n1\n"}, {"input": "5 4\nbaacb\n2 3\n1 3\n4 5\n2 3\n", "output": "1\n1\n0\n1\n"}, {"input": "10 3\nbabababaca\n1 3\n1 1\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\nababababab\n1 2\n1 2\n2 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n2 3\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\naabbababaa\n1 1\n3 4\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\nbaabababab\n1 2\n1 1\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n1 2\n2 2\n", "output": "0\n1\n0\n"}, {"input": "10 3\naaabababaa\n1 1\n2 7\n1 2\n", "output": "0\n3\n1\n"}, {"input": "10 3\naabbababaa\n1 2\n3 4\n1 2\n", "output": "1\n1\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 4\n1 3\n", "output": "0\n1\n1\n"}, {"input": "10 3\nababababab\n1 3\n1 1\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\nbabababaaa\n1 2\n4 4\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababababa\n1 3\n1 1\n2 3\n", "output": "1\n0\n0\n"}, {"input": "10 3\naabababbaa\n1 1\n2 4\n1 1\n", "output": "0\n1\n0\n"}, {"input": "10 3\nbababacaba\n1 3\n1 2\n2 3\n", "output": "1\n0\n0\n"}, {"input": "5 4\nbaacb\n2 3\n1 3\n3 5\n2 3\n", "output": "1\n1\n0\n1\n"}, {"input": "10 3\nbaaababaca\n1 3\n1 1\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\naabbababaa\n1 1\n4 4\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbaabababab\n2 2\n1 1\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababab\n1 1\n1 4\n2 3\n", "output": "0\n2\n1\n"}, {"input": "10 3\nababababab\n1 3\n1 1\n2 4\n", "output": "1\n0\n1\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 4\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababababa\n1 3\n1 2\n2 3\n", "output": "1\n0\n0\n"}, {"input": "10 3\naabababbaa\n1 1\n2 3\n1 1\n", "output": "0\n0\n0\n"}, {"input": "10 3\naabbababaa\n1 1\n4 5\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n2 3\n1 1\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababaa\n1 1\n3 4\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n4 4\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbababababa\n1 1\n1 1\n2 2\n", "output": "0\n0\n0\n"}, {"input": "5 4\nbaacb\n2 3\n1 5\n5 5\n2 3\n", "output": "1\n2\n0\n1\n"}, {"input": "10 3\nababababac\n1 2\n1 1\n1 3\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaababbaab\n1 1\n1 4\n1 2\n", "output": "0\n2\n1\n"}, {"input": "10 3\naaabababab\n1 2\n2 3\n1 2\n", "output": "1\n1\n1\n"}, {"input": "10 3\naababaabaa\n1 1\n2 4\n1 1\n", "output": "0\n1\n0\n"}, {"input": "10 3\nabacababab\n1 3\n1 2\n2 3\n", "output": "1\n0\n0\n"}, {"input": "10 3\nbaaababaca\n1 3\n1 1\n2 3\n", "output": "1\n0\n1\n"}, {"input": "10 3\naabababaaa\n1 1\n1 7\n1 2\n", "output": "0\n4\n1\n"}, {"input": "10 3\naabbababaa\n1 2\n4 5\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 3\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n2 3\n1 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababaa\n1 2\n3 4\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\naaabababab\n1 2\n4 4\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\nbababacaba\n2 3\n1 1\n2 5\n", "output": "0\n0\n2\n"}, {"input": "10 3\nbabababaaa\n1 1\n1 4\n1 3\n", "output": "0\n2\n1\n"}, {"input": "10 3\naaababbaab\n1 1\n1 8\n1 2\n", "output": "0\n3\n1\n"}, {"input": "10 3\naabaabbbaa\n1 2\n3 8\n1 2\n", "output": "1\n3\n1\n"}, {"input": "10 3\nabacababab\n1 2\n1 2\n2 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 4\n2 4\n", "output": "0\n0\n1\n"}, {"input": "10 3\nababababab\n2 3\n1 2\n2 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaabababaa\n1 3\n3 4\n1 2\n", "output": "2\n0\n1\n"}, {"input": "10 3\nbababababa\n1 3\n1 1\n2 4\n", "output": "1\n0\n1\n"}, {"input": "10 3\nabacababab\n1 2\n1 2\n3 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n2 5\n1 2\n2 2\n", "output": "2\n0\n0\n"}, {"input": "10 3\nbababacaba\n1 2\n1 2\n3 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n1 2\n2 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "5 4\nbaacb\n1 3\n2 5\n4 5\n2 3\n", "output": "1\n1\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n1 1\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaabababaa\n1 1\n2 4\n2 2\n", "output": "0\n1\n0\n"}, {"input": "10 3\nbabababaaa\n1 1\n4 4\n1 1\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbbbababaaa\n1 1\n4 5\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\nbababacbaa\n1 3\n1 1\n2 3\n", "output": "1\n0\n0\n"}, {"input": "5 4\nbaacb\n2 3\n1 5\n3 5\n2 3\n", "output": "1\n2\n0\n1\n"}, {"input": "10 3\naaabababab\n2 2\n1 1\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaabababab\n1 1\n1 4\n1 1\n", "output": "0\n2\n0\n"}, {"input": "10 3\naabbababaa\n1 1\n1 4\n1 2\n", "output": "0\n2\n1\n"}, {"input": "10 3\nbaabababab\n1 2\n1 1\n1 4\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaabababab\n1 2\n2 2\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\nbabababaaa\n1 1\n2 4\n1 1\n", "output": "0\n1\n0\n"}, {"input": "10 3\nababababab\n1 2\n1 1\n2 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbacababaaa\n1 2\n4 4\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababababa\n1 3\n1 2\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\naaabababab\n2 2\n1 2\n1 3\n", "output": "0\n1\n2\n"}, {"input": "10 3\nbabababaaa\n1 1\n1 4\n2 3\n", "output": "0\n2\n0\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 4\n2 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababababa\n2 3\n1 2\n2 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\naabababbaa\n1 1\n2 7\n1 1\n", "output": "0\n4\n0\n"}, {"input": "10 3\nababbbabab\n2 3\n1 1\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naabbababaa\n1 3\n3 8\n1 2\n", "output": "1\n3\n1\n"}, {"input": "10 3\nbababbbaba\n1 4\n1 1\n2 3\n", "output": "2\n0\n0\n"}, {"input": "10 3\naabaaabbaa\n1 1\n2 4\n1 1\n", "output": "0\n1\n0\n"}, {"input": "10 3\nabacababab\n2 3\n1 2\n2 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\naabbababaa\n2 2\n4 5\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaabababab\n1 2\n3 4\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\naaababbaab\n1 1\n1 8\n1 1\n", "output": "0\n3\n0\n"}, {"input": "10 3\naabaabbbaa\n1 2\n2 8\n1 2\n", "output": "1\n3\n1\n"}, {"input": "10 3\nabacababab\n2 2\n1 2\n2 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababbaaaa\n1 2\n4 6\n2 4\n", "output": "0\n1\n1\n"}, {"input": "10 3\naaabababaa\n2 3\n3 4\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\nababababab\n2 5\n1 1\n2 2\n", "output": "2\n0\n0\n"}, {"input": "10 3\nbababacaab\n1 2\n1 2\n3 3\n", "output": "0\n0\n0\n"}, {"input": "5 4\nbaacb\n1 3\n2 2\n4 5\n2 3\n", "output": "1\n0\n0\n1\n"}, {"input": "10 3\naaabababbb\n1 1\n1 1\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naabababaaa\n1 1\n4 4\n1 1\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbbbabacaaa\n1 1\n4 5\n1 2\n", "output": "0\n0\n1\n"}, {"input": "10 3\naabbababab\n1 1\n2 7\n1 4\n", "output": "0\n2\n2\n"}, {"input": "10 3\nbaabababab\n1 2\n1 2\n1 4\n", "output": "0\n0\n1\n"}, {"input": "10 3\naaababaaab\n1 2\n2 2\n2 2\n", "output": "1\n0\n0\n"}, {"input": "10 3\nbacababaaa\n2 2\n4 4\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\naabbababab\n2 2\n1 2\n1 3\n", "output": "0\n1\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n1 4\n2 5\n", "output": "0\n2\n2\n"}, {"input": "10 3\naabababbaa\n1 1\n3 7\n1 1\n", "output": "0\n3\n0\n"}, {"input": "10 3\nababbbabab\n2 3\n1 1\n2 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbababbbaba\n1 4\n1 2\n2 3\n", "output": "2\n0\n0\n"}, {"input": "10 3\nabacababab\n2 6\n1 2\n2 3\n", "output": "2\n0\n0\n"}, {"input": "10 3\naabbababaa\n2 2\n2 5\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\nabacababab\n2 2\n1 2\n3 3\n", "output": "0\n0\n0\n"}, {"input": "10 3\nabaababaaa\n1 1\n4 4\n1 1\n", "output": "0\n0\n0\n"}, {"input": "10 3\nbaabababab\n1 2\n1 3\n1 4\n", "output": "0\n1\n1\n"}, {"input": "10 3\naaababaaab\n1 2\n2 2\n1 2\n", "output": "1\n0\n1\n"}, {"input": "10 3\naabbababab\n2 2\n1 2\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\nbabababaaa\n1 1\n1 5\n2 5\n", "output": "0\n3\n2\n"}, {"input": "10 3\naabababbaa\n1 1\n6 7\n1 1\n", "output": "0\n0\n0\n"}, {"input": "10 3\naaababbaab\n1 2\n1 4\n1 4\n", "output": "1\n2\n2\n"}, {"input": "10 3\naabbababaa\n2 2\n3 5\n1 2\n", "output": "0\n1\n1\n"}, {"input": "10 3\naaaababaaa\n1 1\n4 4\n1 1\n", "output": "0\n0\n0\n"}, {"input": "5 4\nbaacb\n1 3\n1 5\n4 5\n2 3\n", "output": "1\n2\n0\n1\n"}]}
{"statement": "Task: Given a string s, determine whether it contains two distinct non-overlapping subsequences \"AB\" and \"BA\" in any order.\n\nInput: The input consists of a single string s of length n (1 \u2264 n \u2264 10^5) composed of uppercase Latin letters, provided via standard input.\n\nOutput: The output should be a string, either \"YES\" if s contains two non-overlapping subsequences \"AB\" and \"BA\" in any order, or \"NO\" otherwise. The output should be provided via standard output.\n\nConstraints: The string s consists only of uppercase Latin letters. The length of the string is between 1 and 10^5 inclusive. The subsequences \"AB\" and \"BA\" should not overlap in the string.", "editorial": "", "tag": "['String algorithms', 'Implementation', 'Greedy algorithms', 'Complete search', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/550/A", "sample_test_cases": [{"input": "ABA\n", "output": "NO\n"}, {"input": "BACFAB\n", "output": "YES\n"}, {"input": "AXBYBXA\n", "output": "NO\n"}, {"input": "ABABAB\n", "output": "YES\n"}, {"input": "BBBBBBBBBB\n", "output": "NO\n"}, {"input": "ABBA\n", "output": "YES\n"}, {"input": "ABAXXXAB\n", "output": "YES\n"}, {"input": "TESTABAXXABTEST\n", "output": "YES\n"}, {"input": "A\n", "output": "NO\n"}, {"input": "B\n", "output": "NO\n"}, {"input": "X\n", "output": "NO\n"}, {"input": "BA\n", "output": "NO\n"}, {"input": "AB\n", "output": "NO\n"}, {"input": "AA\n", "output": "NO\n"}, {"input": "BB\n", "output": "NO\n"}, {"input": "BAB\n", "output": "NO\n"}, {"input": "AAB\n", "output": "NO\n"}, {"input": "BAA\n", "output": "NO\n"}, {"input": "ABB\n", "output": "NO\n"}, {"input": "BBA\n", "output": "NO\n"}, {"input": "AAA\n", "output": "NO\n"}, {"input": "BBB\n", "output": "NO\n"}, {"input": "AXBXBXA\n", "output": "NO\n"}, {"input": "SKDSKDJABSDBADKFJDK\n", "output": "YES\n"}, {"input": "ABAXXBBXXAA\n", "output": "NO\n"}, {"input": "ABAB\n", "output": "NO\n"}, {"input": "BABA\n", "output": "NO\n"}, {"input": "AAAB\n", "output": "NO\n"}, {"input": "AAAA\n", "output": "NO\n"}, {"input": "AABA\n", "output": "NO\n"}, {"input": "ABAA\n", "output": "NO\n"}, {"input": "BAAA\n", "output": "NO\n"}, {"input": "AABB\n", "output": "NO\n"}, {"input": "BAAB\n", "output": "YES\n"}, {"input": "BBAA\n", "output": "NO\n"}, {"input": "BBBA\n", "output": "NO\n"}, {"input": "BBAB\n", "output": "NO\n"}, {"input": "BABB\n", "output": "NO\n"}, {"input": "ABBB\n", "output": "NO\n"}, {"input": "BBBB\n", "output": "NO\n"}, {"input": "BABAB\n", "output": "YES\n"}, {"input": "ABABA\n", "output": "YES\n"}, {"input": "AAABAAACBBBC\n", "output": "NO\n"}, {"input": "AABBBACBBBBBBAACBCCACBBAABBBBBCAACABAACABCACCBCBCCCBCBCABCBBCCBCBBAACBACAABACBBCACCBCCACCABBCBABBAAC\n", "output": "YES\n"}, {"input": "CBBABDDBBADAC\n", "output": "YES\n"}, {"input": "ABYFAB\n", "output": "NO\n"}, {"input": "BABXXAB\n", "output": "YES\n"}, {"input": "ABAXAB\n", "output": "YES\n"}, {"input": "ABABXAB\n", "output": "YES\n"}, {"input": "ABXABXABXABXABXBAXBAXBAXBA\n", "output": "YES\n"}, {"input": "QQQQQQQQQABABQQQQQQQQ\n", "output": "NO\n"}, {"input": "BAAA\n", "output": "NO\n"}, {"input": "BAA\n", "output": "NO\n"}, {"input": "ABABA\n", "output": "YES\n"}, {"input": "BABAB\n", "output": "YES\n"}, {"input": "AABBBACBBBBBBAACBCCACBBAABBBBBCAACABAACABCACCBCBCCCBCBCABCBBCCBCBBAACBACAABACBBCACCBCCACCABBCBABBAAC\n", "output": "YES\n"}, {"input": "BABXXAB\n", "output": "YES\n"}, {"input": "AAABAAACBBBC\n", "output": "NO\n"}, {"input": "BBBB\n", "output": "NO\n"}, {"input": "ABYFAB\n", "output": "NO\n"}, {"input": "BAAB\n", "output": "YES\n"}, {"input": "BBB\n", "output": "NO\n"}, {"input": "BB\n", "output": "NO\n"}, {"input": "BA\n", "output": "NO\n"}, {"input": "AB\n", "output": "NO\n"}, {"input": "QQQQQQQQQABABQQQQQQQQ\n", "output": "NO\n"}, {"input": "AAA\n", "output": "NO\n"}, {"input": "ABAA\n", "output": "NO\n"}, {"input": "ABAB\n", "output": "NO\n"}, {"input": "AA\n", "output": "NO\n"}, {"input": "AAB\n", "output": "NO\n"}, {"input": "CBBABDDBBADAC\n", "output": "YES\n"}, {"input": "BABB\n", "output": "NO\n"}, {"input": "A\n", "output": "NO\n"}, {"input": "AABA\n", "output": "NO\n"}, {"input": "BBBBBBBBBB\n", "output": "NO\n"}, {"input": "ABAXXXAB\n", "output": "YES\n"}, {"input": "BAB\n", "output": "NO\n"}, {"input": "AABB\n", "output": "NO\n"}, {"input": "AAAB\n", "output": "NO\n"}, {"input": "TESTABAXXABTEST\n", "output": "YES\n"}, {"input": "BABA\n", "output": "NO\n"}, {"input": "BBBA\n", "output": "NO\n"}, {"input": "X\n", "output": "NO\n"}, {"input": "ABBB\n", "output": "NO\n"}, {"input": "B\n", "output": "NO\n"}, {"input": "AAAA\n", "output": "NO\n"}, {"input": "ABAXXBBXXAA\n", "output": "NO\n"}, {"input": "SKDSKDJABSDBADKFJDK\n", "output": "YES\n"}, {"input": "ABAXAB\n", "output": "YES\n"}, {"input": "ABABAB\n", "output": "YES\n"}, {"input": "ABXABXABXABXABXBAXBAXBAXBA\n", "output": "YES\n"}, {"input": "AXBXBXA\n", "output": "NO\n"}, {"input": "ABB\n", "output": "NO\n"}, {"input": "BBAA\n", "output": "NO\n"}, {"input": "BBAB\n", "output": "NO\n"}, {"input": "BBA\n", "output": "NO\n"}, {"input": "ABABXAB\n", "output": "YES\n"}, {"input": "ABBA\n", "output": "YES\n"}, {"input": "CAAA\n", "output": "NO\n"}, {"input": "CAABBABCBBACCACCBCCACBBCABAACABCAABBCBCCBBCBACBCBCCCBCBCCACBACAABACAACBBBBBAABBCACCBCAABBBBBBCABBBAA\n", "output": "YES\n"}, {"input": "CAB\n", "output": "NO\n"}, {"input": "ABAAA\n", "output": "NO\n"}, {"input": "BAXXBAB\n", "output": "YES\n"}, {"input": "AAABAABCBBBC\n", "output": "YES\n"}, {"input": "AA@B\n", "output": "NO\n"}, {"input": "ABYGAB\n", "output": "NO\n"}, {"input": "AACB\n", "output": "NO\n"}, {"input": "@BA\n", "output": "NO\n"}, {"input": "AC\n", "output": "NO\n"}, {"input": "CA\n", "output": "NO\n"}, {"input": "@B\n", "output": "NO\n"}, {"input": "A@A\n", "output": "NO\n"}, {"input": "@BAA\n", "output": "NO\n"}, {"input": "CAAB\n", "output": "NO\n"}, {"input": "CB\n", "output": "NO\n"}, {"input": "@AB\n", "output": "NO\n"}, {"input": "CADABBDDBABBC\n", "output": "YES\n"}, {"input": "BAB@\n", "output": "NO\n"}, {"input": "@\n", "output": "NO\n"}, {"input": "A@BA\n", "output": "NO\n"}, {"input": "ABBBBBBBBB\n", "output": "NO\n"}, {"input": "ABAXYXAB\n", "output": "YES\n"}, {"input": "BB@\n", "output": "NO\n"}, {"input": "BBBC\n", "output": "NO\n"}, {"input": "BAA@\n", "output": "NO\n"}, {"input": "TSETBAXXABATSET\n", "output": "YES\n"}, {"input": "B@AA\n", "output": "NO\n"}, {"input": "BCBA\n", "output": "NO\n"}, {"input": "W\n", "output": "NO\n"}, {"input": "BABC\n", "output": "NO\n"}, {"input": "C\n", "output": "NO\n"}, {"input": "@AAA\n", "output": "NO\n"}, {"input": "AAXXBBXXABA\n", "output": "NO\n"}, {"input": "KDJFKDABDSBAJDKSDKS\n", "output": "YES\n"}, {"input": "ABABAC\n", "output": "YES\n"}, {"input": "ABXABXABXABXBAXBAXBAXBAXBA\n", "output": "YES\n"}, {"input": "BXBXBXA\n", "output": "NO\n"}, {"input": "AAC\n", "output": "NO\n"}, {"input": "@ABB\n", "output": "NO\n"}, {"input": "BA@B\n", "output": "NO\n"}, {"input": "CAA\n", "output": "NO\n"}, {"input": "BAXBABA\n", "output": "YES\n"}, {"input": "AB@A\n", "output": "NO\n"}, {"input": "ACA\n", "output": "NO\n"}, {"input": "AXBXBX@\n", "output": "NO\n"}, {"input": "BAFCAB\n", "output": "YES\n"}, {"input": "BAAC\n", "output": "NO\n"}, {"input": "CBA\n", "output": "NO\n"}, {"input": "ABAAB\n", "output": "YES\n"}, {"input": "CAACBABCBBACCACCBCCACBBCABAACABCAABBCBCCBBCBACBCBCCCBCBCCACBACAABACAACBBBBBAABBCACCBCAABBBBBBCABBBAA\n", "output": "YES\n"}, {"input": "BAWXBAB\n", "output": "YES\n"}, {"input": "CBBBCBAABAAA\n", "output": "YES\n"}, {"input": "AAB@\n", "output": "NO\n"}, {"input": "ABYGBB\n", "output": "NO\n"}, {"input": "BCAA\n", "output": "NO\n"}, {"input": "AB@\n", "output": "NO\n"}, {"input": "BC\n", "output": "NO\n"}, {"input": "CC\n", "output": "NO\n"}, {"input": "B@\n", "output": "NO\n"}, {"input": "@@A\n", "output": "NO\n"}, {"input": "@BBA\n", "output": "NO\n"}, {"input": "CAAC\n", "output": "NO\n"}, {"input": "DC\n", "output": "NO\n"}, {"input": "BA@\n", "output": "NO\n"}, {"input": "C@DABBDDBABBC\n", "output": "YES\n"}, {"input": "BAB?\n", "output": "NO\n"}, {"input": "?\n", "output": "NO\n"}, {"input": "B@BA\n", "output": "NO\n"}, {"input": "ABBBBBBBCB\n", "output": "NO\n"}, {"input": "BAXYXABA\n", "output": "YES\n"}, {"input": "@BB\n", "output": "NO\n"}, {"input": "BBCB\n", "output": "NO\n"}, {"input": "BAA?\n", "output": "NO\n"}, {"input": "TSETBAXXBAATSET\n", "output": "NO\n"}, {"input": "A@AA\n", "output": "NO\n"}, {"input": "BBCA\n", "output": "NO\n"}, {"input": "V\n", "output": "NO\n"}, {"input": "BACC\n", "output": "NO\n"}, {"input": ">\n", "output": "NO\n"}, {"input": "@ABA\n", "output": "NO\n"}, {"input": "AAXXCBXXABA\n", "output": "NO\n"}, {"input": "RKDSKDJABSDBADKFJDK\n", "output": "YES\n"}, {"input": "CABABA\n", "output": "YES\n"}, {"input": "AAXABXABXABXBAXBAXBAXBAXBA\n", "output": "YES\n"}, {"input": "BXBXBXB\n", "output": "NO\n"}, {"input": "A@@\n", "output": "NO\n"}, {"input": "?ABB\n", "output": "NO\n"}, {"input": "B@AB\n", "output": "NO\n"}, {"input": "A@C\n", "output": "NO\n"}, {"input": "AB@B\n", "output": "NO\n"}, {"input": "BCA\n", "output": "NO\n"}, {"input": "ABA\n", "output": "NO\n"}, {"input": "AXBYBXA\n", "output": "NO\n"}, {"input": "BACFAB\n", "output": "YES\n"}]}
{"statement": "Task: Given a sequence of n integers, a player can perform several operations. In each operation, a player selects an integer (ak) from the sequence and removes it, along with all instances of integers equal to ak + 1 and ak - 1. The player earns ak points for each operation. The objective is to maximize the total points earned through these operations.\n\nInput: The input from standard input starts with a single integer n (1 \u2264 n \u2264 105), representing the length of the sequence. The next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 105), denoting the sequence.\n\nOutput: The output to standard output should be a single integer, indicating the maximum points that can be obtained through the operations.\n\nConstraints: The length of the sequence n is bounded by 1 \u2264 n \u2264 105. Each integer in the sequence ai is bounded by 1 \u2264 ai \u2264 105.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/456/C", "sample_test_cases": [{"input": "5\n3 3 4 5 4\n", "output": "11\n"}, {"input": "10\n8 9 6 5 6 4 10 9 1 4\n", "output": "39\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "296\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 7 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "328\n"}, {"input": "10\n1 7 1 4 9 10 8 2 9 9\n", "output": "40\n"}, {"input": "2\n1 2\n\nSAMPLE", "output": "2\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 10 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "313\n"}, {"input": "10\n10 5 8 9 5 6 8 7 2 8\n", "output": "46\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 1 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "380\n"}, {"input": "5\n5 3 5 3 4\n", "output": "16\n"}, {"input": "100\n2 10 9 1 2 6 7 2 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "312\n"}, {"input": "1\n100000\n", "output": "100000\n"}, {"input": "100\n5 6 10 7 1 7 10 1 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "324\n"}, {"input": "100\n10 5 8 4 4 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\n", "output": "265\n"}, {"input": "10\n1 1 1 1 1 1 2 3 4 4\n", "output": "14\n"}, {"input": "100\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 8 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 2 5 2\n", "output": "287\n"}, {"input": "100\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 3 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 9\n", "output": "298\n"}, {"input": "5\n4 2 3 2 5\n", "output": "9\n"}, {"input": "10\n7 4 5 3 9 1 10 3 4 5\n", "output": "34\n"}, {"input": "5\n3 3 8 5 4\n", "output": "19\n"}, {"input": "10\n8 9 6 6 6 4 10 9 1 4\n", "output": "45\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "300\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "328\n"}, {"input": "10\n1 7 2 4 9 10 8 2 9 9\n", "output": "42\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "317\n"}, {"input": "10\n10 8 8 9 5 6 8 7 2 8\n", "output": "50\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "379\n"}, {"input": "5\n5 3 5 5 4\n", "output": "18\n"}, {"input": "100\n2 10 9 1 2 6 7 3 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "310\n"}, {"input": "100\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "323\n"}, {"input": "100\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\n", "output": "265\n"}, {"input": "10\n1 1 1 1 1 1 2 3 0 4\n", "output": "10\n"}, {"input": "5\n8 2 3 2 5\n", "output": "17\n"}, {"input": "9\n1 2 1 3 2 4 2 2 3\n", "output": "12\n"}, {"input": "5\n3 3 11 5 4\n", "output": "22\n"}, {"input": "10\n8 9 6 6 6 4 10 9 1 8\n", "output": "49\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "307\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "326\n"}, {"input": "10\n1 7 2 4 9 10 8 3 9 9\n", "output": "40\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "313\n"}, {"input": "10\n10 8 11 9 5 6 8 7 2 8\n", "output": "43\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 2 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "374\n"}, {"input": "5\n5 3 3 5 4\n", "output": "16\n"}, {"input": "100\n2 10 9 1 2 6 7 3 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "320\n"}, {"input": "100\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\n", "output": "270\n"}, {"input": "10\n1 1 1 1 1 1 2 3 1 4\n", "output": "11\n"}, {"input": "100\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\n", "output": "302\n"}, {"input": "10\n8 9 6 6 9 4 10 9 1 8\n", "output": "44\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "303\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "340\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 14 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "309\n"}, {"input": "10\n10 8 11 9 5 6 8 7 2 1\n", "output": "35\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 2 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "392\n"}, {"input": "100\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "327\n"}, {"input": "100\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "335\n"}, {"input": "100\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\n", "output": "262\n"}, {"input": "10\n1 1 1 1 1 1 3 3 1 4\n", "output": "13\n"}, {"input": "100\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 3 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\n", "output": "298\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 4 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "336\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 24 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "319\n"}, {"input": "10\n10 8 11 9 9 6 8 7 2 1\n", "output": "38\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 3 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "395\n"}, {"input": "100\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 2 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "329\n"}, {"input": "100\n5 6 10 10 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "338\n"}, {"input": "100\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 2 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 3 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 11\n", "output": "295\n"}, {"input": "5\n10 2 3 1 9\n", "output": "14\n"}, {"input": "10\n7 9 6 6 17 4 10 9 1 8\n", "output": "52\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 24 1 7 5 8 1 1 1 3 10 2 4 3 5 2 7 4 9 5 10 1 2 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 3 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "316\n"}, {"input": "10\n10 8 11 9 9 6 8 7 0 1\n", "output": "37\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 18 9 2 7 8 2 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 3 9 3 2 5 6 2 3 10 1 5 3 6 10 4 10 8\n", "output": "398\n"}, {"input": "100\n5 6 10 10 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 11 4 3 7 7 10 6 9 5 5 6 5 3 9 12 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "331\n"}, {"input": "100\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 2 5 2\n", "output": "300\n"}, {"input": "100\n7 6 3 8 8 3 10 5 3 8 6 4 6 9 6 7 3 9 10 7 5 5 9 10 7 2 3 8 9 5 4 7 9 5 6 4 9 10 7 6 8 7 6 6 10 3 7 4 5 7 7 5 1 5 4 8 7 3 3 4 7 8 5 9 2 2 3 1 6 4 6 6 6 1 7 10 7 4 5 3 9 2 4 1 5 10 9 3 9 6 8 5 2 1 10 4 8 5 10 9\n", "output": "300\n"}, {"input": "100\n5 6 10 7 1 7 10 2 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 4 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "323\n"}, {"input": "100\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 8 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 4 5 2\n", "output": "300\n"}, {"input": "5\n8 2 3 1 5\n", "output": "17\n"}, {"input": "9\n1 2 1 3 2 4 1 2 3\n", "output": "10\n"}, {"input": "5\n2 3 11 5 4\n", "output": "19\n"}, {"input": "10\n2 7 2 4 9 10 8 3 9 9\n", "output": "42\n"}, {"input": "5\n5 3 3 4 4\n", "output": "11\n"}, {"input": "100\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 0 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 2 2 8 8 4 5 6 9 2 3 2 4 5 2\n", "output": "300\n"}, {"input": "5\n8 2 3 1 9\n", "output": "13\n"}, {"input": "9\n2 2 1 3 2 4 1 2 3\n", "output": "12\n"}, {"input": "5\n2 1 11 5 4\n", "output": "18\n"}, {"input": "10\n7 9 6 6 9 4 10 9 1 8\n", "output": "44\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 8 5 8 9 6 1 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "303\n"}, {"input": "10\n2 7 2 4 9 10 8 5 9 9\n", "output": "43\n"}, {"input": "100\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 2 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\n", "output": "262\n"}, {"input": "10\n2 1 1 1 1 1 3 3 1 4\n", "output": "12\n"}, {"input": "100\n4 9 7 10 4 7 2 6 1 9 1 8 7 5 5 7 6 7 9 13 10 5 3 5 7 10 3 2 1 3 8 9 4 10 4 7 6 4 9 6 7 1 9 4 3 5 8 9 2 7 10 5 7 5 3 8 10 3 0 9 3 4 3 10 6 5 1 8 3 2 5 8 4 7 5 3 3 2 6 9 9 8 2 7 6 3 4 2 8 8 4 5 6 9 2 3 2 4 5 2\n", "output": "300\n"}, {"input": "9\n4 2 1 3 2 4 1 2 3\n", "output": "14\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 1 5 8 9 6 1 6 4 10 9 1 4 1 7 1 4 9 10 4 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 15 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "295\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 1 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 4 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 11 6 9 9 2 10 10 9 1 2 1 14 7 4 10 2 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "338\n"}, {"input": "10\n2 7 2 4 9 10 8 6 9 9\n", "output": "42\n"}, {"input": "100\n2 10 9 1 2 6 7 3 2 15 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 17 8 8 2 4 6 5 1 4 2 2 1 2 8 10 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 2 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "336\n"}, {"input": "100\n10 5 8 4 7 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 2 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 10 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 4 4 2 2 8 5 10 1 8 11 5 1 5 6 9 4 5 6 5 10 2\n", "output": "262\n"}, {"input": "9\n1 2 1 3 2 2 2 2 3\n", "output": "10\n"}, {"input": "3\n1 2 3\n", "output": "4\n"}, {"input": "2\n1 2\n", "output": "2\n"}]}
{"statement": "Task: Given an array of integers, perform a sequence of operations until only one element remains in the array. An operation consists of choosing an element 'x' and its adjacent element 'y', removing 'y' from the array and updating 'x' to 'x - y'. The task is to find the maximum possible value of the remaining element after all operations have been performed.\n\nInput: The first line of input from standard input contains an integer 'n', the size of the array. The second line contains 'n' integers, the elements of the array.\n\nOutput: The output to standard output should be a single integer, the maximum possible value of the remaining element after performing the operations.\n\nConstraints: The size of the array 'n' is an integer between 1 and 500,000, inclusive. Each element of the array 'a_i' is an integer between -1,000,000,000 and 1,000,000,000, inclusive.", "editorial": "", "tag": "['Dynamic programming', 'Implementation', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1038/D", "sample_test_cases": [{"input": "4\n2 1 2 1\n", "output": "4"}, {"input": "5\n0 -1 -1 -1 -1\n", "output": "4"}, {"input": "2\n10 8\n", "output": "2"}, {"input": "5\n-14 -2 0 -19 -12\n", "output": "47"}, {"input": "6\n-15 2 -19 20 0 9\n", "output": "65"}, {"input": "3\n17 4 -1\n", "output": "22"}, {"input": "4\n20 3 -15 7\n", "output": "45"}, {"input": "1\n11\n", "output": "11"}, {"input": "1\n-10\n", "output": "-10"}, {"input": "7\n-8 9 0 -10 -20 -8 3\n", "output": "58"}, {"input": "9\n2 4 -4 15 1 11 15 -7 -20\n", "output": "79"}, {"input": "10\n-20 0 3 -5 -18 15 -3 -9 -7 9\n", "output": "89"}, {"input": "8\n-1 5 -19 4 -12 20 1 -12\n", "output": "74"}, {"input": "1\n-1000000000\n", "output": "-1000000000"}, {"input": "3\n-1 -2 -3\n", "output": "4"}, {"input": "3\n-1 -1 -1\n", "output": "1"}, {"input": "2\n-9 -3\n", "output": "6"}, {"input": "5\n-1 -1 -1 -1 -1\n", "output": "3"}, {"input": "2\n-1 -1\n", "output": "0"}, {"input": "5\n-7 -1 -1 -1 -1\n", "output": "9"}, {"input": "2\n-5 -5\n", "output": "0"}, {"input": "2\n-1 -2\n", "output": "1"}, {"input": "4\n-1 -1 -1 -1\n", "output": "2"}, {"input": "2\n-2 -2\n", "output": "0"}, {"input": "4\n-1 -2 -3 -4\n", "output": "8"}, {"input": "3\n-2 -4 -6\n", "output": "8"}, {"input": "2\n-10 -5\n", "output": "5"}, {"input": "2\n-2 -1\n", "output": "1"}, {"input": "2\n-2 -4\n", "output": "2"}, {"input": "2\n1 2\n", "output": "1"}, {"input": "2\n-4 -5\n", "output": "1"}, {"input": "2\n-2 -3\n", "output": "1"}, {"input": "2\n-1 -5\n", "output": "4"}, {"input": "5\n-1 -2 -3 -2 -1\n", "output": "7"}, {"input": "2\n-4 -5\n", "output": "1\n"}, {"input": "10\n-20 0 3 -5 -18 15 -3 -9 -7 9\n", "output": "89\n"}, {"input": "2\n-2 -2\n", "output": "0\n"}, {"input": "8\n-1 5 -19 4 -12 20 1 -12\n", "output": "74\n"}, {"input": "1\n-10\n", "output": "-10\n"}, {"input": "3\n-2 -4 -6\n", "output": "8\n"}, {"input": "2\n10 8\n", "output": "2\n"}, {"input": "9\n2 4 -4 15 1 11 15 -7 -20\n", "output": "79\n"}, {"input": "2\n-2 -3\n", "output": "1\n"}, {"input": "2\n-1 -5\n", "output": "4\n"}, {"input": "3\n-1 -2 -3\n", "output": "4\n"}, {"input": "2\n-1 -1\n", "output": "0\n"}, {"input": "1\n11\n", "output": "11\n"}, {"input": "2\n-10 -5\n", "output": "5\n"}, {"input": "2\n-1 -2\n", "output": "1\n"}, {"input": "3\n17 4 -1\n", "output": "22\n"}, {"input": "4\n20 3 -15 7\n", "output": "45\n"}, {"input": "3\n-1 -1 -1\n", "output": "1\n"}, {"input": "5\n-7 -1 -1 -1 -1\n", "output": "9\n"}, {"input": "4\n-1 -2 -3 -4\n", "output": "8\n"}, {"input": "2\n-2 -1\n", "output": "1\n"}, {"input": "4\n-1 -1 -1 -1\n", "output": "2\n"}, {"input": "5\n-14 -2 0 -19 -12\n", "output": "47\n"}, {"input": "2\n1 2\n", "output": "1\n"}, {"input": "2\n-5 -5\n", "output": "0\n"}, {"input": "2\n-2 -4\n", "output": "2\n"}, {"input": "5\n-1 -2 -3 -2 -1\n", "output": "7\n"}, {"input": "7\n-8 9 0 -10 -20 -8 3\n", "output": "58\n"}, {"input": "5\n-1 -1 -1 -1 -1\n", "output": "3\n"}, {"input": "6\n-15 2 -19 20 0 9\n", "output": "65\n"}, {"input": "2\n-9 -3\n", "output": "6\n"}, {"input": "1\n-1000000000\n", "output": "-1000000000\n"}, {"input": "2\n-2 -5\n", "output": "3\n"}, {"input": "10\n-20 0 3 -5 -27 15 -3 -9 -7 9\n", "output": "98\n"}, {"input": "2\n-1 -3\n", "output": "2\n"}, {"input": "8\n-1 5 -19 4 -8 20 1 -12\n", "output": "70\n"}, {"input": "1\n-8\n", "output": "-8\n"}, {"input": "3\n-1 -4 -6\n", "output": "9\n"}, {"input": "2\n8 8\n", "output": "0\n"}, {"input": "9\n2 4 -4 15 1 7 15 -7 -20\n", "output": "75\n"}, {"input": "3\n-1 -4 -3\n", "output": "6\n"}, {"input": "2\n-6 -5\n", "output": "1\n"}, {"input": "3\n27 4 -1\n", "output": "32\n"}, {"input": "4\n20 3 -21 7\n", "output": "51\n"}, {"input": "5\n-7 -1 0 -1 -1\n", "output": "10\n"}, {"input": "5\n-28 -2 0 -19 -12\n", "output": "61\n"}, {"input": "2\n0 -5\n", "output": "5\n"}, {"input": "2\n-2 -6\n", "output": "4\n"}, {"input": "5\n-1 -2 -3 -2 0\n", "output": "8\n"}, {"input": "7\n-8 9 0 -10 -26 -8 3\n", "output": "64\n"}, {"input": "6\n-30 2 -19 20 0 9\n", "output": "80\n"}, {"input": "2\n-17 -3\n", "output": "14\n"}, {"input": "10\n-20 1 3 -5 -27 15 -3 -9 -7 9\n", "output": "99\n"}, {"input": "8\n-1 5 -19 4 -8 0 1 -12\n", "output": "50\n"}, {"input": "1\n-4\n", "output": "-4\n"}, {"input": "9\n2 4 -4 15 1 7 15 -7 -30\n", "output": "85\n"}, {"input": "3\n24 4 -1\n", "output": "29\n"}, {"input": "4\n20 3 -7 7\n", "output": "37\n"}, {"input": "5\n-28 -2 1 -19 -12\n", "output": "62\n"}, {"input": "2\n-2 -9\n", "output": "7\n"}, {"input": "7\n-8 9 0 -13 -26 -8 3\n", "output": "67\n"}, {"input": "10\n-20 1 3 -5 -27 18 -3 -9 -7 9\n", "output": "102\n"}, {"input": "8\n-1 5 -19 4 -8 0 1 -16\n", "output": "54\n"}, {"input": "1\n-3\n", "output": "-3\n"}, {"input": "3\n0 -4 -7\n", "output": "11\n"}, {"input": "2\n28 8\n", "output": "20\n"}, {"input": "9\n2 5 -4 15 1 7 15 -7 -30\n", "output": "86\n"}, {"input": "3\n7 4 -1\n", "output": "12\n"}, {"input": "4\n20 3 -4 7\n", "output": "34\n"}, {"input": "5\n-28 -2 1 -19 -19\n", "output": "69\n"}, {"input": "2\n-2 -17\n", "output": "15\n"}, {"input": "7\n-8 9 0 -2 -26 -8 3\n", "output": "56\n"}, {"input": "6\n-30 2 -14 3 0 9\n", "output": "58\n"}, {"input": "10\n-20 1 3 -5 -27 7 -3 -9 -7 9\n", "output": "91\n"}, {"input": "2\n0 -2\n", "output": "2\n"}, {"input": "2\n-3 -5\n", "output": "2\n"}, {"input": "2\n1 -2\n", "output": "3\n"}, {"input": "1\n6\n", "output": "6\n"}, {"input": "2\n-1 0\n", "output": "1\n"}, {"input": "3\n-1 -1 -2\n", "output": "2\n"}, {"input": "4\n-1 -2 -3 -6\n", "output": "10\n"}, {"input": "2\n-2 0\n", "output": "2\n"}, {"input": "4\n-1 -1 0 -1\n", "output": "3\n"}, {"input": "2\n0 2\n", "output": "2\n"}, {"input": "5\n-1 0 -1 -1 -1\n", "output": "4\n"}, {"input": "5\n0 -1 -2 -1 -1\n", "output": "5\n"}, {"input": "4\n2 0 2 1\n", "output": "5\n"}, {"input": "2\n-2 -8\n", "output": "6\n"}, {"input": "2\n-1 -6\n", "output": "5\n"}, {"input": "3\n-1 -4 -7\n", "output": "10\n"}, {"input": "2\n14 8\n", "output": "6\n"}, {"input": "2\n1 -3\n", "output": "4\n"}, {"input": "2\n-6 -9\n", "output": "3\n"}, {"input": "3\n-2 -2 -3\n", "output": "3\n"}, {"input": "2\n1 0\n", "output": "1\n"}, {"input": "1\n10\n", "output": "10\n"}, {"input": "2\n-6 -8\n", "output": "2\n"}, {"input": "2\n-1 1\n", "output": "2\n"}, {"input": "3\n-1 -2 -2\n", "output": "3\n"}, {"input": "5\n-7 0 0 -1 -1\n", "output": "9\n"}, {"input": "4\n-1 -2 -3 -5\n", "output": "9\n"}, {"input": "2\n-2 1\n", "output": "3\n"}, {"input": "4\n-1 -1 0 -2\n", "output": "4\n"}, {"input": "2\n0 1\n", "output": "1\n"}, {"input": "2\n1 -5\n", "output": "6\n"}, {"input": "5\n-1 -3 -3 -2 0\n", "output": "9\n"}, {"input": "5\n-2 0 -1 -1 -1\n", "output": "5\n"}, {"input": "6\n-30 2 -14 20 0 9\n", "output": "75\n"}, {"input": "2\n0 -3\n", "output": "3\n"}, {"input": "5\n-1 -1 -2 -1 -1\n", "output": "4\n"}, {"input": "4\n2 1 2 0\n", "output": "5\n"}, {"input": "2\n-4 -8\n", "output": "4\n"}, {"input": "2\n0 -6\n", "output": "6\n"}, {"input": "2\n0 0\n", "output": "0\n"}, {"input": "2\n-6 -3\n", "output": "3\n"}, {"input": "3\n-2 -2 -4\n", "output": "4\n"}, {"input": "2\n0 -1\n", "output": "1\n"}, {"input": "1\n20\n", "output": "20\n"}, {"input": "2\n-6 -15\n", "output": "9\n"}, {"input": "2\n-1 2\n", "output": "3\n"}, {"input": "3\n0 -2 -2\n", "output": "4\n"}, {"input": "5\n-2 0 0 -1 -1\n", "output": "4\n"}, {"input": "4\n-1 -2 -5 -5\n", "output": "11\n"}, {"input": "2\n-1 -4\n", "output": "3\n"}, {"input": "4\n-1 -1 1 -2\n", "output": "5\n"}, {"input": "2\n1 1\n", "output": "0\n"}, {"input": "2\n2 -2\n", "output": "4\n"}, {"input": "5\n-2 -3 -3 -2 0\n", "output": "10\n"}, {"input": "5\n-3 0 -1 -1 -1\n", "output": "6\n"}, {"input": "2\n-3 -4\n", "output": "1\n"}, {"input": "5\n-1 -2 -2 -1 -1\n", "output": "5\n"}, {"input": "4\n3 1 2 0\n", "output": "6\n"}, {"input": "5\n0 -1 -1 -1 -1\n", "output": "4\n"}, {"input": "4\n2 1 2 1\n", "output": "4\n"}]}
{"statement": "Task: Given a set of n points on a number line, each with a coordinate ai and a range bi, a point within bi distance to the left of the i-th point will be removed when the i-th point is activated. Points are activated from right to left. The task is to add an additional point to the right of all existing points such that the number of points removed is minimized.\n\nInput: The first line of input from standard input contains a single integer n, representing the number of initial points. Each of the next n lines contains two integers ai and bi, indicating the position and range of the i-th point respectively. It is guaranteed that no two points will have the same position.\n\nOutput: The output to standard output should be a single integer, indicating the minimum number of points that could be removed if exactly one point is added to the right of all existing points.\n\nConstraints: The number of points n is an integer within the range [1, 100,000]. The position ai of each point is an integer within the range [0, 1,000,000], and the range bi of each point is an integer within the range [1, 1,000,000]. No two points will have the same position.", "editorial": "", "tag": "['Dynamic programming', 'Sorting']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/608/C", "sample_test_cases": [{"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7\n", "output": "4\n"}, {"input": "1\n0 1000000\n", "output": "0\n"}, {"input": "1\n1000000 1000000\n", "output": "0\n"}, {"input": "1\n0 1\n", "output": "0\n"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 10\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n5 1\n6 6\n7 7\n", "output": "4\n"}, {"input": "1\n1000000 1001000\n", "output": "0\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 9\n8 10\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n10 1\n6 6\n7 7\n", "output": "5\n"}, {"input": "7\n1 1\n2 1\n3 1\n9 1\n5 1\n11 1\n7 1\n", "output": "1\n"}, {"input": "7\n1 2\n2 1\n3 1\n4 1\n8 1\n9 1\n7 1\n", "output": "3\n"}, {"input": "1\n0 2\n", "output": "0\n"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n11 1\n7 1\n", "output": "2\n"}, {"input": "4\n1 9\n3 1\n6 1\n12 4\n", "output": "0\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n5 1\n6 8\n7 7\n", "output": "4\n"}, {"input": "1\n1 2\n", "output": "0\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 6\n8 10\n", "output": "2\n"}, {"input": "4\n1 9\n3 1\n6 2\n12 4\n", "output": "0\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n5 1\n6 8\n7 2\n", "output": "4\n"}, {"input": "11\n110 90\n100 70\n90 4\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 6\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n9 1\n7 1\n", "output": "2\n"}, {"input": "4\n1 9\n5 1\n6 1\n7 4\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n5 1\n6 9\n7 7\n", "output": "4\n"}, {"input": "11\n110 90\n100 70\n90 10\n80 15\n70 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "5\n0 1\n3 1\n5 1\n7 9\n8 10\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n6 1\n5 1\n11 1\n7 1\n", "output": "2\n"}, {"input": "4\n1 9\n3 1\n6 1\n16 4\n", "output": "0\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n8 1\n6 8\n7 7\n", "output": "5\n"}, {"input": "1\n0 4\n", "output": "0\n"}, {"input": "4\n1 9\n3 1\n6 1\n12 1\n", "output": "0\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n10 1\n9 6\n7 7\n", "output": "5\n"}, {"input": "11\n110 90\n100 70\n65 4\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "7\n1 2\n2 1\n3 1\n4 1\n5 1\n9 1\n7 1\n", "output": "2\n"}, {"input": "4\n1 16\n5 1\n6 1\n7 4\n", "output": "2\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n5 1\n6 9\n10 7\n", "output": "4\n"}, {"input": "11\n110 90\n100 70\n90 10\n155 15\n70 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "4\n1 9\n2 1\n6 1\n16 4\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n8 2\n6 8\n7 7\n", "output": "4\n"}, {"input": "1\n1 1\n", "output": "0\n"}, {"input": "4\n1 9\n3 1\n6 1\n12 2\n", "output": "0\n"}, {"input": "11\n110 90\n100 70\n65 4\n80 10\n121 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 90\n100 70\n90 10\n155 15\n130 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "4\n1 4\n2 1\n6 1\n16 4\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n10 2\n6 8\n7 7\n", "output": "5\n"}, {"input": "1\n2 1\n", "output": "0\n"}, {"input": "4\n1 9\n4 1\n6 1\n12 2\n", "output": "0\n"}, {"input": "11\n110 90\n100 70\n75 4\n80 10\n121 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "5\n"}, {"input": "11\n110 90\n100 70\n90 10\n8 15\n130 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "3\n"}, {"input": "4\n1 1\n2 1\n6 1\n16 4\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n10 1\n6 8\n7 7\n", "output": "5\n"}, {"input": "1\n2 2\n", "output": "0\n"}, {"input": "4\n1 9\n4 1\n6 1\n14 2\n", "output": "0\n"}, {"input": "11\n110 90\n000 70\n75 4\n80 10\n121 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 16\n100 70\n90 10\n8 15\n130 1\n60 1\n71 10\n40 1\n30 1\n10 1\n20 1\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 2\n10 1\n6 10\n7 7\n", "output": "5\n"}, {"input": "1\n4 2\n", "output": "0\n"}, {"input": "4\n1 9\n4 1\n6 2\n14 2\n", "output": "1\n"}, {"input": "11\n110 90\n000 70\n75 4\n80 10\n121 1\n60 1\n50 10\n40 1\n31 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 16\n100 70\n90 10\n8 15\n130 1\n60 1\n71 10\n40 1\n30 2\n10 1\n20 1\n", "output": "1\n"}, {"input": "1\n4 4\n", "output": "0\n"}, {"input": "4\n1 4\n4 1\n6 2\n14 2\n", "output": "1\n"}, {"input": "11\n110 90\n000 70\n75 4\n79 10\n121 1\n60 1\n50 10\n40 1\n31 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 16\n100 70\n18 10\n8 15\n130 1\n60 1\n71 10\n40 1\n30 2\n10 1\n20 1\n", "output": "3\n"}, {"input": "1\n4 3\n", "output": "0\n"}, {"input": "4\n1 5\n4 1\n6 2\n14 2\n", "output": "1\n"}, {"input": "11\n110 90\n000 70\n49 4\n79 10\n121 1\n60 1\n50 10\n40 1\n31 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 16\n100 70\n18 10\n8 15\n130 1\n60 1\n71 10\n40 1\n30 2\n10 1\n12 1\n", "output": "4\n"}, {"input": "1\n3 3\n", "output": "0\n"}, {"input": "4\n1 5\n4 1\n6 1\n14 2\n", "output": "0\n"}, {"input": "11\n110 90\n000 35\n49 4\n79 10\n121 1\n60 1\n50 10\n40 1\n31 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "11\n110 16\n100 70\n18 10\n7 15\n130 1\n60 1\n71 10\n40 1\n30 2\n10 1\n12 1\n", "output": "3\n"}, {"input": "1\n3 6\n", "output": "0\n"}, {"input": "4\n1 5\n8 1\n6 1\n14 2\n", "output": "0\n"}, {"input": "11\n110 47\n000 35\n49 4\n79 10\n121 1\n60 1\n50 10\n40 1\n31 1\n10 1\n20 1\n", "output": "3\n"}, {"input": "11\n110 16\n100 70\n18 10\n7 15\n130 1\n60 1\n71 10\n40 1\n58 2\n10 1\n12 1\n", "output": "3\n"}, {"input": "1\n3 7\n", "output": "0\n"}, {"input": "4\n1 7\n8 1\n6 1\n14 2\n", "output": "0\n"}, {"input": "11\n110 16\n100 70\n18 10\n7 15\n39 1\n60 1\n71 10\n40 1\n58 2\n10 1\n12 1\n", "output": "4\n"}, {"input": "1\n3 9\n", "output": "0\n"}, {"input": "4\n1 7\n8 1\n6 2\n14 2\n", "output": "0\n"}, {"input": "11\n110 16\n100 70\n18 18\n7 15\n39 1\n60 1\n71 10\n40 1\n58 2\n10 1\n12 1\n", "output": "5\n"}, {"input": "1\n3 2\n", "output": "0\n"}, {"input": "4\n1 7\n12 1\n6 1\n14 2\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n", "output": "3\n"}, {"input": "4\n1 9\n3 1\n6 1\n7 4\n", "output": "1\n"}]}
{"statement": "Task: Given an integer n and a binary string s of length n, determine all possible integers x from 1 to $2^n$ that can be the maximum in a sequence p of length $2^n$, where p is a permutation of integers from 1 to $2^n$. The sequence p is constructed in the following way: for each i-th bit in the string s (starting from 0), if the bit is 0, then in the i-th phase, $2^{n-i}$ pairs of consecutive elements in the sequence are compared and the smaller one is kept, if the bit is 1, the larger one is kept. This process is repeated until only one element remains in the sequence.\n\nInput: The first line of input contains one integer n ($1 \\le n \\le 18$). The second line contains a binary string s of length n.\n\nOutput: The output should consist of a sequence of integers in ascending order. Each integer represents a possible maximum value in the sequence p after all operations are performed according to the binary string s.\n\nConstraints: n, the length of the binary string, is between 1 and 18 inclusive. The binary string s consists only of the characters 0 and 1.", "editorial": "", "tag": "['Constructive algorithms', 'Combinatorics', 'Greedy algorithms', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1767/D", "sample_test_cases": [{"input": "3\n101\n", "output": "4 5 6 7 "}, {"input": "1\n1\n", "output": "2 "}, {"input": "2\n01\n", "output": "2 3 "}, {"input": "2\n00\n", "output": "1 "}, {"input": "1\n0\n", "output": "1 "}, {"input": "2\n11\n", "output": "4 "}, {"input": "3\n000\n", "output": "1 "}, {"input": "3\n010\n", "output": "2 3 4 5 "}, {"input": "3\n111\n", "output": "8 "}, {"input": "4\n0000\n", "output": "1 "}, {"input": "4\n0100\n", "output": "2 3 4 5 6 7 8 9 "}, {"input": "4\n0110\n", "output": "4 5 6 7 8 9 10 11 12 13 "}, {"input": "4\n1011\n", "output": "8 9 10 11 12 13 14 15 "}, {"input": "4\n1111\n", "output": "16 "}, {"input": "5\n10110\n", "output": "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 "}, {"input": "5\n01100\n", "output": "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 "}, {"input": "6\n111000\n", "output": "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 "}, {"input": "6\n101111\n", "output": "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 "}, {"input": "7\n1011011\n", "output": "32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 "}, {"input": "18\n000000000000000000\n", "output": "1 "}, {"input": "18\n111111111111111111\n", "output": "262144 "}]}
{"statement": "Task: Given a graph G represented as a tree with n vertices and a positive integer k, calculate the number of distinct pairs of vertices in G that have a path of length k between them. The length of a path is defined as the number of edges in the path.\n\nInput: The input from standard input begins with two integers n and k (1 \u2264 n \u2264 50000, 1 \u2264 k \u2264 500) representing the number of vertices in the tree and the required path length between vertices respectively. The following n - 1 lines each contain two integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) indicating that there is an edge between vertices ai and bi in the tree. It is guaranteed that all edges are unique.\n\nOutput: The output to standard output should be a single integer, indicating the number of distinct pairs of vertices in the tree that have a path of exactly length k between them.\n\nConstraints: The input integers n and k satisfy 1 \u2264 n \u2264 50000 and 1 \u2264 k \u2264 500. For each edge, the vertices ai and bi satisfy 1 \u2264 ai, bi \u2264 n and ai \u2260 bi. All edges are unique.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/161/D", "sample_test_cases": [{"input": "50 4\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 24\n49 24\n50 25\n", "output": "                                                             124\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "                                                              84\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "                                                               9\n"}, {"input": "50 3\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "output": "                                                              47\n"}, {"input": "10 3\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "                                                               8\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "                                                              10\n"}, {"input": "10 20\n2 1\n3 2\n4 1\n5 3\n6 4\n7 1\n8 2\n9 7\n10 2\n", "output": "                                                               0\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 11\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "84\n"}, {"input": "10 6\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "5\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 1\n10 6\n", "output": "12\n"}, {"input": "5 3\n1 2\n2 3\n3 4\n1 5\n", "output": "2\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n5 3\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "9\n"}, {"input": "10 20\n2 1\n3 2\n4 1\n5 3\n6 4\n7 1\n8 1\n9 7\n10 2\n", "output": "0\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 4\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "82\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 2\n9 2\n10 6\n", "output": "10\n"}, {"input": "10 6\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 10\n9 2\n10 6\n", "output": "4\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 4\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 28\n47 44\n48 46\n49 46\n50 48\n", "output": "90\n"}, {"input": "10 6\n2 1\n3 1\n4 3\n5 4\n6 1\n7 1\n8 10\n9 2\n10 6\n", "output": "1\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 16\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "96\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 19\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 11\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "88\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 6\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "83\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 26\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 19\n", "output": "86\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 4\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 10\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 28\n47 44\n48 46\n49 46\n50 48\n", "output": "99\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 12\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "94\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 49\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "81\n"}, {"input": "10 2\n2 1\n3 2\n4 3\n5 4\n6 5\n7 1\n8 2\n9 2\n10 6\n", "output": "11\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 2\n16 14\n17 6\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "80\n"}, {"input": "50 3\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 10\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 24\n49 24\n50 25\n", "output": "93\n"}, {"input": "50 4\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 8\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 24\n49 24\n50 25\n", "output": "124\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 3\n9 1\n10 6\n", "output": "12\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "84\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 26\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "84\n"}, {"input": "10 1\n2 1\n3 1\n4 2\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "9\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 4\n6 7\n7 1\n8 3\n9 1\n10 6\n", "output": "12\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n5 3\n6 5\n7 1\n8 6\n9 2\n10 1\n", "output": "9\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 4\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "82\n"}, {"input": "10 3\n2 1\n3 1\n4 3\n5 2\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "10\n"}, {"input": "5 6\n1 2\n2 3\n3 4\n4 5\n", "output": "0\n"}, {"input": "10 20\n2 1\n3 2\n4 1\n5 3\n6 3\n7 1\n8 1\n9 7\n10 2\n", "output": "0\n"}, {"input": "5 6\n1 2\n2 3\n3 4\n3 5\n", "output": "0\n"}, {"input": "50 3\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 24\n49 24\n50 25\n", "output": "90\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n8 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "9\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n5 3\n8 5\n7 1\n8 6\n9 2\n10 6\n", "output": "9\n"}, {"input": "10 20\n2 1\n3 2\n4 1\n5 3\n6 1\n7 1\n8 1\n9 7\n10 2\n", "output": "0\n"}, {"input": "10 3\n2 1\n3 1\n4 3\n5 2\n6 5\n7 1\n8 6\n9 1\n10 6\n", "output": "9\n"}, {"input": "50 3\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 46\n49 24\n50 25\n", "output": "90\n"}, {"input": "10 6\n2 1\n3 1\n4 3\n5 4\n6 5\n7 2\n8 6\n9 2\n10 6\n", "output": "4\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 14\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 4\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "81\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 16\n31 28\n32 30\n33 9\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "94\n"}, {"input": "10 3\n2 1\n3 1\n4 1\n5 2\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "10\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n8 4\n6 5\n7 1\n8 6\n9 3\n10 6\n", "output": "9\n"}, {"input": "10 2\n2 1\n3 1\n4 3\n5 3\n8 5\n7 1\n8 6\n9 2\n10 6\n", "output": "10\n"}, {"input": "10 20\n3 1\n3 2\n4 1\n5 3\n6 1\n7 1\n8 1\n9 7\n10 2\n", "output": "0\n"}, {"input": "50 3\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 6\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 46\n49 24\n50 25\n", "output": "94\n"}, {"input": "10 10\n2 1\n3 1\n4 3\n5 4\n6 5\n7 2\n8 6\n9 2\n10 6\n", "output": "0\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 37\n32 30\n33 49\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 36\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "80\n"}, {"input": "10 3\n2 1\n3 1\n4 1\n5 2\n6 5\n7 1\n8 6\n9 2\n10 3\n", "output": "12\n"}, {"input": "10 10\n2 1\n3 1\n4 3\n5 4\n10 5\n7 2\n8 6\n9 2\n10 6\n", "output": "0\n"}, {"input": "10 10\n2 1\n3 2\n4 1\n5 3\n6 4\n7 1\n8 2\n9 7\n10 2\n", "output": "0\n"}, {"input": "5 2\n1 2\n2 3\n3 4\n2 5\n", "output": "                                                               4\n"}, {"input": "5 3\n1 2\n2 3\n3 4\n4 5\n", "output": "                                                               2\n"}]}
