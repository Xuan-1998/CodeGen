{"statement": "Task: Given an integer N, find the first N Fibonacci numbers. The first two numbers of the series are 1 and 1.\n\nInput: The input consists of a single integer N, representing the number of Fibonacci numbers to be generated. The input is provided through standard input.\n\nOutput: The output should be a list of N integers representing the first N Fibonacci numbers. The output should be printed to standard output.\n\nConstraints: The input integer N is constrained to be between 1 and 84, inclusive. \n\nMathematical Concepts: Fibonacci sequence, integers, series, recursion.\n\nComputer Science Concepts: Standard input/output, time complexity, auxiliary space, function implementation.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/print-first-n-fibonacci-numbers1002/1", "sample_test_cases": [{"input": "N = 5", "output": "1 1 2 3 5"}, {"input": "N = 7", "output": "1 1 2 3 5 8 13"}]}
{"statement": "Task: Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements.\n\nInput: The input consists of two arrays A and B of positive integers of size N and M, where N >= M. The input arrives from standard input.\n\nOutput: The output is a single integer representing the maximum dot product of the two arrays after inserting zeros in the second array.\n\nConstraints: 1 \u2264 M \u2264 N \u2264 10^3 and 1 \u2264 A[i], B[i] \u2264 10^3.\n\nExplanation: Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements. The dot product of two arrays A and B of size N is A[0]*B[0] + A[1]*B[1]+....A[N]*B[N]. The function maxDotProduct() takes N, M, array A and B as input parameters and returns the maximum value. The expected time complexity is O(N*M) and the expected auxiliary space is O(N*M).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximize-dot-product2649/1", "sample_test_cases": [{"input": "N = 5, A[] = {2, 3, 1, 7, 8} \n       M = 3, B[] = {3, 6, 7}", "output": "107"}, {"input": "N = 3, A[] = {1, 2, 3}\n       M = 1, B[] = {4}", "output": "12"}]}
{"statement": "Task: Given an array A[] of size N, find the length of the longest subsequence such that difference between adjacent elements is one.\n\nInput: The first line of input contains an integer N, which represents the size of the array. The second line contains N space-separated integers, which represent the elements of the array. The input is provided through standard input.\n\nOutput: A single integer, which represents the length of the longest subsequence where the difference between adjacent elements is one.\n\nConstraints: The input array can have at most 1000 elements, and each element can be between 1 and 1000 (inclusive).\n\nMathematical Concepts: Array, Subsequence, Adjacent Elements, Length, Difference.\n\nComputer Science Concepts: Input/Output, Standard Input, Integer, Space-separated, Constraints.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-subsequence-such-that-difference-between-adjacents-is-one4724/1", "sample_test_cases": [{"input": "N = 7\r\nA[] = {10, 9, 4, 5, 4, 8, 6}", "output": "3"}, {"input": "N = 5\r\nA[] = {1, 2, 3, 4, 5}", "output": "5"}]}
{"statement": "Task: Given a binary string st and a positive integer k, find the length of the longest continuous sequence of '0' after repeating the given binary string k times.\n\nInput: The input consists of two integers: k and the binary string st. The input is read from standard input. The binary string st has at most 10^5 characters.\n\nOutput: The output should be a single integer representing the length of the longest continuous sequence of '0' after repeating the given binary string k times.\n\nConstraints: The length of the binary string st is at most 10^5 and the value of k is at most 10^5.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/lcs-of-0-k-repeated-string5642/1", "sample_test_cases": [{"input": "k = 3\nst = 100001", "output": "4"}, {"input": "k = 4\nst = 000", "output": "12"}]}
{"statement": "Task: Given a directed acyclic graph (DAG) with n nodes labeled from 0 to n-1 and a set of directed edges, find the number of possible paths from a source node s to a destination node d.\n\nInput: The input consists of four integers n, s, d, and e, followed by e pairs of integers representing edges in the DAG. The first integer n represents the number of nodes in the DAG, labeled from 0 to n-1. The second integer s represents the source node, and the third integer d represents the destination node. The fourth integer e represents the number of edges in the DAG. The following e lines contain pairs of integers u and v, representing directed edges from node u to node v. The input is received from standard input.\n\nOutput: The output consists of a single integer representing the number of possible paths from the source node s to the destination node d in the given DAG. The output is returned to standard output.\n\nConstraints: The number of nodes n is between 1 and 15. The source node s and the destination node d are between 0 and n-1. The number of edges e is between 0 and n*(n-1)/2. The time complexity of the solution should be O(2^n), and the space complexity should be O(n+e), where e is the number of edges in the DAG.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Data structures', 'Graph traversal']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-the-paths4332/1", "sample_test_cases": [{"input": "edges = {{0,1},{0,3},{1,2},{3,2}}, \r\nn = 4, s = 0, d = 2", "output": "2"}]}
