{"statement": "Task: Given a string s consisting of uppercase Latin letters, determine if it contains two non-overlapping substrings \"AB\" and \"BA\". \n\nInput: The input is a single line containing the string s. \n\nOutput: The output should be \"YES\" if the string contains the required substrings, and \"NO\" otherwise. \n\nConstraints: The length of s is between 1 and 10^5. \n\nNote: The problem can be solved by checking if either \"AB\" or \"BA\" appears in the string s, and then checking if the other substring appears in the remaining part of the string. The input is received from standard input.", "editorial": "", "tag": "['String algorithms', 'Implementation', 'Greedy algorithms', 'Complete search', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/550/A", "sample_test_cases": [{"input": "ABA\n", "output": "NO\n"}, {"input": "BACFAB\n", "output": "YES\n"}, {"input": "AXBYBXA\n", "output": "NO\n"}, {"input": "ABABAB\n", "output": "YES\n"}, {"input": "BBBBBBBBBB\n", "output": "NO\n"}, {"input": "ABBA\n", "output": "YES\n"}, {"input": "ABAXXXAB\n", "output": "YES\n"}, {"input": "TESTABAXXABTEST\n", "output": "YES\n"}, {"input": "A\n", "output": "NO\n"}, {"input": "B\n", "output": "NO\n"}, {"input": "X\n", "output": "NO\n"}, {"input": "BA\n", "output": "NO\n"}, {"input": "AB\n", "output": "NO\n"}, {"input": "AA\n", "output": "NO\n"}, {"input": "BB\n", "output": "NO\n"}]}
{"statement": "Task: Given a sequence a of n integers, find the maximum number of points that can be earned by deleting elements from the sequence. In each step, the player can choose an element and delete it along with all elements equal to ak + 1 and ak - 1.\n\nInput: The input consists of two lines. The first line contains an integer n that represents the number of integers in the sequence. The second line contains n integers a1, a2, ..., an that represent the sequence. Input is provided through standard input.\n\nOutput: The output is a single integer that represents the maximum number of points that can be earned by the player.\n\nConstraints: The input sequence can have at most 105 integers, and each integer ai is between 1 and 105.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/456/C", "sample_test_cases": [{"input": "5\n3 3 4 5 4\n", "output": "11\n"}, {"input": "10\n8 9 6 5 6 4 10 9 1 4\n", "output": "39\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "296\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 7 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "328\n"}, {"input": "10\n1 7 1 4 9 10 8 2 9 9\n", "output": "40\n"}, {"input": "2\n1 2\n\nSAMPLE", "output": "2\n"}, {"input": "100\n6 1 5 7 10 10 2 7 3 7 2 10 7 6 3 5 5 5 3 7 2 4 2 7 7 4 2 8 2 10 4 7 9 1 1 7 9 7 1 10 10 9 5 6 10 1 7 5 8 1 1 5 3 10 2 4 3 5 2 7 4 9 5 10 1 3 7 6 6 9 3 6 6 10 1 10 6 1 10 3 4 1 7 9 2 7 8 9 3 3 2 4 6 6 1 2 9 4 1 2\n", "output": "313\n"}, {"input": "10\n10 5 8 9 5 6 8 7 2 8\n", "output": "46\n"}, {"input": "100\n4 8 10 1 8 8 8 1 10 3 1 8 6 8 6 1 10 3 3 3 3 7 2 1 1 6 10 1 7 9 8 10 3 8 6 2 1 6 5 6 10 8 9 7 4 3 10 5 3 9 10 5 10 8 8 5 7 8 9 5 3 9 9 2 7 8 1 10 4 9 2 8 10 10 5 8 5 1 7 3 4 5 2 5 9 3 2 5 6 2 3 10 1 5 9 6 10 4 10 8\n", "output": "380\n"}, {"input": "5\n5 3 5 3 4\n", "output": "16\n"}, {"input": "100\n2 10 9 1 2 6 7 2 2 8 9 9 9 5 6 2 5 1 1 10 7 4 5 5 8 1 9 4 10 1 9 3 1 8 4 10 8 8 2 4 6 5 1 4 2 2 1 2 8 5 3 9 4 10 10 7 8 6 1 8 2 6 7 1 6 7 3 10 10 3 7 7 6 9 6 8 8 10 4 6 4 3 3 3 2 3 10 6 8 5 5 10 3 7 3 1 1 1 5 5\n", "output": "312\n"}, {"input": "1\n100000\n", "output": "100000\n"}, {"input": "100\n5 6 10 7 1 7 10 1 9 1 5 1 4 1 3 3 7 9 1 6 1 6 5 7 1 6 3 1 3 6 3 8 2 4 1 5 2 10 7 3 10 4 10 1 5 4 2 9 7 9 5 7 10 4 1 4 8 9 3 1 3 7 7 4 3 7 7 10 6 9 5 5 6 5 3 9 8 8 5 5 4 10 9 4 10 4 1 8 3 5 4 10 9 3 10 4 10 7 10 9\n", "output": "324\n"}, {"input": "100\n10 5 8 4 4 4 1 4 5 8 3 10 2 4 1 10 8 1 1 6 8 4 2 9 1 3 1 7 7 9 3 5 5 8 6 9 9 4 8 1 3 3 2 6 1 5 4 5 3 5 5 6 7 5 7 9 3 5 4 9 2 6 8 1 1 7 7 3 8 9 8 7 3 2 4 1 6 1 3 9 4 2 2 8 5 10 1 8 8 5 1 5 6 9 4 5 6 5 10 2\n", "output": "265\n"}, {"input": "10\n1 1 1 1 1 1 2 3 4 4\n", "output": "14\n"}]}
{"statement": "Task: Given a set of integers, find all distinct sums that can be generated from the subsets of the given set.\n\nInput: The input consists of a single line containing an integer N, followed by N integers a1, a2, ..., aN, representing the set of integers. It is guaranteed that 1 <= N <= 100 and 1 <= ai <= 100.\n\nOutput: Output a single line containing a space-separated list of integers, representing the distinct sums that can be generated from the subsets of the given set, in increasing order.\n\nConstraints: The time complexity of the solution should be O(n * sum), where sum is the sum of all elements of the given set. The space complexity of the solution should be O(n * sum).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/find-all-distinct-subset-or-subsequence-sums4424/1", "sample_test_cases": [{"input": "nums = {1,2}", "output": "{0,1,2,3}"}, {"input": "nums = {1,2,3}", "output": "{0,1,2,3,4,5,6}"}]}
{"statement": "Task: Given a directed graph with $n$ vertices and $m$ edges, and a fixed path from vertex $s$ to vertex $t$, determine the minimum and maximum number of times the shortest path from the current vertex to $t$ needs to be recomputed. At each vertex, the system shows the shortest path from the current vertex to $t$. If the driver chooses to follow the recommended path, the system maintains the path. Otherwise, the system recomputes the shortest path from the current vertex to $t$.\n\nInput: The first line of input contains two integers $n$ and $m$ ($2 \\leq n \\leq m \\leq 2 \\cdot 10^5$), representing the number of vertices and edges in the graph, respectively. The next $m$ lines contain two integers $u$ and $v$ ($1 \\leq u, v \\leq n$, $u \\neq v$) representing a directed edge from vertex $u$ to vertex $v$. The next line contains an integer $k$ ($2 \\leq k \\leq n$) representing the number of vertices in the fixed path from $s$ to $t$. The last line contains $k$ integers $p_1, p_2, \\dots, p_k$ ($1 \\leq p_i \\leq n$), representing the vertices in the fixed path from $s$ to $t$ in order.\n\nOutput: The output should consist of a single line containing two integers, the minimum and maximum number of times the shortest path from the current vertex to $t$ needs to be recomputed.\n\nConstraints: All vertices in the fixed path are distinct and there exists a directed edge between consecutive vertices in the path. The sum of $n + m$ over all test cases is at most $10^6$.", "editorial": "", "tag": "['dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1319/D", "sample_test_cases": [{"input": "6 9\n1 5\n5 4\n1 2\n2 3\n3 4\n4 1\n2 6\n6 4\n4 2\n4\n1 2 3 4\n", "output": "1 2\n"}, {"input": "7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n7\n1 2 3 4 5 6 7\n", "output": "0 0\n"}, {"input": "8 13\n8 7\n8 6\n7 5\n7 4\n6 5\n6 4\n5 3\n5 2\n4 3\n4 2\n3 1\n2 1\n1 8\n5\n8 7 5 2 1\n", "output": "0 3\n"}, {"input": "20 50\n2 3\n18 10\n11 6\n11 1\n18 17\n18 7\n15 20\n6 11\n11 2\n8 2\n14 2\n20 1\n1 19\n17 2\n5 17\n15 17\n19 12\n16 9\n12 4\n19 2\n2 19\n14 3\n6 5\n20 19\n2 16\n1 12\n2 12\n9 2\n13 18\n2 13\n10 4\n12 8\n12 3\n17 5\n18 12\n18 11\n2 17\n6 20\n19 20\n7 9\n3 2\n19 15\n10 20\n13 12\n4 3\n18 15\n13 9\n2 11\n19 14\n16 11\n8\n18 10 4 3 2 19 12 8\n", "output": "3 3\n"}, {"input": "20 50\n20 3\n5 16\n1 3\n10 11\n10 15\n15 9\n20 9\n14 6\n16 5\n13 4\n11 5\n3 20\n13 17\n11 8\n11 6\n12 14\n16 18\n17 13\n18 7\n3 1\n8 10\n17 15\n7 2\n9 13\n5 11\n6 1\n2 16\n8 18\n10 8\n4 13\n9 15\n14 12\n1 6\n9 20\n7 18\n6 14\n7 6\n18 16\n2 7\n3 11\n15 17\n3 12\n14 10\n4 14\n19 4\n11 10\n4 19\n8 12\n17 8\n12 8\n16\n7 2 16 5 11 8 10 15 9 13 4 14 6 1 3 20\n", "output": "5 8\n"}, {"input": "20 50\n18 11\n17 13\n19 6\n13 18\n20 9\n10 20\n6 13\n13 9\n2 1\n17 14\n11 20\n8 7\n14 9\n10 14\n8 16\n11 12\n1 3\n4 7\n7 15\n19 2\n9 14\n15 17\n14 7\n4 6\n20 19\n1 19\n13 4\n15 8\n6 9\n6 17\n1 20\n3 1\n16 15\n19 8\n15 14\n7 14\n16 18\n16 5\n5 9\n6 4\n11 16\n12 14\n3 17\n2 13\n5 4\n12 10\n18 15\n5 1\n6 14\n1 13\n12\n10 20 9 14 7 15 17 13 18 11 16 5\n", "output": "2 2\n"}, {"input": "20 50\n3 12\n5 18\n17 6\n19 12\n10 9\n18 12\n12 16\n11 15\n2 12\n12 18\n1 12\n20 3\n16 12\n6 12\n10 12\n4 12\n12 1\n5 12\n9 6\n13 12\n17 1\n10 5\n20 12\n11 12\n7 12\n20 16\n6 2\n13 14\n9 4\n16 7\n1 16\n5 13\n6 17\n9 2\n19 16\n18 11\n20 19\n12 20\n20 13\n14 17\n14 12\n8 12\n10 15\n15 12\n17 12\n2 8\n5 8\n9 12\n12 10\n12 9\n4\n18 12 20 19\n", "output": "0 0\n"}, {"input": "2 2\n1 2\n2 1\n2\n1 2\n", "output": "0 0\n"}]}
{"statement": "Task: Given two strings str1 and str2, both of length N, find the maximum number of common non-overlapping substrings between them. A substring is a contiguous sequence of characters within a string.\n\nInput: The input consists of two strings str1 and str2, each of length N, which arrive from standard input.\n\nOutput: The output is a single integer representing the maximum number of common non-overlapping substrings between str1 and str2.\n\nConstraints: 1 \u2264 N \u2264 100, where N is the length of each input string. Each character in the strings belongs to one of the 3 categories represented by * or # or @.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/a4f19ea532cee502aabec77c07e0d0a45b76ecf9/1", "sample_test_cases": [{"input": "str1 = \"*@#*\" \r\nstr2 = \"*#\"", "output": "2"}, {"input": "str1 = \"***\"\r\nstr2 = \"##\"", "output": "0"}]}
{"statement": "Task: Given a square grid of integers, find the minimum sum of a falling path with non-zero shifts. A falling path is a choice of one element from each row of the grid, such that no two elements chosen in adjacent rows are in the same column.\n\nInput: The input consists of a square grid of integers, where each row has the same number of elements. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the minimum sum of a falling path with non-zero shifts.\n\nConstraints: The length of each row of the grid is between 1 and 200, and each element of the grid is an integer between -99 and 99.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/minimum-falling-path-sum-ii/", "sample_test_cases": [{"input": [[[1, 2, 3], [6, 6, 7], [7, 8, 9], [], []]], "output": 13}]}
{"statement": "Task: Given the results of a tournament with $2^n$ teams, where each team has a skill level, determine all the winning teams, i.e., teams that can win the tournament.\n\nInput: The input consists of an integer $n$ and a binary string $s$ of length $n$, where $s_i$ denotes the result of the $i$-th phase of the tournament.\n\nOutput: The output should consist of all the winning teams in ascending order.\n\nConstraints: $1 \\leq n \\leq 18$.\n\nMathematical concepts: binary strings, permutations, skill levels, tournament, winning teams.\n\nComputer science concepts: standard input, arrays, sorting.", "editorial": "", "tag": "['Constructive algorithms', 'Combinatorics', 'Greedy algorithms', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1767/D", "sample_test_cases": [{"input": "3\n101\n", "output": "4 5 6 7 "}, {"input": "1\n1\n", "output": "2 "}, {"input": "2\n01\n", "output": "2 3 "}, {"input": "2\n00\n", "output": "1 "}, {"input": "1\n0\n", "output": "1 "}, {"input": "2\n11\n", "output": "4 "}, {"input": "3\n000\n", "output": "1 "}, {"input": "3\n010\n", "output": "2 3 4 5 "}, {"input": "3\n111\n", "output": "8 "}, {"input": "4\n0000\n", "output": "1 "}, {"input": "4\n0100\n", "output": "2 3 4 5 6 7 8 9 "}, {"input": "4\n0110\n", "output": "4 5 6 7 8 9 10 11 12 13 "}, {"input": "4\n1011\n", "output": "8 9 10 11 12 13 14 15 "}, {"input": "4\n1111\n", "output": "16 "}, {"input": "5\n10110\n", "output": "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 "}]}
{"statement": "Task: Given two strings S and T, find the length of the shortest subsequence in S which is not a subsequence in T. If no such subsequence is possible, return -1.\n\nInput: The input consists of two strings S and T, each of length at most 500. The input is received from standard input.\n\nOutput: The output is a single integer representing the length of the shortest uncommon subsequence. The output should be printed to standard output.\n\nConstraints: The length of S and T is at most 500.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/shortest-uncommon-subsequence5746/1", "sample_test_cases": [{"input": "S = \"babab\"\r\nT = \"babba\"", "output": "3"}, {"input": "S = \"babhi\"\r\nT = \"babij\"", "output": "1"}]}
{"statement": "Task: Given a rectangle of size n x m, find the minimum number of integer-sided squares that tile the rectangle.\n\nInput: The input consists of two integers n and m, representing the dimensions of the rectangle. The input is provided through standard input.\n\nOutput: The output should be a single integer, representing the minimum number of integer-sided squares required to tile the given rectangle.\n\nConstraints: The input constraints are that n and m are integers between 1 and 13 inclusive.", "editorial": "", "tag": "['Dynamic programming', 'Complete search']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/", "sample_test_cases": [{"input": [2, 3], "output": 3}]}
{"statement": "Task: Given an N x N matrix, where each cell contains a non-negative integer representing the number of coins in that cell, count the number of paths from the top left corner to the bottom right corner that collect exactly K coins, where K is a non-negative integer. From any cell (i, j), you can only move to either (i+1, j) or (i, j+1).\n\nInput: The input consists of three integers: K, N, and a 2D matrix arr[][] of size N x N, where each element represents the number of coins in that cell. The input is provided through standard input.\n\nOutput: The function should return an integer representing the number of possible paths that collect exactly K coins.\n\nConstraints: 1 <= K < 100, 1 <= N < 100, and 1 <= arr_{ij} <= 200. The time complexity of the solution should be O(n*n*k) and the auxiliary space used should be O(n*n*k).", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures', 'Complete search']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/number-of-paths-in-a-matrix-with-k-coins2728/1", "sample_test_cases": [{"input": "K = 12, N = 3\r\narr[] = [[1, 2, 3], \r\n         [4, 6, 5], \r\n         [3, 2, 1]]", "output": "2"}, {"input": "K = 16, N = 3\r\narr[] = [[1, 2, 3], \r\n         [4, 6, 5], \r\n         [9, 8, 7]]", "output": "0"}]}
{"statement": "Task: Given an integer array arr and an integer k, partition the array into contiguous subarrays of length at most k. After partitioning, change the values of each subarray to become the maximum value of that subarray. Return the largest sum of the given array after partitioning.\n\nInput: The input consists of an integer array arr of length n and an integer k, which arrives from standard input.\n\nOutput: The output should be an integer, representing the largest sum of the given array after partitioning.\n\nConstraints: The length of the input array is at most 500, and each element of the array is an integer between 0 and 10^9. The value of k is between 1 and the length of the array.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/partition-array-for-maximum-sum/", "sample_test_cases": [{"input": [[1, 15, 7, 9, 2, 5, 10], 3], "output": 84}]}
{"statement": "Task: Given two positive binary integers $\\boldsymbol{a}$ and $\\boldsymbol{b}$, find the sum modulo $10^9+7$ of the result of performing the exclusive OR operation on $\\boldsymbol{a}$ and the binary shift to the left operation on $\\boldsymbol{b}$ for all values of $\\boldsymbol{i}$ from $0$ to $314159$.\n\nInput: The input consists of two lines, each containing a binary number $\\boldsymbol{a}$ and $\\boldsymbol{b}$ respectively. The input is provided through standard input.\n\nOutput: Output a single integer, which is the required sum modulo $10^9+7$.\n\nConstraints: The input numbers $\\boldsymbol{a}$ and $\\boldsymbol{b}$ are positive integers in binary representation and do not contain leading zeros. The values of $\\boldsymbol{a}$ and $\\boldsymbol{b}$ are less than $2^{10^5}$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/xor-and-sum/problem", "sample_test_cases": [{"input": "10\n1010\n", "output": "489429555\n"}]}
{"statement": "Task: Given a set of m distinct positive integers and a value \u2018N\u2019, count the total number of ways we can form \u2018N\u2019 by adding the array elements. Repetitions and different arrangements are allowed. Output the answer modulo 10^{9}+7.\n\nInput: The input consists of three integers: m, N, and an array of m distinct positive integers. The input is read from standard input. The integers m and N are constrained by 1 <= m,N <= 10^3.\n\nOutput: The output should be a single integer representing the total number of ways to form N by adding the elements of the array. The output should be printed to standard output.\n\nConstraints: The integers m and N are constrained by 1 <= m,N <= 10^3.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/ways-to-sum-to-n5759/1", "sample_test_cases": [{"input": "m = 3 , N = 7\nArr[] = {1,5,6}", "output": "6"}, {"input": "m = 3 , N = 3\nArr[] = {1,2,3}", "output": "4"}]}
{"statement": "Task: Given the initial and final speed of a car, along with the time it takes to travel a certain distance and the maximum allowed change in speed between any two adjacent seconds, find the maximum possible length of the path section in meters, assuming that the speed is constant at each second.\n\nInput: The input consists of two lines containing four integers in total, where the first line contains the initial and final speed of the car, and the second line contains the time it takes to travel the distance and the maximum allowed change in speed between any two adjacent seconds. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the maximum possible length of the path segment in meters.\n\nConstraints: The initial and final speed are integers between 1 and 100 meters per second, the time is an integer between 2 and 100 seconds, and the maximum allowed change in speed is an integer between 0 and 10 meters per second. It is guaranteed that there is a way to complete the segment so that the speed in the first second equals the initial speed, the speed in the last second equals the final speed, and the absolute value of difference of speeds between any two adjacent seconds doesn't exceed the maximum allowed change in speed.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/534/B", "sample_test_cases": [{"input": "5 6\n4 2\n", "output": "26"}, {"input": "10 10\n10 0\n", "output": "100"}, {"input": "87 87\n2 10\n", "output": "174"}, {"input": "1 11\n6 2\n", "output": "36"}, {"input": "100 10\n10 10\n", "output": "550"}, {"input": "1 1\n100 10\n", "output": "24600"}, {"input": "1 1\n5 1\n", "output": "9"}, {"input": "1 1\n5 2\n", "output": "13"}, {"input": "100 100\n100 0\n", "output": "10000"}, {"input": "100 100\n100 10\n", "output": "34500"}, {"input": "1 100\n100 1\n", "output": "5050"}, {"input": "1 100\n100 10\n", "output": "29305"}, {"input": "100 1\n100 1\n", "output": "5050"}, {"input": "100 1\n100 10\n", "output": "29305"}, {"input": "1 10\n2 10\n", "output": "11"}]}
{"statement": "Task: Given a binary array nums of length n, delete one element from it and find the length of the longest subarray containing only 1's. If there is no such subarray, return 0.\n\nInput: The input is a binary array of length n, where 1 <= n <= 10^5. The input is provided through standard input.\n\nOutput: The output is an integer representing the size of the longest non-empty subarray containing only 1's in the resulting array.\n\nConstraints: The input array contains only 0's and 1's.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Amortized analysis']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/", "sample_test_cases": [{"input": [[1, 1, 0, 1]], "output": 3}]}
{"statement": "Task: Given a set of n non-negative integers, and a value m, determine if there is a subset of the given set with sum divisible by m.\n\nInput: The input consists of three integers: n, m, and an array of n non-negative integers. It is guaranteed that 1 <= elements in set <= 1000, 1 <= n, m <= 1000.\n\nOutput: The output should be a single integer, either 1 or 0, indicating whether there exists a subset whose sum is divisible by m.\n\nConstraints: The number of elements in the set and the values of n and m are between 1 and 1000, inclusive. \n\nMathematical concepts: Set, subset, sum, divisibility.\n\nComputer science concepts: Array, input/output, function.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/subset-with-sum-divisible-by-m2546/1", "sample_test_cases": [{"input": "n = 4 m = 6 \nnums[] = {3 1 7 5}", "output": "1"}, {"input": "n = 3, m = 5\nnums[] = {1 2 6}", "output": "0"}]}
{"statement": "Task: Given an array of N positive integers, find the number of contiguous subarrays where the maximum element in the subarray is strictly greater than a given value K.\n\nInput: The input consists of three integers: N, K, and an array Arr of N positive integers. The input is read from standard input.\n\nOutput: Return an integer denoting the number of contiguous subarrays in the input array where the maximum element in the subarray is strictly greater than K.\n\nConstraints: The length of the input array N is at most 10^5 and the elements of the array are positive integers at most 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-of-subarrays5922/1", "sample_test_cases": [{"input": "N = 3, K = 2\nArr[] = {3, 2, 1}", "output": "3"}, {"input": "N = 4, K = 1\nArr[] = {1, 2, 3, 4}", "output": "9"}]}
{"statement": "Task: Given a garland of $n$ lamps, each colored red, green or blue, the task is to recolor some lamps in such a way that the garland becomes diverse, i.e., any two adjacent lamps have distinct colors. Find the minimum number of lamps that need to be recolored to achieve this, and output any diverse garland obtained from the initial one with the minimum number of recolors.\n\nInput: The input consists of two lines. The first line contains an integer $n$ representing the number of lamps. The second line contains a string $s$ of length $n$ consisting of characters 'R', 'G' and 'B', representing the colors of the lamps in the garland. Input is provided through standard input.\n\nOutput: The output consists of two lines. The first line contains an integer $r$ representing the minimum number of recolors needed to obtain a diverse garland from the given one. The second line contains a string $t$ of length $n$, representing a diverse garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, any of them can be printed.\n\nConstraints: $1 \\le n \\le 2 \\cdot 10^5$.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Constructive algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1108/D", "sample_test_cases": [{"input": "9\nRBGRRBRGG\n", "output": "2\nRBGRGBRGR\n"}, {"input": "8\nBBBGBRRR\n", "output": "2\nBRBGBRGR\n"}, {"input": "13\nBBRRRRGGGGGRR\n", "output": "6\nBGRBRBGBGBGRG\n"}, {"input": "1\nB\n", "output": "0\nB\n"}, {"input": "2\nBB\n", "output": "1\nBR\n"}, {"input": "3\nRGG\n", "output": "1\nRGR\n"}, {"input": "5\nGBBRG\n", "output": "1\nGBGRG\n"}, {"input": "500\nBRGRRBBGGRBBRBBGGGRBGBGRGRRBRRRBGRBGBRGGGRBBRRBBBRGGBGBBBGGGRGRBBBRBGGBRGGGBRGGRBRGBBGBRRGGBGRGBGGGGGRBBRGBGGRBGGGRBRGGBBGRBBRRRGBRRBGGBGBGGGGRBGRGRRGGGBRBRRGBGGGRBRBBGBBGGBRBGBRRGGRRBGGRRRRBRGRBBBRRBGRBBGBGBRRGGBRRBBRRGGRRRBGBRBBGRRRRBGGGBRGRRBRRRRGGRBRRBBRRGRGBGRRRBRRGGBBGRRBBGRGRBRGBRBBRBBBBGBRGGGGGGBBBGRGGBGRRBRBBBBRBGBRRGGRGBGGBRGRBGRBGBGRRGRGBGGRRRGRGBRGBGBBGRRBBGGGBRGGBGRRGGGRBGGRRBRGBGGBRRBBGGGGRRBGGGBRGGBRRRBRBGGRRRRGBRBBRBRGRGRRBBBBGBRGRRRRGBGBRGGGRBRGGGBGBBRGRRRBBRBGGGRGBRRGGRRGGBBGRR\n", "output": "131\nBRGRGBRGBRBGRBRGBGRBGBGRGRGBRGRBGRBGBRGBGRBGRGBGBRGRBGBRBGBGRGRBGBRBGRBRGRGBRGBRBRGBRGBRBGRBGRGBGBGBGRBGRGBGBRBGBGRBRGRBRGRBGRBRGBRGBGRBGBGBGBRBGRGRBGRGBRBRBGBGBGRBRBRGBRGRBRBGBRBGBRGBGBRGRGBRGRBGBRGBGRBRGBGBRBGRBRGBGRBGBRGRBGBRBRGRGRGBGRGBRGRGBRBRBGBRBRGBGRBGRGBGRGRBRBGRBRGRGBRGRGRBRGBRBGRBRBRGBRGRGRGRBRBGRGRBGRGBRBGBGRBGBRBGBRGBGRBRGRBGRBGBGRBGRGBGBRBRGRGBRGBGBRGRGBRGRGBRGRBGRBGBGRBGBRGBRGBGRBRGBRGBGBRGBGRGBRGRBRGRBRBGBRBRBGBRBGRBRGRGRGBRBRGBRGRBRBGBGBRGBGRBRGRGBGBGRGRGRBGRBGBGRGBRBGBRBGRBRGRG\n"}, {"input": "69\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n", "output": "34\nRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGR\n"}, {"input": "5\nGBBRG\n", "output": "1\nGBGRG\n"}, {"input": "3\nRGG\n", "output": "1\nRGR"}, {"input": "500\nBRGRRBBGGRBBRBBGGGRBGBGRGRRBRRRBGRBGBRGGGRBBRRBBBRGGBGBBBGGGRGRBBBRBGGBRGGGBRGGRBRGBBGBRRGGBGRGBGGGGGRBBRGBGGRBGGGRBRGGBBGRBBRRRGBRRBGGBGBGGGGRBGRGRRGGGBRBRRGBGGGRBRBBGBBGGBRBGBRRGGRRBGGRRRRBRGRBBBRRBGRBBGBGBRRGGBRRBBRRGGRRRBGBRBBGRRRRBGGGBRGRRBRRRRGGRBRRBBRRGRGBGRRRBRRGGBBGRRBBGRGRBRGBRBBRBBBBGBRGGGGGGBBBGRGGBGRRBRBBBBRBGBRRGGRGBGGBRGRBGRBGBGRRGRGBGGRRRGRGBRGBGBBGRRBBGGGBRGGBGRRGGGRBGGRRBRGBGGBRRBBGGGGRRBGGGBRGGBRRRBRBGGRRRRGBRBBRBRGRGRRBBBBGBRGRRRRGBGBRGGGRBRGGGBGBBRGRRRBBRBGGGRGBRRGGRRGGBBGRR\n", "output": "131\nBRGRGBRGBRBGRBRGRGRBGBGRGRGBRGRBGRBGBRGRGRBGRGBRBRGRBGBRBGRGRGRBRBRBGRBRGRGBRGBRBRGBRGBRBGRBGRGBGRGRGRBGRGBGBRBGRGRBRGRBRGRBGRGRGBRGBGRBGBGRGBRBGRGRBGRGBRBRBGBGRGRBRBRGBRGRBRBGBRBGBRGBGBRGRGBRGRBRBRGBGRBRGBGBRBGRBRGBGRBGBRGRBGBRBRGRGRGBGRGBRGRGBRGRBGBRBRGBGRBGRGBGRGRBRBGRBRGRGBRGRGRBRGBRBGRBRBRGBRGRGRGRBRBGRGRBGRGBRBRBGRBGBRBGBRGBGRBRGRBGRBGBGRBGRGBGBRGRGRGBRGBGBRGRGBRGRGBRGRBGRBGRGRBGBRGBRGBGRBRGBRGRGBRGBGRGBRGRBRGRBRBGBRGRBGBRBGRBRGRGRGBRBRGBRGRGRBGBGBRGRGRBRGRGBGBGRGRGRBGRBGRGRGBRBGBRBGRBRGRG"}, {"input": "69\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n", "output": "34\nRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGR\n"}, {"input": "1\nB\n", "output": "0\nB\n"}, {"input": "2\nBB\n", "output": "1\nBR"}]}
{"statement": "Task: Given an array of integers, find the maximum number of times the array can be partitioned into two contiguous subarrays such that the sum of elements on the left subarray is equal to the sum of elements on the right subarray.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains an integer $t$, the number of test cases. Each test case starts with an integer $n$, the size of the array, followed by a line containing $n$ space-separated integers representing the array. The input is provided through standard input.\n\nOutput: For each test case, output a single integer representing the maximum number of times the array can be partitioned. The output should be printed to standard output.\n\nConstraints: $1\\leq t\\leq10$, $1\\leq n\\leq2^{14}$, and $0\\leq arr[i]\\leq10^9$.\n\nMathematical concepts: arrays, contiguous subarrays, sum of elements, partitioning, integers.\n\nComputer science concepts: input/output, standard input/output, loops, conditional statements.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/array-splitting/problem", "sample_test_cases": [{"input": "3\n3\n3 3 3\n4\n2 2 2 2\n7\n4 1 0 1 1 0 1\n", "output": "0\n2\n3\n"}]}
{"statement": "Task: Given two integers n and k, find the number of good sequences of length k, where a sequence is considered good if each number divides the next number in the sequence. Output the count of good sequences modulo 1000000007.\n\nInput: Two integers n and k, where 1 \u2264 n, k \u2264 2000. The input is provided through standard input.\n\nOutput: A single integer representing the count of good sequences of length k modulo 1000000007.\n\nConstraints: The input integers n and k should be such that 1 \u2264 n, k \u2264 2000.", "editorial": "", "tag": "['Number theory', 'Combinatorics', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/414/B", "sample_test_cases": [{"input": "1707 1117\n", "output": "237674323"}, {"input": "1766 1038\n", "output": "435768250"}, {"input": "217 3\n", "output": "4131"}, {"input": "1229 1315\n", "output": "100240813"}, {"input": "634 1825\n", "output": "438513382"}, {"input": "1903 1612\n", "output": "620810276"}, {"input": "1887 1729\n", "output": "730033374"}, {"input": "1472 854\n", "output": "748682383"}, {"input": "43 1640\n", "output": "173064407"}, {"input": "56 48\n", "output": "20742237"}, {"input": "675 741\n", "output": "474968598"}, {"input": "1610 774\n", "output": "50897314"}, {"input": "436 1302\n", "output": "874366220"}, {"input": "1153 1823\n", "output": "791493066"}, {"input": "1544 1794\n", "output": "933285446"}]}
{"statement": "Task: Given a string S, find the longest palindromic substring in S. A substring of string S is defined as S[i...j] where 0 \u2264 i \u2264 j < len(S). A palindrome string is a string that reads the same backward. More formally, S is a palindrome if reverse(S) = S. In case of conflict, return the substring which occurs first (with the least starting index).\n\nInput: The input is a single string S, received from standard input. \n\nOutput: The output is a single string, which is the longest palindromic substring of S.\n\nConstraints: The input string S has a length between 1 and 1000.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-palindrome-in-a-string3411/1", "sample_test_cases": [{"input": "S = \"aaaabbaa\"", "output": "aabbaa"}, {"input": "S = \"abc\"", "output": "a"}]}
{"statement": "Task: Given an integer array nums and an integer k, find the maximum sum of a non-empty subsequence of nums such that the difference between the indices of any two consecutive elements in the subsequence is at most k.\n\nInput: The input consists of an integer array nums and an integer k, provided through standard input. The length of nums is between 1 and 10^5, and the elements of nums are integers between -10^4 and 10^4.\n\nOutput: The output should be a single integer representing the maximum sum of a non-empty subsequence of nums that satisfies the given condition.\n\nConstraints: The input constraints are that k should be between 1 and the length of nums, which itself should be between 1 and 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Amortized analysis']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/constrained-subsequence-sum/", "sample_test_cases": [{"input": [[10, 2, -10, 5, 20], 2], "output": 37}]}
