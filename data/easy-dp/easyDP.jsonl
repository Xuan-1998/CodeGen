{"statement": "Task: Given a regular polygon with $n$ vertices labeled from $1$ to $n$ in counter-clockwise order, find the minimum weight among all possible triangulations of the polygon. The weight of a triangulation is the sum of weights of all triangles it consists of, where the weight of a triangle is the product of labels of its vertices.\n\nInput: The input consists of a single integer $n$ ($3 \\le n \\le 500$) representing the number of vertices in the regular polygon. The input is provided through standard input.\n\nOutput: The output consists of a single integer representing the minimum weight among all possible triangulations of the given polygon.\n\nConstraints: The input integer $n$ must be greater than or equal to 3 and less than or equal to 500.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1140/D", "sample_test_cases": [{"input": "3\n", "output": "6\n"}, {"input": "4\n", "output": "18\n"}, {"input": "5\n", "output": "38\n"}, {"input": "6\n", "output": "68\n"}, {"input": "7\n", "output": "110\n"}]}
{"statement": "Task: Given a binary table with two rows of equal length, partition it into any number of consecutive bi-tables and find the maximal sum of the smallest digit that does not occur in each bi-table.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of columns in the bi-table. Each of the next two lines contains a binary string of length $n$ \u2014 the rows of the bi-table. Input is provided through standard input.\n\nOutput: For each test case, output a single integer \u2014 the maximal sum of the smallest digit that does not occur in each bi-table obtained by cutting the given bi-table optimally.\n\nConstraints: The sum of $n$ over all test cases does not exceed $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Constructive algorithms', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1566/C", "sample_test_cases": [{"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n8\n2\n12\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "8\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n9\n2\n12\n"}, {"input": "4\n7\n0101000\n1100100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "10\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111110\n", "output": "8\n9\n2\n11\n"}]}
{"statement": "Task: Given a list of n juices, each with a price and a set of vitamins it contains, find the minimum total price of juices that Petya has to buy to obtain all three types of vitamins. Petya needs at least one juice containing each of the vitamins to obtain it.\n\nInput: The first line of input contains an integer n, representing the number of juices. The following n lines contain an integer ci and a string si, representing the price and the set of vitamins contained in the ith juice. The string si contains one to three characters, and the characters are either \"A\", \"B\", or \"C\". Each letter appears at most once in each string si.\n\nOutput: If it is impossible to obtain all three vitamins, print -1. Otherwise, print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\n\nConstraints: 1 \u2264 n \u2264 1,000, 1 \u2264 ci \u2264 100,000.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Implementation', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1042/B", "sample_test_cases": [{"input": "4\n5 C\n6 B\n16 BAC\n4 A\n", "output": "15\n"}, {"input": "2\n10 AB\n15 BA\n", "output": "-1\n"}, {"input": "5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n", "output": "13\n"}, {"input": "6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n", "output": "250\n"}, {"input": "2\n5 BA\n11 CB\n", "output": "16\n"}]}
{"statement": "Task: Given an integer $n$, determine whether it can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Each of the following $t$ lines contains an integer $n$ ($1 \\leq n \\leq 10^6$) \u2014 the number that needs to be expressed as the sum of $2020$ and $2021$. The input is read from standard input.\n\nOutput: For each test case, output a single line containing either \"YES\" if the given number $n$ can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$, or \"NO\" otherwise. The output is written to standard output.\n\nConstraints: Each test case has an integer $n$ such that $1 \\leq n \\leq 10^6$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1475/B", "sample_test_cases": [{"input": "5\n1\n4041\n4042\n8081\n8079\n", "output": "NO\nYES\nYES\nYES\nNO\n"}, {"input": "1\n2020\n", "output": "YES\n"}, {"input": "3\n2020\n2021\n4040\n", "output": "YES\nYES\nYES\n"}, {"input": "1\n2021\n", "output": "YES\n"}, {"input": "1\n4040\n", "output": "YES\n"}]}
{"statement": "Task: Implement a memoization solution to optimize the calculation of Fibonacci numbers. The goal is to keep using the tree recursion algorithm while avoiding the inefficiencies of recalculating Fibonacci numbers. The solution involves storing Fibonacci numbers in a cache data structure and looking them up before recalculating. The task is to refactor the function into a recursive Fibonacci function that uses a memoized data structure.\n\nInput: The input for the function is not relevant to the problem statement, as the function is already provided. However, it is mentioned that the input is not used in the memoization solution. Input arrives from standard input.\n\nOutput: The function should return the Fibonacci number for a given input.\n\nConstraints: There are no input constraints mentioned in the problem statement.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "codewars", "url": "https://www.codewars.com/kata/529adbf7533b761c560004e5", "sample_test_cases": [{"input": [70], "output": [190392490709135]}, {"input": [60], "output": [1548008755920]}, {"input": [50], "output": [12586269025]}]}
{"statement": "Task: Given an integer N, find the first N Fibonacci numbers. The first two numbers of the series are 1 and 1.\n\nInput: The input consists of a single integer N, which represents the number of Fibonacci numbers to be found. The input is provided through standard input.\n\nOutput: The output should be a list of the first N Fibonacci numbers. The output should be printed to standard output.\n\nConstraints: The input integer N is constrained to be between 1 and 84, inclusive. \n\nMathematical Concepts: Fibonacci numbers, integer sequences.\n\nComputer Science Concepts: Standard input and output, time and space complexity, algorithm design.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/print-first-n-fibonacci-numbers1002/1", "sample_test_cases": [{"input": "N = 5", "output": "1 1 2 3 5"}, {"input": "N = 7", "output": "1 1 2 3 5 8 13"}]}
{"statement": "Task: Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements.\n\nInput: The input consists of two arrays A and B of positive integers of size N and M where N >= M. The input is received from standard input.\n\nOutput: The output is the maximum dot product achievable.\n\nConstraints: 1 \u2264 M \u2264N \u2264 10^{3} and 1 \u2264 A[i], B[i] \u2264 10^{3}.\n\nExplanation: Given two arrays A and B of size N and M respectively, the task is to maximize the dot product of the two arrays by inserting zeros in the second array without changing the order of its elements. The dot product of two arrays A and B of size N is defined as A[0]*B[0] + A[1]*B[1]+....A[N]*B[N]. The input consists of two arrays A and B of positive integers of size N and M where N >= M. The output is the maximum dot product achievable. The input is received from standard input. The input constraints are 1 \u2264 M \u2264N \u2264 10^{3} and 1 \u2264 A[i], B[i] \u2264 10^{3}.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximize-dot-product2649/1", "sample_test_cases": [{"input": "N = 5, A[] = {2, 3, 1, 7, 8} \n       M = 3, B[] = {3, 6, 7}", "output": "107"}, {"input": "N = 3, A[] = {1, 2, 3}\n       M = 1, B[] = {4}", "output": "12"}]}
{"statement": "Task: Given a person standing at X=0 on a number line and allowed to jump either 2 or 3 steps with given probabilities, find the probability that the person will reach X=N.\n\nInput: The input consists of two integers N and P, where N is the final position and P is the probability of jumping 2 steps. The input is provided through standard input.\n\nOutput: The output must be a floating-point number with exactly 6 digits after the decimal point, representing the probability that the person will reach X=N.\n\nConstraints: 0 < N \u2264 10^6 and 0 \u2264 P \u2264 100.\n\nExplanation: We can represent the problem as a directed graph, where each vertex represents a position on the number line and each edge represents a valid jump from one position to another. The person can jump from vertex i to vertex i+2 or i+3 with probabilities P/100 and (100-P)/100, respectively. The task is to find the probability of reaching vertex N starting from vertex 0.\n\nTo solve the problem, we can use dynamic programming. We can define dp[i] as the probability of reaching vertex i starting from vertex 0. We can initialize dp[0] = 1 and dp[i] = 0 for all i \u2260 0. Then, for each vertex i, we can compute dp[i] as the sum of probabilities of reaching vertex i-2 and i-3, weighted by the probabilities of jumping from i-2 and i-3 to i, respectively. Finally, the answer to the problem is dp[N].\n\nThe input consists of T test cases, where each test case contains two integers N and P. The output should consist of T lines, each containing the probability of reaching vertex N for the corresponding test case, with exactly 6 digits after the decimal point. The constraints are 1 \u2264 T \u2264 10^3, 0 < N \u2264 10^6, and 0 \u2264 P \u2264 100.", "editorial": "", "tag": "['Dynamic programming', 'Probability']", "difficulties": "EASY", "source": "hackerearth", "url": null, "sample_test_cases": [{"input": "29210 37", "output": "1.000000"}, {"input": "999996 0", "output": "1.000000"}, {"input": "1000000 100", "output": "0.334448"}, {"input": "1000000 99", "output": "0.465116"}, {"input": "29240 85", "output": "0.497512"}]}
{"statement": "Task: Given an array A of size N, convert it into a special array by rearranging its elements. In the special array, all negative values appear at the beginning and all positive values form the tail of the array. Find the minimum number of values that should be changed in the given array to make it a special array. \n\nInput: The input consists of T test cases. Each test case begins with an integer N, followed by N space-separated integers denoting the elements of the array A. \n\nOutput: For each test case, output a single integer representing the minimum number of changes required to convert the corresponding input array into a special array.\n\nConstraints: 1 \u2264 T \u2264 10, 2 \u2264 N \u2264 10^5, 1 \u2264 |Ai| \u2264 10^9, where || denotes the absolute value. The special array must contain at least one negative and one positive value, and should not contain 0.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "hackerearth", "url": null, "sample_test_cases": []}
{"statement": "Task: Given an integer n, find the value of the nth number in the Tribonacci sequence. The Tribonacci sequence is defined as Tn = Tn-1 + Tn-2 + Tn-3, with T0 = 0, T1 = 1, and T2 = 1.\n\nInput: The input consists of a single integer n, representing the index of the Tribonacci sequence. The input is provided through standard input.\n\nOutput: The output should be a single integer, representing the value of the Tribonacci sequence at index n.\n\nConstraints: The input integer n must satisfy the constraint 0 <= n <= 37. The output integer is guaranteed to fit within a 32-bit integer.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "EASY", "source": "leetcode", "url": "https://leetcode.com/problems/n-th-tribonacci-number/", "sample_test_cases": [{"input": [4], "output": 4}]}
{"statement": "Task: Given a regular polygon with $n$ vertices labeled from $1$ to $n$ in counter-clockwise order, find the minimum weight among all possible triangulations of the polygon. The weight of a triangulation is the sum of weights of the triangles it consists of, where the weight of a triangle is the product of labels of its vertices.\n\nInput: The input consists of a single integer $n$ representing the number of vertices in the regular polygon. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum weight among all possible triangulations of the given polygon.\n\nConstraints: $3 \\le n \\le 500$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1140/D", "sample_test_cases": [{"input": "3\n", "output": "6\n"}, {"input": "4\n", "output": "18\n"}, {"input": "5\n", "output": "38\n"}, {"input": "6\n", "output": "68\n"}, {"input": "7\n", "output": "110\n"}]}
{"statement": "Task: Given a bi-table consisting of two binary strings of equal length, cut it into any number of bi-tables (each consisting of consecutive columns) so that each column is in exactly one bi-table. The goal is to maximize the sum of the smallest non-negative integer that does not occur in each resulting bi-table.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $n$, representing the number of columns in the bi-table. The next two lines contain binary strings of length $n$, representing the two rows of the bi-table. The input arrives from standard input.\n\nOutput: For each test case, output a single integer representing the maximal sum of $\\operatorname{MEX}$ of all bi-tables that it is possible to get by cutting the given bi-table optimally.\n\nConstraints: $1 \\leq n \\leq 10^5$, $1 \\leq t \\leq 10^4$, where $t$ is the number of test cases. The sum of $n$ over all test cases does not exceed $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Constructive algorithms', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1566/C", "sample_test_cases": [{"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n8\n2\n12\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "8\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n9\n2\n12\n"}, {"input": "4\n7\n0101000\n1100100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "10\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111110\n", "output": "8\n9\n2\n11\n"}]}
{"statement": "Task: Given a list of juices, each with a price and a set of vitamins it contains, find the minimum total price of a subset of juices that contains all three types of vitamins.\n\nInput: The input consists of an integer $n$ representing the number of juices, followed by $n$ lines each containing an integer $c_i$ and a string $s_i$ representing the price and vitamin content of the $i$-th juice. The string $s_i$ contains from $1$ to $3$ characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string $s_i$. The input is provided through standard input.\n\nOutput: The output is either -1 if it is impossible to obtain all three vitamins, or the minimum total price of juices that contain all three types of vitamins.\n\nConstraints: $1 \\leq n \\leq 1,000$, $1 \\leq c_i \\leq 100,000$. We can represent each juice as a tuple $(c_i, S_i)$, where $S_i$ is a set containing the vitamins in the $i$-th juice. We can represent the set of all juices as $J = \\{(c_i, S_i)\\}_{i=1}^n$. We want to find the minimum total price of a subset $J' \\subseteq J$ such that $A \\in \\bigcup_{(c,S) \\in J'} S$, $B \\in \\bigcup_{(c,S) \\in J'} S$, and $C \\in \\bigcup_{(c,S) \\in J'} S$, where $A$, $B$, and $C$ are the sets containing the vitamin \"A\", \"B\", and \"C\", respectively. We can represent the set of all vitamins as $V = \\{A, B, C\\}$. We want to find the minimum total price of a subset $J' \\subseteq J$ such that $\\bigcup_{(c,S) \\in J'} S \\supseteq V$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Implementation', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1042/B", "sample_test_cases": [{"input": "4\n5 C\n6 B\n16 BAC\n4 A\n", "output": "15\n"}, {"input": "2\n10 AB\n15 BA\n", "output": "-1\n"}, {"input": "5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n", "output": "13\n"}, {"input": "6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n", "output": "250\n"}, {"input": "2\n5 BA\n11 CB\n", "output": "16\n"}]}
{"statement": "Task: Given an integer $n$, determine whether it can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$.\n\nInput: The first line of input contains an integer $t$ representing the number of test cases. Each test case consists of a single integer $n$.\n\nOutput: For each test case, output \"YES\" if $n$ can be expressed as the sum of a certain number of $2020$ and a certain number of $2021$, and \"NO\" otherwise.\n\nConstraints: $1 \\leq t \\leq 10^4$, $1 \\leq n \\leq 10^6$. The input is read from standard input.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1475/B", "sample_test_cases": [{"input": "5\n1\n4041\n4042\n8081\n8079\n", "output": "NO\nYES\nYES\nYES\nNO\n"}, {"input": "1\n2020\n", "output": "YES\n"}, {"input": "3\n2020\n2021\n4040\n", "output": "YES\nYES\nYES\n"}, {"input": "1\n2021\n", "output": "YES\n"}, {"input": "1\n4040\n", "output": "YES\n"}]}
{"statement": "Task: Given a rooted tree with $n$ vertices and a color assigned to each vertex, count the number of balanced subtrees. A subtree is considered balanced if the number of white vertices is equal to the number of black vertices.\n\nInput: The input consists of multiple test cases. Each test case starts with an integer $n$ ($2 \\le n \\le 4000$), the number of vertices in the tree. The next line contains $n-1$ integers $a_2, \\dots, a_n$ ($1 \\le a_i < i$), representing the parent of each vertex. The last line contains a string $s$ of length $n$ consisting of the characters ${B}$ and ${W}$, representing the color of each vertex. The input is read from standard input.\n\nOutput: For each test case, output a single integer, the number of balanced subtrees.\n\nConstraints: The sum of the values $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "editorial": "", "tag": "['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Dynamic programming']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1676/G", "sample_test_cases": [{"input": "3\n7\n1 1 2 3 3 5\nWBBWWBW\n2\n1\nBW\n8\n1 2 3 4 5 6 7\nBWBWBWBW\n", "output": "2\n1\n4\n"}]}
{"statement": "Task: Implement a memoization solution for the Fibonacci sequence algorithm. The memoized version should keep a cache data structure to store the Fibonacci numbers as they are calculated, avoiding the deficiencies of tree recursion. Refactor the function into a recursive Fibonacci function that uses the memoized data structure and keeps the cache private to the function.\n\nInput: The input for the problem is not relevant as it is not used in the implementation. The input arrives from standard input.\n\nOutput: There is no output required for this problem.\n\nConstraints: There are no input constraints for this problem.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "codewars", "url": "https://www.codewars.com/kata/529adbf7533b761c560004e5", "sample_test_cases": [{"input": [70], "output": [190392490709135]}, {"input": [60], "output": [1548008755920]}, {"input": [50], "output": [12586269025]}]}
{"statement": "Task: Given an integer N, find the first N Fibonacci numbers. The first two numbers of the series are 1 and 1.\n\nInput: The input consists of a single integer N, representing the number of Fibonacci numbers to be generated. The input is provided through standard input.\n\nOutput: The output should be a list of N integers representing the first N Fibonacci numbers. The output should be printed to standard output.\n\nConstraints: The input integer N is constrained to be between 1 and 84, inclusive. \n\nMathematical Concepts: Fibonacci sequence, integers, series, recursion.\n\nComputer Science Concepts: Standard input/output, time complexity, auxiliary space, function implementation.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/print-first-n-fibonacci-numbers1002/1", "sample_test_cases": [{"input": "N = 5", "output": "1 1 2 3 5"}, {"input": "N = 7", "output": "1 1 2 3 5 8 13"}]}
{"statement": "Task: Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements.\n\nInput: The input consists of two arrays A and B of positive integers of size N and M, where N >= M. The input arrives from standard input.\n\nOutput: The output is a single integer representing the maximum dot product of the two arrays after inserting zeros in the second array.\n\nConstraints: 1 \u2264 M \u2264 N \u2264 10^3 and 1 \u2264 A[i], B[i] \u2264 10^3.\n\nExplanation: Given two arrays A and B of positive integers of size N and M where N >= M, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements. The dot product of two arrays A and B of size N is A[0]*B[0] + A[1]*B[1]+....A[N]*B[N]. The function maxDotProduct() takes N, M, array A and B as input parameters and returns the maximum value. The expected time complexity is O(N*M) and the expected auxiliary space is O(N*M).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximize-dot-product2649/1", "sample_test_cases": [{"input": "N = 5, A[] = {2, 3, 1, 7, 8} \n       M = 3, B[] = {3, 6, 7}", "output": "107"}, {"input": "N = 3, A[] = {1, 2, 3}\n       M = 1, B[] = {4}", "output": "12"}]}
{"statement": "Task: Given an array A[] of size N, find the length of the longest subsequence such that difference between adjacent elements is one.\n\nInput: The first line of input contains an integer N, which represents the size of the array. The second line contains N space-separated integers, which represent the elements of the array. The input is provided through standard input.\n\nOutput: A single integer, which represents the length of the longest subsequence where the difference between adjacent elements is one.\n\nConstraints: The input array can have at most 1000 elements, and each element can be between 1 and 1000 (inclusive).\n\nMathematical Concepts: Array, Subsequence, Adjacent Elements, Length, Difference.\n\nComputer Science Concepts: Input/Output, Standard Input, Integer, Space-separated, Constraints.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-subsequence-such-that-difference-between-adjacents-is-one4724/1", "sample_test_cases": [{"input": "N = 7\r\nA[] = {10, 9, 4, 5, 4, 8, 6}", "output": "3"}, {"input": "N = 5\r\nA[] = {1, 2, 3, 4, 5}", "output": "5"}]}
{"statement": "Task: Given a binary string st and a positive integer k, find the length of the longest continuous sequence of '0' after repeating the given binary string k times.\n\nInput: The input consists of two integers: k and the binary string st. The input is read from standard input. The binary string st has at most 10^5 characters.\n\nOutput: The output should be a single integer representing the length of the longest continuous sequence of '0' after repeating the given binary string k times.\n\nConstraints: The length of the binary string st is at most 10^5 and the value of k is at most 10^5.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/lcs-of-0-k-repeated-string5642/1", "sample_test_cases": [{"input": "k = 3\nst = 100001", "output": "4"}, {"input": "k = 4\nst = 000", "output": "12"}]}
{"statement": "Task: Given a directed acyclic graph (DAG) with n nodes labeled from 0 to n-1 and a set of directed edges, find the number of possible paths from a source node s to a destination node d.\n\nInput: The input consists of four integers n, s, d, and e, followed by e pairs of integers representing edges in the DAG. The first integer n represents the number of nodes in the DAG, labeled from 0 to n-1. The second integer s represents the source node, and the third integer d represents the destination node. The fourth integer e represents the number of edges in the DAG. The following e lines contain pairs of integers u and v, representing directed edges from node u to node v. The input is received from standard input.\n\nOutput: The output consists of a single integer representing the number of possible paths from the source node s to the destination node d in the given DAG. The output is returned to standard output.\n\nConstraints: The number of nodes n is between 1 and 15. The source node s and the destination node d are between 0 and n-1. The number of edges e is between 0 and n*(n-1)/2. The time complexity of the solution should be O(2^n), and the space complexity should be O(n+e), where e is the number of edges in the DAG.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Data structures', 'Graph traversal']", "difficulties": "EASY", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-the-paths4332/1", "sample_test_cases": [{"input": "edges = {{0,1},{0,3},{1,2},{3,2}}, \r\nn = 4, s = 0, d = 2", "output": "2"}]}
{"statement": "Task: Given a number line from 0 to N, where N is a positive integer less than or equal to 10^6, and a probability P, find the probability that a person starting at position 0 will reach position N by making jumps of either 2 or 3 steps with probabilities P/100 and (100-P)/100, respectively.\n\nInput: The input consists of a single line containing two integers N and P, where N is the final position on the number line and P is the probability of making a jump of 2 steps. The input is provided through standard input.\n\nOutput: The output should be a single floating-point number with exactly 6 digits after the decimal point, representing the probability of reaching the final position N. The output should be printed to standard output.\n\nConstraints: The input integers N and P must satisfy the constraints 0 < N \u2264 10^6 and 0 \u2264 P \u2264 100.", "editorial": "", "tag": "['Dynamic programming', 'Probability']", "difficulties": "EASY", "source": "hackerearth", "url": "[{\"input\": \"29210 37\", \"output\": \"1.000000\"}", "sample_test_cases": [{"input": "29210 37", "output": "1.000000"}, {"input": "999996 0", "output": "1.000000"}, {"input": "1000000 100", "output": "0.334448"}, {"input": "1000000 99", "output": "0.465116"}, {"input": "29240 85", "output": "0.497512"}]}
{"statement": "Task: Given a grid of size N x N, where each cell is either 0 or 1, find the number of paths from the top-left cell (1,1) to the bottom-right cell (N,N) such that the path only consists of cells with 0 and does not visit any cell more than once.\n\nInput: The first line of input contains an integer N ( N \u2264 100), which is the size of the grid. The following N lines each contain N space-separated integers, representing the grid. The integers are either 0 or 1. The input is provided through standard input.\n\nOutput: A single line showing the number of paths from (1,1) to (N,N) that only consist of cells with 0 and do not visit any cell more than once.\n\nConstraints: The size of the grid is at most 100, and each cell in the grid is represented by either 0 or 1.", "editorial": "", "tag": "['Dynamic programming', 'Complete search']", "difficulties": "EASY", "source": "hackerearth", "url": "7\n0 0 0 0 0 0 0\n0 1 0 1 0 1 0\n0 0 0", "sample_test_cases": [{"input": "7\n0 0 0 0 0 0 0\n0 1 0 1 0 1 0\n0 0 0 0 0 0 0\n0 1 0 1 0 1 0\n0 0 0 0 0 0 0\n0 1 0 1 0 1 0\n0 0 0 0 0 0 0\n", "output": "8512\n"}, {"input": "25\n0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0\n1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0\n0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0\n0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0\n1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0\n0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0\n0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0\n0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0\n0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0\n0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0\n0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0\n0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0\n1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\n0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0\n0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0\n0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0\n0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0\n0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0\n0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0\n0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1\n0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "output": "184\n"}, {"input": "9\n0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 0 0\n", "output": "1\n"}, {"input": "25\n0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0\n1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0\n0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0\n0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0\n1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0\n0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0\n0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0\n0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0\n0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0\n0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0\n0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0\n0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0\n1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\n0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0\n0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0\n0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0\n0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0\n0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0\n0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0\n0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0\n0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1\n0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "output": "1\n"}, {"input": "81\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0\n0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0\n0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1\n0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0\n0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0\n0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\n1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1\n0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0\n0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0\n0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0\n0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0\n0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0\n0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1\n0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0\n0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0\n0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0\n0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0\n0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0\n1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0\n0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0\n0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1\n0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0\n0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0\n0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0\n0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0\n0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0\n0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1\n0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0\n1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0\n0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0\n0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0\n1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1\n0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0\n0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0\n0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0\n0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0\n0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0\n0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0\n0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0\n1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0\n0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0\n0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0\n0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1\n0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0\n1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0\n0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0\n0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0\n0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0\n0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0\n0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0\n0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1\n0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0\n0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0\n0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0\n0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0\n0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0\n0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0\n0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0\n0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1\n0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0\n0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 0\n0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0\n0 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1\n0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0\n0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0\n0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0\n1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0\n0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0\n0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0\n0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0\n0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0\n0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0\n1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0\n0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0\n0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0\n0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 0 1 1 1 0 1 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0\n", "output": "1\n"}]}
{"statement": "Task: Given an integer n, find the nth value in the Tribonacci sequence, which is defined as T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nInput: The input is a single integer n, which represents the index of the desired value in the sequence. The input is provided through standard input.\n\nOutput: The output should be a single integer, which represents the value of Tn.\n\nConstraints: The input integer n must satisfy the constraint 0 <= n <= 37. Additionally, the output value is guaranteed to fit within a 32-bit integer. The Tribonacci sequence is defined recursively, where each term is the sum of the previous three terms.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "EASY", "source": "leetcode", "url": "https://leetcode.com/problems/n-th-tribonacci-number/", "sample_test_cases": [{"input": [4], "output": 4}]}
