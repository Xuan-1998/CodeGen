{"statement": "Task: Given a regular polygon with $n$ vertices labeled from $1$ to $n$ in counter-clockwise order, find the minimum weight among all possible triangulations of the polygon. The weight of a triangulation is the sum of weights of the triangles it consists of, where the weight of a triangle is the product of labels of its vertices.\n\nInput: The input consists of a single integer $n$ representing the number of vertices in the regular polygon. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum weight among all possible triangulations of the given polygon.\n\nConstraints: $3 \\le n \\le 500$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1140/D", "sample_test_cases": [{"input": "3\n", "output": "6\n"}, {"input": "4\n", "output": "18\n"}, {"input": "5\n", "output": "38\n"}, {"input": "6\n", "output": "68\n"}, {"input": "7\n", "output": "110\n"}]}
{"statement": "Task: Given a bi-table consisting of two binary strings of equal length, cut it into any number of bi-tables (each consisting of consecutive columns) so that each column is in exactly one bi-table. The goal is to maximize the sum of the smallest non-negative integer that does not occur in each resulting bi-table.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $n$, representing the number of columns in the bi-table. The next two lines contain binary strings of length $n$, representing the two rows of the bi-table. The input arrives from standard input.\n\nOutput: For each test case, output a single integer representing the maximal sum of $\\operatorname{MEX}$ of all bi-tables that it is possible to get by cutting the given bi-table optimally.\n\nConstraints: $1 \\leq n \\leq 10^5$, $1 \\leq t \\leq 10^4$, where $t$ is the number of test cases. The sum of $n$ over all test cases does not exceed $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Constructive algorithms', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1566/C", "sample_test_cases": [{"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n8\n2\n12\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "8\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n9\n2\n12\n"}, {"input": "4\n7\n0101000\n1100100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "10\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111110\n", "output": "8\n9\n2\n11\n"}]}
{"statement": "Task: Given a list of juices, each with a price and a set of vitamins it contains, find the minimum total price of a subset of juices that contains all three types of vitamins.\n\nInput: The input consists of an integer $n$ representing the number of juices, followed by $n$ lines each containing an integer $c_i$ and a string $s_i$ representing the price and vitamin content of the $i$-th juice. The string $s_i$ contains from $1$ to $3$ characters, and the only possible characters are \"A\", \"B\" and \"C\". It is guaranteed that each letter appears no more than once in each string $s_i$. The input is provided through standard input.\n\nOutput: The output is either -1 if it is impossible to obtain all three vitamins, or the minimum total price of juices that contain all three types of vitamins.\n\nConstraints: $1 \\leq n \\leq 1,000$, $1 \\leq c_i \\leq 100,000$. We can represent each juice as a tuple $(c_i, S_i)$, where $S_i$ is a set containing the vitamins in the $i$-th juice. We can represent the set of all juices as $J = \\{(c_i, S_i)\\}_{i=1}^n$. We want to find the minimum total price of a subset $J' \\subseteq J$ such that $A \\in \\bigcup_{(c,S) \\in J'} S$, $B \\in \\bigcup_{(c,S) \\in J'} S$, and $C \\in \\bigcup_{(c,S) \\in J'} S$, where $A$, $B$, and $C$ are the sets containing the vitamin \"A\", \"B\", and \"C\", respectively. We can represent the set of all vitamins as $V = \\{A, B, C\\}$. We want to find the minimum total price of a subset $J' \\subseteq J$ such that $\\bigcup_{(c,S) \\in J'} S \\supseteq V$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Implementation', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1042/B", "sample_test_cases": [{"input": "4\n5 C\n6 B\n16 BAC\n4 A\n", "output": "15\n"}, {"input": "2\n10 AB\n15 BA\n", "output": "-1\n"}, {"input": "5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n", "output": "13\n"}, {"input": "6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n", "output": "250\n"}, {"input": "2\n5 BA\n11 CB\n", "output": "16\n"}]}
{"statement": "Task: Given an integer $n$, determine whether it can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$.\n\nInput: The first line of input contains an integer $t$ representing the number of test cases. Each test case consists of a single integer $n$.\n\nOutput: For each test case, output \"YES\" if $n$ can be expressed as the sum of a certain number of $2020$ and a certain number of $2021$, and \"NO\" otherwise.\n\nConstraints: $1 \\leq t \\leq 10^4$, $1 \\leq n \\leq 10^6$. The input is read from standard input.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1475/B", "sample_test_cases": [{"input": "5\n1\n4041\n4042\n8081\n8079\n", "output": "NO\nYES\nYES\nYES\nNO\n"}, {"input": "1\n2020\n", "output": "YES\n"}, {"input": "3\n2020\n2021\n4040\n", "output": "YES\nYES\nYES\n"}, {"input": "1\n2021\n", "output": "YES\n"}, {"input": "1\n4040\n", "output": "YES\n"}]}
{"statement": "Task: Given a rooted tree with $n$ vertices and a color assigned to each vertex, count the number of balanced subtrees. A subtree is considered balanced if the number of white vertices is equal to the number of black vertices.\n\nInput: The input consists of multiple test cases. Each test case starts with an integer $n$ ($2 \\le n \\le 4000$), the number of vertices in the tree. The next line contains $n-1$ integers $a_2, \\dots, a_n$ ($1 \\le a_i < i$), representing the parent of each vertex. The last line contains a string $s$ of length $n$ consisting of the characters ${B}$ and ${W}$, representing the color of each vertex. The input is read from standard input.\n\nOutput: For each test case, output a single integer, the number of balanced subtrees.\n\nConstraints: The sum of the values $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "editorial": "", "tag": "['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Dynamic programming']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1676/G", "sample_test_cases": [{"input": "3\n7\n1 1 2 3 3 5\nWBBWWBW\n2\n1\nBW\n8\n1 2 3 4 5 6 7\nBWBWBWBW\n", "output": "2\n1\n4\n"}]}
