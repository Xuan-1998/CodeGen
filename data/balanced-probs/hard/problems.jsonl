{"statement": "Task: Given the number of gold stores in Atlantis and the time it takes to travel to and from each store, determine the maximum number of stores Demetrios can visit before they become submerged due to rising sea levels. Demetrios must visit each store prior to it becoming submerged, and the gold store must remain above water during the entire trip to and from the store.\n\nInput: The first line of input contains an integer n, representing the number of gold stores in Atlantis. The next n lines contain two integers on each line, ti and hi, representing the round-trip time in seconds it will take Demetrios to visit store i and return to his ship with the gold, and the feet above sea level of store i, respectively. Input is provided through standard input.\n\nOutput: Output a single integer, representing the maximum number of gold stores Demetrios can visit such that each is visited prior to it becoming submerged.\n\nConstraints: 1 \u2264 n \u2264 200,000; 1 \u2264 ti, hi \u2264 10^9.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/atlantis", "sample_test_cases": [{"input": "5\n5 8\n5 6\n3 4\n5 13\n6 10\n", "output": "3\n"}, {"input": "5\n5 10\n6 15\n2 7\n3 3\n4 11\n", "output": "4\n"}]}
{"statement": "Task: Given N people, divide them into groups of sizes between A and B, inclusive, subject to the constraint that the number of groups of size i is between C and D, inclusive, for all i. Find the number of ways to divide the people into groups, considering two ways different if and only if there exists two people belonging to the same group in exactly one of the two ways. Output the count of these ways modulo 10^9+7.\n\nInput: The input consists of a single line containing five integers separated by a space: N, A, B, C, and D, where N represents the number of people, and A, B, C, and D represent the size constraints for the groups. The input is given from standard input.\n\nOutput: The output consists of a single integer representing the number of ways to divide the people into groups, subject to the constraints mentioned above. \n\nConstraints: 1 \u2264 N \u2264 10^3, 1 \u2264 A \u2264 B \u2264 N, and 1 \u2264 C \u2264 D \u2264 N.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "atcoder", "url": "https://atcoder.jp/contests/arc067/tasks/arc067_c", "sample_test_cases": [{"input": "3 1 3 1 2\n", "output": "4\n"}, {"input": "7 2 3 1 3\n", "output": "105\n"}, {"input": "1000 1 1000 1 1000\n", "output": "465231251\n"}, {"input": "10 3 4 2 5\n", "output": "0\n"}, {"input": "1000 1 68 1 986\n", "output": "567116057\n"}, {"input": "1000 1 934 8 993\n", "output": "671590509\n"}, {"input": "1000 1 80 2 980\n", "output": "6786109\n"}, {"input": "1000 1 467 4 942\n", "output": "999969801\n"}, {"input": "1000 739 920 1 679\n", "output": "0\n"}, {"input": "1000 340 423 2 935\n", "output": "0\n"}, {"input": "1 1 1 1 1\n", "output": "1\n"}, {"input": "522 155 404 151 358\n", "output": "0\n"}, {"input": "81 7 60 34 67\n", "output": "0\n"}, {"input": "775 211 497 3 226\n", "output": "0\n"}, {"input": "156 42 153 1 129\n", "output": "269383946\n"}]}
{"statement": "Task: Given three distinct points A, B, and C on the X-Y plane, determine if it is possible to reach point C from point A while passing through point B, with at most one turn in the path from A to C. Movement is restricted to four axis-parallel directions (+X, -X, +Y, -Y direction).\n\nInput: The input consists of T test cases, where each test case starts with a line containing two integers X_A and Y_A, the coordinates of the starting point A. The second line contains two integers X_B and Y_B, the coordinates of point B. The third line contains two integers X_C and Y_C, the coordinates of the finishing point C. The input is read from standard input.\n\nOutput: For each test case, output a single line containing either \"YES\" if it is possible to reach the finishing point satisfying the above conditions, or \"NO\" if it is not possible.\n\nConstraints: Each test case satisfies the following constraints: 1 \u2264 T \u2264 2*10^5, -10^9 \u2264 X_A, Y_A, X_B, Y_B, X_C, Y_C \u2264 10^9, and the three points A, B, and C are pairwise distinct.", "editorial": "", "tag": "['Constructive algorithms', 'Ad-hoc']", "difficulties": "HARD", "source": "codechef", "url": "https://www.codechef.com/problems/THREEPTS", "sample_test_cases": [{"input": "4\n1 1\n1 3\n3 3\n0 0\n2 2\n3 4\n5 2\n3 2\n1 2\n1 1\n-1 1\n10000 10000\n", "output": "YES\nNO\nYES\nNO"}]}
{"statement": "Task: Given an unrooted tree with $n$ vertices, find the maximum number of moves that can be performed, where in each move, exactly $k$ leaves connected to the same vertex can be removed.\n\nInput: The input consists of $t$ independent test cases. The first line of each test case contains two integers $n$ and $k$, representing the number of vertices in the tree and the number of leaves to remove in one move, respectively. The next $n-1$ lines describe the edges of the tree, where each line contains two integers $x_i$ and $y_i$, representing the vertices that the $i$-th edge connects. It is guaranteed that the given set of edges forms a tree. The input is provided through standard input.\n\nOutput: For each test case, print the maximum number of moves that can be performed if leaves are removed optimally. The output should be printed to standard output.\n\nConstraints: $1 \\le t \\le 2 \\cdot 10^4$, $2 \\le n \\le 2 \\cdot 10^5$, $1 \\le k < n$, and $\\sum n \\le 2 \\cdot 10^5$.", "editorial": "", "tag": "['Tree algorithms', 'Data structures', 'Implementation', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1385/F", "sample_test_cases": [{"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "2\n3\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n2 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "2\n3\n0\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 4\n2 3\n4 3\n5 3\n", "output": "2\n3\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 4\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "2\n2\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n7 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n2 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "1\n3\n0\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n4 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 4\n2 3\n4 3\n5 3\n", "output": "1\n3\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 4\n1 10\n2 3\n1 5\n2 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "2\n1\n3\n4\n"}, {"input": "4\n8 6\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n4 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 4\n2 3\n4 3\n5 3\n", "output": "0\n3\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n7 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n6 9\n8 10\n7 2\n3 1\n2 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "1\n0\n0\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 3\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n2 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "0\n3\n0\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n4 1\n10 6\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 4\n2 3\n4 3\n5 3\n", "output": "1\n0\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 2\n6 8\n3 1\n6 4\n6 1\n10 3\n1 4\n1 10\n4 3\n1 5\n2 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n1 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "0\n1\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 4\n1 10\n2 3\n1 5\n2 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 7\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "2\n1\n0\n4\n"}, {"input": "4\n8 6\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n4 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 7\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 4\n2 3\n4 3\n5 3\n", "output": "0\n0\n3\n4\n"}, {"input": "4\n8 3\n1 2\n1 5\n7 3\n6 8\n3 1\n6 4\n6 1\n10 1\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n2 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n", "output": "0\n9\n0\n4\n"}]}
{"statement": "Task: Given a dictionary of n words, a starting word s, and an ending word e, find the minimum number of steps required to transform s into e, where each step consists of changing one letter at a time and every intermediate word must be in the dictionary. Additionally, find the lexicographically smallest word that can be added to the dictionary to minimize the number of steps required to transform s into e.\n\nInput: The input consists of a single test case. The first line contains an integer n representing the number of words in the dictionary. This is followed by n lines, each containing a word of length l, consisting of capital letters only. The first word in the dictionary is the starting word s, and the second word is the ending word e. It is guaranteed that all words in the dictionary have the same length l, and that l is between 1 and 8. The sum of n and l over all test cases is at most 10^6.\n\nOutput: The output consists of two lines. The first line contains a string representing the lexicographically smallest word that can be added to the dictionary to minimize the number of steps required to transform s into e. If no such word exists, output 0. The second line contains an integer representing the minimum number of steps required to transform s into e. If no transformation is possible, output -1.\n\nConstraints: 2 \u2264 n \u2264 1000; 1 \u2264 l \u2264 8.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/wordladder2", "sample_test_cases": [{"input": "3\nCAT\nDOG\nCOT\n", "output": "COG\n3\n"}, {"input": "2\nCAT\nDOG\n", "output": "0\n-1\n"}, {"input": "4\nCAT\nDOG\nCOT\nCOG\n", "output": "0\n3\n"}]}
{"statement": "Task: Given $n$ pieces of strings, each consisting of only '(' and ')' characters, find the length of the longest balanced string of parentheses that can be formed by concatenating some or all of the given pieces in any order. A balanced string of parentheses is defined as an empty string, or a string of the form $AB$, where $A$ and $B$ are both balanced strings of parentheses, or a string of the form $(A)$, where $A$ is a balanced string of parentheses.\n\nInput: The input consists of an integer $n$ and $n$ strings, each representing a piece of the original string of parentheses. The length of each string is at most 300.\n\nOutput: Output a single integer, which represents the length of the longest balanced string of parentheses that can be formed from the given pieces.\n\nConstraints: $1 \\le n \\le 300$ and $1 \\le |s| \\le 300$, where $n$ is the number of pieces and $|s|$ is the length of each piece.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/piecesofparentheses", "sample_test_cases": [{"input": "3\n())\n((()\n)()\n", "output": "10\n"}, {"input": "5\n)))))\n)\n((\n))((\n(\n", "output": "2\n"}]}
{"statement": "Task: Given a computer network represented as a non-directed graph with n nodes and m edges, perform k experiments. In each experiment, temporarily disconnect a range of cables, count the number of connected components in the graph, and then reconnect the cables. Print the number of connected components in the graph for each experiment.\n\nInput: The input consists of two integers n and m, representing the number of computers and cables, respectively. The following m lines contain the cables' description, where each line contains two integers xi and yi, representing the computers that are connected by the i-th cable. The next line contains an integer k, representing the number of experiments. The next k lines contain the experiments' descriptions, where each line contains two integers li and ri, representing the range of cables to be disconnected during the experiment. Input arrives from standard input.\n\nOutput: The output consists of k integers, where the i-th integer represents the number of connected components of the graph that defines the computer network during the i-th experiment.\n\nConstraints: 2 \u2264 n \u2264 500, 1 \u2264 m \u2264 104, 1 \u2264 k \u2264 2\u00b7104, and 1 \u2264 li \u2264 ri \u2264 m. The pair of computers can be connected by multiple cables.", "editorial": "", "tag": "['Spanning trees', 'Dynamic programming', 'Data structures', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/292/D", "sample_test_cases": [{"input": "7 14\n7 1\n1 5\n6 4\n7 6\n2 4\n2 4\n7 2\n3 1\n7 6\n6 7\n5 3\n5 4\n1 3\n6 2\n40\n2 3\n14 14\n13 14\n13 13\n7 9\n1 13\n12 14\n14 14\n12 12\n6 10\n6 14\n8 8\n14 14\n9 10\n8 9\n8 11\n9 9\n2 3\n1 11\n13 14\n4 11\n2 9\n1 10\n6 11\n3 3\n4 12\n5 11\n8 8\n7 14\n13 13\n14 14\n14 14\n8 12\n14 14\n8 8\n7 7\n2 11\n10 12\n4 5\n9 10\n", "output": "1\n1\n1\n1\n1\n6\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n4\n1\n1\n1\n3\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n3\n1\n1\n1\n"}, {"input": "3 3\n2 3\n3 1\n2 1\n5\n2 3\n3 3\n2 2\n2 2\n2 2\n", "output": "2\n1\n1\n1\n1\n"}, {"input": "2 1\n2 1\n2\n1 1\n1 1\n", "output": "2\n2\n"}, {"input": "8 10\n8 6\n8 7\n8 3\n3 7\n4 8\n1 6\n5 1\n8 7\n6 8\n1 6\n13\n1 10\n2 6\n3 3\n5 5\n2 2\n1 3\n10 10\n7 7\n2 4\n3 6\n2 7\n9 9\n3 6\n", "output": "8\n4\n2\n3\n2\n2\n2\n3\n3\n4\n5\n2\n4\n"}, {"input": "3 2\n3 2\n3 1\n4\n1 1\n1 2\n2 2\n2 2\n", "output": "2\n3\n2\n2\n"}, {"input": "4 5\n1 4\n2 1\n4 3\n2 1\n3 4\n5\n4 5\n2 4\n4 4\n1 3\n4 4\n", "output": "1\n2\n1\n2\n1\n"}, {"input": "5 4\n3 2\n5 2\n5 3\n2 3\n8\n4 4\n1 1\n3 4\n1 1\n3 3\n3 4\n3 4\n4 4\n", "output": "3\n3\n3\n3\n3\n3\n3\n3\n"}, {"input": "10 10\n7 5\n5 9\n10 9\n8 7\n5 10\n4 2\n8 2\n9 1\n2 8\n10 7\n10\n10 10\n7 9\n2 6\n1 5\n4 7\n9 9\n7 7\n2 6\n6 9\n10 10\n", "output": "3\n5\n6\n6\n5\n3\n3\n6\n6\n3\n"}, {"input": "3 3\n2 3\n3 1\n2 1\n5\n3 3\n3 3\n2 2\n2 2\n2 2\n", "output": "1\n1\n1\n1\n1\n"}, {"input": "2 1\n1 1\n2\n1 1\n1 1\n", "output": "2\n2\n"}, {"input": "5 4\n3 2\n5 2\n5 3\n2 3\n8\n4 4\n1 1\n3 4\n1 1\n3 3\n3 4\n2 4\n4 4\n", "output": "3\n3\n3\n3\n3\n3\n4\n3\n"}, {"input": "7 14\n7 1\n1 5\n6 4\n7 6\n2 4\n2 4\n7 2\n3 1\n7 6\n6 7\n5 3\n5 4\n1 3\n6 2\n40\n2 3\n14 14\n13 14\n13 13\n7 9\n1 13\n12 14\n14 14\n12 12\n6 10\n6 14\n8 8\n14 14\n9 10\n8 9\n8 11\n9 9\n2 3\n1 1\n13 14\n4 11\n2 9\n1 10\n6 11\n3 3\n4 12\n5 11\n8 8\n7 14\n13 13\n14 14\n14 14\n8 12\n14 14\n8 8\n7 7\n2 11\n10 12\n4 5\n9 10\n", "output": "1\n1\n1\n1\n1\n6\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n3\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n3\n1\n1\n1\n"}, {"input": "5 4\n3 4\n5 2\n5 3\n2 3\n8\n4 4\n1 1\n3 4\n1 1\n3 3\n3 4\n3 4\n4 4\n", "output": "2\n3\n3\n3\n2\n3\n3\n2\n"}, {"input": "10 10\n7 5\n5 9\n10 9\n8 7\n5 10\n4 2\n8 2\n9 1\n4 8\n10 7\n10\n10 10\n7 9\n2 6\n1 5\n4 7\n9 9\n7 7\n2 6\n6 9\n10 10\n", "output": "3\n5\n5\n6\n5\n3\n3\n5\n6\n3\n"}, {"input": "5 4\n3 4\n5 2\n5 3\n2 3\n8\n1 4\n1 1\n3 4\n1 1\n3 3\n3 4\n3 4\n4 4\n", "output": "5\n3\n3\n3\n2\n3\n3\n2\n"}]}
{"statement": "Task: Given an undirected graph with N vertices and M edges, where each edge is colored either black or red, assign a real number to each vertex such that the sum of values at the endpoints of each black edge is 1, the sum of values at the endpoints of each red edge is 2, and the sum of the absolute values of all assigned numbers is minimized. If such an assignment is not possible, report that there is no feasible assignment of the numbers.\n\nInput: The input consists of T test cases, where each test case starts with two integers N and M, followed by M lines describing the edges. Each edge is described by three integers a, b, and c, where a and b are the endpoints of the edge and c is the color of the edge (1 for black and 2 for red). It is guaranteed that the sum of N+M over all test cases is at most 5 * 10^5. Input arrives from standard input.\n\nOutput: The output should consist of T lines. If there is a feasible assignment of numbers for a test case, the first line of the output should be \"YES\" and the second line should contain N space-separated numbers representing the assigned values for each vertex. The sum of the numbers at the endpoints of each edge should differ from the precise value by less than 10^-6, and the sum of the absolute values of all assigned numbers should differ from the smallest possible by less than 10^-6. If there are multiple valid solutions, any one of them can be output. If there is no feasible assignment of numbers, the only line of the output should be \"NO\".\n\nConstraints: For each test case, 1 \u2264 N \u2264 100,000, 0 \u2264 M \u2264 200,000, and 1 \u2264 a, b \u2264 N.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Graph traversal', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1387/A", "sample_test_cases": [{"input": "76 38\n2 1 1\n65 4 1\n67 6 2\n66 8 1\n37 9 1\n3 11 2\n48 12 2\n23 18 2\n46 22 1\n10 24 1\n36 25 2\n42 26 2\n34 29 2\n45 30 1\n75 31 1\n21 32 1\n20 39 2\n14 40 2\n5 41 1\n61 43 2\n27 47 2\n44 49 1\n38 50 2\n13 51 2\n72 52 1\n35 53 1\n58 55 2\n56 57 2\n15 59 2\n16 62 1\n17 63 2\n28 64 1\n33 68 2\n76 69 1\n19 70 1\n60 71 1\n54 73 1\n7 74 2\n", "output": "YES\n1 0 2 1 1 2 2 1 1 1 0 2 2 2 2 1 2 2 1 2 1 1 0 0 2 2 2 1 2 1 1 0 2 0 1 0 0 2 0 0 0 0 2 1 0 0 0 0 0 0 0 1 0 1 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 \n"}, {"input": "3 14\n1 1 2\n1 1 2\n2 2 1\n2 3 2\n3 2 2\n1 1 2\n2 2 1\n2 3 2\n3 2 2\n3 2 2\n1 1 2\n1 1 2\n2 2 1\n2 3 2\n", "output": "YES\n1.00 0.50 1.50 "}, {"input": "4 4\n4 2 2\n4 3 1\n1 3 2\n1 2 1\n", "output": "NO"}, {"input": "4 4\n1 4 2\n1 2 1\n3 4 1\n3 2 1\n", "output": "NO"}, {"input": "4 5\n1 4 2\n3 2 1\n1 2 2\n4 3 1\n4 2 1\n", "output": "YES\n1.50 0.50 0.50 0.50 "}, {"input": "2 2\n1 2 2\n2 1 2\n", "output": "YES\n2 0 \n"}, {"input": "50 49\n31 8 2\n31 7 2\n31 34 1\n7 49 1\n34 16 2\n8 24 1\n8 33 1\n8 21 1\n21 15 2\n34 4 2\n49 46 1\n34 18 2\n21 28 2\n33 23 1\n31 43 2\n4 17 2\n23 10 2\n16 30 2\n30 37 2\n34 25 2\n17 19 1\n34 40 1\n31 29 2\n46 32 2\n33 48 2\n31 14 1\n14 44 1\n14 9 2\n4 5 1\n43 2 2\n49 1 2\n17 26 2\n4 36 2\n44 11 2\n21 12 2\n15 3 1\n17 6 2\n15 13 1\n13 42 1\n13 27 1\n14 50 1\n49 47 1\n25 38 2\n29 41 1\n49 45 1\n5 39 2\n8 35 1\n11 20 2\n31 22 1\n", "output": "YES\n2.00 1.00 -1.00 2.00 -1.00 2.00 1.00 1.00 2.00 1.00 1.00 2.00 -1.00 0.00 2.00 2.00 0.00 2.00 1.00 1.00 0.00 0.00 1.00 0.00 2.00 2.00 2.00 2.00 1.00 0.00 1.00 1.00 0.00 0.00 0.00 0.00 2.00 0.00 3.00 1.00 0.00 2.00 1.00 1.00 1.00 1.00 1.00 2.00 0.00 1.00 "}, {"input": "3 14\n1 1 2\n1 1 2\n2 2 1\n2 3 1\n3 2 2\n1 1 2\n2 2 1\n2 3 1\n3 2 2\n3 2 2\n1 1 2\n1 1 2\n2 2 1\n2 3 1\n", "output": "NO"}, {"input": "1 1\n1 1 1\n", "output": "YES\n0.50 "}, {"input": "2 2\n1 2 2\n2 1 1\n", "output": "NO"}, {"input": "2 1\n1 2 1\n", "output": "YES\n1 0 \n"}, {"input": "3 3\n1 2 1\n1 3 1\n3 2 1\n", "output": "YES\n0.50 0.50 0.50 "}, {"input": "3 2\n2 1 2\n3 2 1\n", "output": "YES\n1.00 1.00 0.00 "}, {"input": "4 5\n1 4 2\n3 2 1\n2 1 2\n3 4 1\n1 3 2\n", "output": "YES\n1.50 0.50 0.50 0.50 "}, {"input": "5 5\n3 5 2\n2 4 1\n5 4 2\n4 1 2\n4 3 1\n", "output": "YES\n1.50 0.50 0.50 0.50 1.50 "}]}
{"statement": "Task: Given a rooted tree with non-negative integer beauties assigned to each vertex, find the sum of the greatest common divisors of all vertices on the shortest path between each ancestor-descendant pair. Output the result modulo 10^9 + 7.\n\nInput: The input consists of an integer n (2 \u2264 n \u2264 100,000) representing the number of vertices in the tree, followed by n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 10^{12}) representing the beauties of each vertex, and n-1 lines describing the edges of the tree. Each of these lines contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b) representing an edge between vertices a and b. Input is provided through standard input.\n\nOutput: Output the sum of the greatest common divisors of all vertices on the shortest path between each ancestor-descendant pair, modulo 10^9 + 7.\n\nConstraints: The beauties of each vertex are non-negative integers not larger than 10^{12}.", "editorial": "", "tag": "['Number theory', 'Tree algorithms', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1230/E", "sample_test_cases": [{"input": "8\n1000000000000 0 0 1000000000000 0 0 999999999999 1000000000000\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n", "output": "999867015"}, {"input": "4\n6 10 15 0\n1 4\n2 4\n3 4\n", "output": "67"}, {"input": "2\n123456789234 987654321432\n1 2\n", "output": "111102907"}, {"input": "2\n987987987987 987987987987\n2 1\n", "output": "963943220"}, {"input": "32\n402528994560 0 0 0 0 0 0 932646223872 893192888700 0 813583026900 0 0 0 0 143521875000 0 177570054144 186624000000 0 517655600000 202145625000 341007975000 0 116252718750 0 148561875000 0 304819200000 248474688000 0 103125000000\n29 25\n20 24\n8 21\n23 3\n32 14\n29 30\n31 24\n28 12\n7 10\n18 1\n11 7\n29 5\n6 8\n8 12\n2 1\n2 15\n26 15\n11 13\n16 12\n12 1\n31 28\n9 11\n21 30\n27 13\n23 1\n17 16\n32 12\n18 22\n1 11\n8 19\n11 4\n", "output": "662903569"}, {"input": "2\n0 0\n2 1\n", "output": "0"}, {"input": "4\n6 10 11 0\n1 4\n2 4\n3 4\n", "output": "57\n"}, {"input": "2\n987987987987 90780371125\n2 1\n", "output": "768351567\n"}, {"input": "32\n402528994560 0 0 0 0 0 0 932646223872 893192888700 0 813583026900 0 0 0 0 143521875000 0 177570054144 186624000000 0 517655600000 202145625000 341007975000 0 116252718750 0 148561875000 0 304819200000 248474688000 0 103125000000\n29 25\n20 24\n8 21\n23 3\n32 14\n29 30\n31 24\n28 12\n7 10\n18 1\n11 7\n29 5\n6 8\n8 12\n2 1\n2 15\n26 15\n11 13\n16 12\n12 2\n31 28\n9 11\n21 30\n27 13\n23 1\n17 16\n32 12\n18 22\n1 11\n8 19\n11 4\n", "output": "253069186\n"}, {"input": "5\n4 5 6 0 11\n1 2\n1 3\n1 4\n4 5\n", "output": "45\n"}, {"input": "7\n0 2 5 0 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "output": "42\n"}, {"input": "4\n6 10 4 0\n1 4\n2 4\n3 4\n", "output": "44\n"}, {"input": "2\n123456789234 1408661819439\n1 2\n", "output": "118597952\n"}, {"input": "2\n393928513604 987987987987\n2 1\n", "output": "916491925\n"}, {"input": "5\n4 5 3 0 8\n1 2\n1 3\n1 4\n4 5\n", "output": "38\n"}]}
{"statement": "Task: Given a permutation of n beavers, perform two types of queries: (1) find the minimum number of sessions needed to shave a range of beavers with consecutive ids, and (2) swap the positions of two beavers. If the beavers do not have consecutive ids, they can be split into groups and each group can be shaved in one session.\n\nInput: The input consists of an integer n, the initial permutation of n beavers, an integer q, and q queries. Each query is either of type 1 (to find the minimum number of sessions needed to shave a range of beavers) or type 2 (to swap the positions of two beavers). The input is provided through standard input.\n\nOutput: For each query of type 1, output the minimum number of sessions needed to shave the specified range of beavers.\n\nConstraints: 2 \u2264 n \u2264 3 \u00d7 10^5, 1 \u2264 q \u2264 10^5.", "editorial": "", "tag": "['Data structures']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/331/B2", "sample_test_cases": [{"input": "5\n1 3 4 2 5\n6\n1 2 5\n1 3 4\n2 2 3\n1 1 5\n2 1 5\n1 1 5\n", "output": "2\n1\n3\n5\n"}, {"input": "5\n1 3 4 2 5\n6\n1 1 5\n1 3 4\n2 2 3\n1 1 5\n2 2 5\n1 1 5\n", "output": "2\n1\n3\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 3\n1 1 5\n2 1 5\n1 1 5\n", "output": "2\n1\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 3\n1 1 5\n2 1 5\n2 1 5\n", "output": "2\n1\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n1 3 4\n2 2 3\n1 1 5\n2 1 5\n1 2 5\n", "output": "2\n1\n3\n4\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 3\n1 1 5\n2 1 5\n1 2 5\n", "output": "2\n1\n2\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 5\n1 1 5\n2 1 5\n1 1 5\n", "output": "2\n3\n4\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 5\n1 1 5\n2 1 5\n1 2 5\n", "output": "2\n3\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 1 3\n1 1 5\n2 1 3\n1 2 5\n", "output": "2\n2\n2\n"}, {"input": "5\n1 3 4 2 5\n6\n2 2 5\n2 3 4\n2 2 3\n1 1 5\n2 1 5\n1 2 5\n", "output": "3\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 3\n1 3 4\n2 2 3\n1 1 5\n1 1 5\n1 2 5\n", "output": "2\n1\n3\n3\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n1 3 4\n2 2 3\n1 1 3\n2 1 5\n1 1 5\n", "output": "2\n1\n2\n5\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n2 3 4\n2 2 5\n1 1 5\n2 1 5\n2 1 5\n", "output": "2\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n2 2 5\n1 3 4\n2 2 3\n1 1 5\n2 2 5\n1 1 5\n", "output": "2\n2\n3\n"}, {"input": "5\n1 3 4 2 5\n6\n1 2 5\n1 3 4\n2 2 5\n1 1 3\n2 1 5\n1 1 5\n", "output": "2\n1\n1\n4\n"}]}
{"statement": "Task: Given a polynomial f(x) = a_0 + a_1 \u22c5 x + a_2 \u22c5 x^2 + ... + a_k \u22c5 x^k, find an integer x_0 that satisfies the equation f(x_0) \u2261 0 mod (10^6 + 3), or report that there is no such x_0. The polynomial has at most degree 10 and its coefficients are integers between 0 and 10^6 + 3. The solution can ask at most 50 queries of the form \"what is the value of f(x_q) mod (10^6 + 3)?\" where x_q is an integer between 0 and 10^6 + 3.\n\nInput: The input consists of a single integer k, representing the degree of the polynomial, followed by k+1 integers a_0, a_1, ..., a_k, representing the coefficients of the polynomial. The input is provided through standard input.\n\nOutput: The output consists of a single line that starts with the character '!' followed by a space and an integer x_0 that satisfies the polynomial equation f(x_0) \u2261 0 mod (10^6 + 3), or -1 if there is no such x_0. The output is printed to standard output.\n\nConstraints: The coefficients of the polynomial are integers between 0 and 10^6 + 3, and there is at least one coefficient that is greater than 0. The solution can ask at most 50 queries of the form \"what is the value of f(x_q) mod (10^6 + 3)?\" where x_q is an integer between 0 and 10^6 + 3.", "editorial": "", "tag": "['Mathematics', 'Complete search']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1155/E", "sample_test_cases": [{"input": "185814 18668 815495 698592 459052 721815 800774 396630 184380 99362 533304\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 617421\n"}, {"input": "8 6 0 8 10 10 5 2 7 2 5\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 2"}, {"input": "13 93 26 73 18 29 18 16 100 76 80\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 233510\n"}, {"input": "547141 581307 65508 782948 10146 739074 228094 146473 407747 340605 349785\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 56663\n"}, {"input": "83 21 9 85 72 29 64 69 77 50 0\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 10\n"}, {"input": "44 8 21 71 7 29 40 65 91 70 48\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 215635\n"}, {"input": "8 10 0 3 1 5 9 2 10 3 2\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 2"}, {"input": "269792 427514 799019 997250 742092 189425 894850 782929 438643 823089 937160\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 74744\n"}, {"input": "6 8 1 9 10 1 10 9 3 1 8\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 242113\n"}, {"input": "22 18 6 93 51 70 18 15 49 94 48\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! -1\n"}, {"input": "56247 193989 877560 75275 84835 208614 985767 685676 559873 375638 545285\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! -1\n"}, {"input": "37 11 89 63 28 78 19 18 17 59 0\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 10\n"}, {"input": "8 4 4 9 9 0 8 1 0 5 0\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 5"}, {"input": "694923 910422 257297 945332 579330 821111 837512 844655 382095 134396 774393\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! -1\n"}, {"input": "68 16 16 83 74 44 41 99 8 85 80\n", "output": "? 0\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n? 8\n? 9\n? 10\n! 592906\n"}]}
{"statement": "Task: Given an array of n integers, find the minimum value of a function f(i, j) (1 \u2264 i, j \u2264 n) defined as (i - j)^2 + g(i, j)^2, where g(i, j) is the sum of the elements in the array between indices i and j (inclusive) and i and j are not equal.\n\nInput: The first line of input contains a single integer n (2 \u2264 n \u2264 100000), the size of the array. The second line contains n integers a[1], a[2], ..., a[n] (-10^4 \u2264 a[i] \u2264 10^4), the elements of the array.\n\nOutput: Output a single integer, the minimum value of f(i, j) for all valid i and j.\n\nConstraints: The input array a has at most 100000 elements, and each element is between -10000 and 10000.", "editorial": "", "tag": "['Geometry', 'Data structures', 'Divide and conquer']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/429/D", "sample_test_cases": [{"input": "4\n1 0 0 -1\n", "output": "1\n"}, {"input": "2\n1 -1\n", "output": "2\n"}, {"input": "100\n-57 -64 83 76 80 27 60 76 -80 -56 52 72 -17 92 -96 87 41 -88 94 89 12 42 36 34 -100 -43 -42 62 3 87 -69 -6 -27 -59 -7 5 -90 -23 63 -87 -60 -92 -40 54 -16 -47 67 -64 10 33 -19 53 -7 -62 16 -74 -36 4 -75 -55 92 3 -22 43 -30 48 -27 88 -58 41 36 8 -40 -30 -18 16 22 -66 -91 -46 48 -60 -45 -89 37 -76 52 81 81 15 1 -43 -45 -19 9 -75 -75 -63 41 29\n", "output": "2\n"}, {"input": "100\n-1 -3 -3 0 -1 -1 -1 1 2 1 0 -1 -2 0 -2 -2 3 -2 -1 -2 2 -2 -2 3 0 2 3 -1 2 -1 -2 2 -3 2 1 0 -1 1 3 -1 0 2 -3 -2 2 2 3 -2 2 3 0 -3 -2 1 -1 0 3 0 2 0 1 1 0 -3 1 -3 3 0 -1 -3 3 3 1 -2 2 -2 -3 -1 -2 2 -1 0 2 1 2 -1 2 3 -2 -1 0 -3 0 -1 3 2 -2 2 3 0\n", "output": "1\n"}, {"input": "4\n200 100 -200 100\n", "output": "9\n"}, {"input": "2\n3 -9\n", "output": "82\n"}, {"input": "3\n0 -10 10\n", "output": "4\n"}, {"input": "2\n10000 10000\n", "output": "100000001\n"}, {"input": "2\n5 5\n", "output": "26\n"}, {"input": "3\n10 10 -10\n", "output": "4\n"}, {"input": "6\n10000 10000 10000 10000 10000 6904\n", "output": "47665217\n"}, {"input": "3\n0 10000 -10000\n", "output": "4\n"}, {"input": "3\n0 2 3\n", "output": "5\n"}, {"input": "2\n0 1\n", "output": "2\n"}, {"input": "5\n5865 6072 -4563 5913 -7926\n", "output": "254032\n"}]}
{"statement": "Task: Given a string $s$ consisting of zeroes, ones, and question marks, replace all the question marks with 0 or 1 in such a way that the number of angry comments (defined as the number of occurrences of subsequence 01 and 10) would be as small as possible.\n\nInput: The input consists of a string $s$ and two integers $x$ and $y$, representing the XXOC's rap and the number of angry comments XXOC will receive for every occurrence of 01 and 10, respectively. The input is provided through standard input.\n\nOutput: The output should be a single integer, representing the minimum number of angry comments.\n\nConstraints: The input string $s$ has a length between 1 and $10^5$. The integers $x$ and $y$ are between 0 and $10^6$. \n\nNotation: Let $s$ be a string of length $n$, consisting of zeroes, ones, and question marks. Let $x$ and $y$ be two non-negative integers. Let $c_{01}$ and $c_{10}$ be the number of occurrences of subsequence 01 and 10, respectively, in the string $s$. Let $f(s)$ be the minimum number of angry comments that can be obtained by replacing all the question marks in $s$ with 0 or 1. \n\nProblem: Given $s$, $x$, and $y$, find $f(s)$.", "editorial": "", "tag": "['String algorithms', 'Complete search', 'Implementation', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1411/D", "sample_test_cases": [{"input": "0?1\n2 3\n", "output": "4\n"}, {"input": "?????\n13 37\n", "output": "0\n"}, {"input": "?10?\n239 7\n", "output": "28\n"}, {"input": "01101001\n5 7\n", "output": "96\n"}, {"input": "0101010??01???101????10101??11??00\n1000000 1000000\n", "output": "240000000\n"}, {"input": "?00?0?0??00100?00?001111?11???1010110100?00?0?1?1?1001??001010?011???0000???????1111?1?101100110?001\n801448 0\n", "output": "819079856\n"}, {"input": "?\n940946 502068\n", "output": "0\n"}, {"input": "1?\n930967 495068\n", "output": "0\n"}, {"input": "?0?\n333391 358196\n", "output": "0\n"}, {"input": "1?1?\n661613 944072\n", "output": "0\n"}, {"input": "?1110\n502133 245986\n", "output": "983944\n"}, {"input": "1??00?\n630812 516712\n", "output": "2583560\n"}, {"input": "?1100?0\n782991 525305\n", "output": "5768422\n"}, {"input": "1???????\n687812 408670\n", "output": "0\n"}, {"input": "?0?1?0?1?\n688252 459375\n", "output": "8491143\n"}]}
{"statement": "Task: Given a list of British dishes and their compatibilities, find the maximum length of a sequence of dishes that can be eaten in a single run without repeating any dish. Each dish has a list of compatible dishes that can be eaten directly after it, subject to the constraint that whenever a dish occurs twice in a menu, there can be at most four different types of dishes between the dish that occurred twice.\n\nInput: The input consists of two integers $n$ and $m$ followed by $m$ lines, each containing two integers $a$ and $b$ indicating that dish $b$ can be eaten immediately after dish $a$. The input arrives from standard input.\n\nOutput: A single integer indicating the maximum number of courses in a menu without repeated dishes.\n\nConstraints: $1 \\leq n \\leq 10^5$, $1\\leq m \\leq 10^6$. The dishes are numbered from $1$ to $n$ in no particular order, and the compatibilities form a directed graph where each dish is a vertex and each compatibility is a directed edge from one vertex to another. The graph satisfies the constraint that whenever a dish occurs twice in a menu, there can be at most four different types of dishes between the dish that occurred twice.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/britishmenu", "sample_test_cases": [{"input": "4 3\n1 2\n2 3\n2 4\n", "output": "3\n"}, {"input": "7 7\n1 2\n2 3\n3 4\n4 5\n5 2\n4 6\n5 7\n", "output": "6\n"}]}
{"statement": "Task: Given a sequence of integers, transform it into another sequence where all numbers are equal to a specific value h using the operation of \"adding one on the segment [l, r]\" to all elements of the sequence with indices from l to r (inclusive), without choosing any element as the beginning or end of the segment twice. Find the number of distinct ways to transform the sequence.\n\nInput: The input consists of T test cases. Each test case starts with a line containing two integers n and h, where n is the length of the sequence and h is the target value. The next line contains n integers a_1, a_2, ..., a_{n}, representing the initial values of the sequence. It is guaranteed that the sum of n over all test cases is at most 5 * 10^5. The input is provided through standard input.\n\nOutput: For each test case, output a single integer, which is the number of distinct ways to transform the sequence into a sequence where all numbers are equal to h. The output should be printed to standard output and should be modulo 1000000007 (10^9 + 7).\n\nConstraints: 1 \u2264 n, h \u2264 2000 and 0 \u2264 a_{i} \u2264 2000.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/466/D", "sample_test_cases": [{"input": "3 2\n1 1 1\n", "output": "4\n"}, {"input": "5 1\n1 1 1 1 1\n", "output": "1\n"}, {"input": "4 3\n3 2 1 1\n", "output": "0\n"}, {"input": "1 2000\n2000\n", "output": "1\n"}, {"input": "3 2\n2 1 1\n", "output": "2\n"}, {"input": "3 4\n4 3 2\n", "output": "0\n"}, {"input": "10 6\n5 4 4 4 5 4 4 4 4 5\n", "output": "972\n"}, {"input": "10 6\n5 4 4 4 5 4 4 4 4 5\n", "output": "972\n"}, {"input": "7 4\n3 3 4 4 4 3 3\n", "output": "4\n"}, {"input": "3 6\n5 6 5\n", "output": "1\n"}, {"input": "3 2\n1 0 1\n", "output": "2\n"}, {"input": "6 1\n0 1 0 0 0 1\n", "output": "4\n"}, {"input": "6 3\n2 1 2 2 1 2\n", "output": "8\n"}, {"input": "99 1999\n1999 1998 1997 1996 1995 1994 1993 1992 1991 1990 1989 1988 1987 1986 1985 1984 1983 1982 1981 1980 1979 1978 1977 1976 1975 1974 1973 1972 1971 1970 1969 1968 1967 1966 1965 1964 1963 1962 1961 1960 1959 1958 1957 1956 1955 1954 1953 1952 1951 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999\n", "output": "726372166\n"}, {"input": "9 4\n2 3 2 2 2 3 3 3 2\n", "output": "0\n"}]}
{"statement": "Task: Given a directed graph with n vertices, each vertex has a value k and a number of outgoing edges. The task is to determine, for each of q queries, the number of distinct vertices that will be visited infinitely many times if Gildong starts at a certain vertex with a certain value of c. The travel on the graph works by choosing a vertex to start from and an integer to start with, adding k to c after arriving at a vertex, and then moving to the next vertex based on the condition x \u2261 c mod m_i, where x is an integer between 0 and m_i-1, and m_i is the number of outgoing edges of the i-th vertex.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 1000) representing the number of vertices in the graph, followed by n integers k_i (-10^9 \u2264 k_i \u2264 10^9) representing the value of each vertex. Next, 2n lines describe the edges of each vertex, where the (2i+1)-st line contains an integer m_i (1 \u2264 m_i \u2264 10) representing the number of outgoing edges of the i-th vertex, and the (2i+2)-nd line contains m_i integers e_i[0], e_i[1], \u2026, e_i[m_i-1], each having an integer value between 1 and n, inclusive. The input also includes an integer q (1 \u2264 q \u2264 10^5) representing the number of queries, followed by q lines containing two integers x and y (1 \u2264 x \u2264 n, -10^9 \u2264 y \u2264 10^9) each, representing the start vertex and the starting value of c for each query. The input is read from standard input.\n\nOutput: The output consists of q lines, where each line contains an integer representing the number of distinct vertices that will be visited infinitely many times if Gildong starts at vertex x with starting integer y.\n\nConstraints: The number of vertices n is between 1 and 1000, the value of each vertex k_i is between -10^9 and 10^9, the number of outgoing edges of each vertex is between 1 and 10, and the number of queries q is between 1 and 10^5. The travel on the graph works by choosing a vertex to start from and an integer to start with, adding k to c after arriving at a vertex, and then moving to the next vertex based on the condition x \u2261 c mod m_i, where x is an integer between 0 and m_i-1, and m_i is the number of outgoing edges of the i-th vertex.", "editorial": "", "tag": "['Graph algorithms', 'Graph traversal', 'Implementation', 'Complete search', 'Number theory', 'Dynamic programming', 'Mathematics', 'Data structures']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1200/F", "sample_test_cases": [{"input": "1\n0\n1\n1\n1\n1 0\n", "output": "1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n2\n1\n3\n2\n"}, {"input": "4\n4 -5 -3 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n3\n1\n1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n2 5\n", "output": "1\n1\n2\n1\n3\n1\n"}, {"input": "4\n4 -5 -1 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n1\n1\n1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 2\n2 5\n", "output": "1\n1\n2\n1\n1\n1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 2\n3 5\n", "output": "1\n1\n2\n1\n1\n2\n"}, {"input": "1\n-1\n1\n1\n1\n1 0\n", "output": "1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n1\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 1\n3 -1\n4 -2\n1 2\n3 3\n", "output": "2\n3\n2\n2\n2\n3\n"}, {"input": "4\n4 -5 -3 -1\n2\n2 2\n1\n3\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "3\n3\n3\n3\n3\n3\n"}, {"input": "4\n4 -9 -1 -1\n2\n3 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n2\n1\n1\n1\n2\n"}, {"input": "4\n1 0 0 0\n2\n2 3\n1\n1\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 1\n3 -1\n4 -2\n1 2\n3 3\n", "output": "4\n4\n4\n4\n4\n4\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 2\n", "output": "1\n1\n2\n1\n3\n1\n"}, {"input": "4\n4 -5 -3 -1\n2\n2 2\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n1\n1\n1\n"}, {"input": "4\n4 -9 -1 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n1\n1\n1\n"}]}
{"statement": "Task: Given a revolver with n slots and k bullets, find the lexicographically minimal configuration of bullets such that the probability of losing for the first player is minimized. The revolver is spun and the players take turns shooting until one of them is shot.\n\nInput: The input consists of three integers n, k, and p, followed by p lines containing a single integer xi. The revolver is represented as a string of length n with \"X\" representing slots with bullets and \".\" representing empty slots.\n\nOutput: The output should be a string of length n with \"X\" representing slots with bullets and \".\" representing empty slots.\n\nConstraints: 1 \u2264 n \u2264 10^18, 0 \u2264 k \u2264 n, and 1 \u2264 p \u2264 1000. The queries xi are such that 1 \u2264 xi \u2264 n.\n\nMathematical concepts: strings, lexicographic order, probability.\n\nComputer science concepts: input/output, strings, loops, conditions.", "editorial": "", "tag": "['Greedy algorithms', 'Constructive algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/103/C", "sample_test_cases": [{"input": "7 7 7\n1\n2\n3\n4\n5\n6\n7\n", "output": "XXXXXXX\n"}, {"input": "4 2 8\n1\n3\n4\n2\n3\n4\n1\n2\n", "output": "..XX.X.X\n"}, {"input": "9 4 9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n", "output": "...X.X.XX\n"}, {"input": "7 5 7\n1\n2\n3\n4\n5\n6\n7\n", "output": ".X.XXXX\n"}, {"input": "15 10 15\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n", "output": ".X.X.X.X.XXXXXX\n"}, {"input": "4 0 4\n1\n2\n3\n4\n", "output": "....\n"}, {"input": "12 2 12\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n", "output": ".........X.X\n"}, {"input": "10 2 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n", "output": ".......X.X\n"}, {"input": "7 4 7\n1\n2\n3\n4\n5\n6\n7\n", "output": ".X.X.XX\n"}, {"input": "7 3 7\n1\n2\n3\n4\n5\n6\n7\n", "output": "...X.XX\n"}, {"input": "7 7 7\n1\n1\n3\n4\n5\n6\n7\n", "output": "XXXXXXX"}, {"input": "9 4 9\n1\n2\n3\n4\n5\n8\n7\n8\n9\n", "output": "...X.X.XX"}, {"input": "4 0 4\n1\n2\n3\n2\n", "output": "...."}, {"input": "12 2 12\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n7\n12\n", "output": ".........X.X"}, {"input": "10 2 10\n1\n2\n3\n4\n5\n6\n7\n8\n10\n10\n", "output": ".......XXX"}]}
{"statement": "Task: Given a square grid of size N x N, where each cell is either empty ('.') or inhabited by one of three types of bears (brown, grizzly, or polar), find the number of ways to replace question marks ('?') with 'B', 'G', or 'P' such that there are no fights between adjacent bears. Grizzly bears are the most aggressive and will fight with any adjacent bear. Brown bears will fight with any bear that is not a brown bear, and polar bears will fight with any bear that is not a polar bear. The output for each test case is the number of ways to replace question marks to avoid fights in Bearland, modulo (10^9+7).\n\nInput: The input consists of T test cases, where each test case starts with an integer N, followed by N lines, each containing a string of length N. Each character in the string is one of five: '.', '?', 'B', 'G', or 'P'. The character '.' represents an empty cell, '?' represents a cell inhabited by a bear of an unknown species, and 'B', 'G', and 'P' represent cells inhabited by brown, grizzly, and polar bears, respectively. The input arrives from standard input.\n\nOutput: The output should consist of T lines, each containing a single integer giving the number of ways to replace question marks to avoid fights in Bearland, modulo (10^9+7).\n\nConstraints: $1 \\leq T \\leq 50$, $2 \\leq N \\leq 50$.", "editorial": "", "tag": "['Graph algorithms', 'Graph traversal']", "difficulties": "HARD", "source": "codechef", "url": "https://www.codechef.com/problems/SPECIES", "sample_test_cases": [{"input": "6\n3\n..?\n.?B\nG..\n2\nGG\n..\n3\n?..\n.??\n??.\n3\n??P\n???\n??B\n7\n?.?.?.?\n.?.?.?.\n?.?.?.?\n.?.?.?.\n?.?.?.?\n.?.?.?.\n?.?.?.?\n2\nPP\nPP", "output": "1\n0\n6\n0\n288603514\n1"}]}
{"statement": "Task: Given a 3 x n table with forbidden cells and a cell marked with a circle, count the number of distinct correct puzzles that can be made by placing identical dominoes on the table, such that the cell marked with a circle is empty and the puzzle contains at least one move. A puzzle is correct if each domino occupies exactly two non-forbidden cells of the table, no two dominoes occupy the same table cell, and exactly one non-forbidden cell of the table is unoccupied by any domino. Print the answer modulo 1000000007 (109 + 7).\n\nInput: The input consists of an integer n (3 \u2264 n \u2264 104) representing the size of the puzzle, followed by three lines of n characters each, describing the table. The j-th character of the i-th line equals \"X\" if the corresponding cell is forbidden; it equals \".\", if the corresponding cell is non-forbidden and \"O\", if the corresponding cell is marked with a circle. The input is provided through standard input.\n\nOutput: Print a single number representing the number of distinct correct puzzles that can be made, modulo 1000000007 (109 + 7).\n\nConstraints: The input guarantees that exactly one cell in the table is marked with a circle, and that all cells of a given table having at least one common point with the marked cell is non-forbidden.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/342/D", "sample_test_cases": [{"input": "6\n.X.X..\n...X.X\n.O....\n", "output": "0"}, {"input": "4\nXX..\n...O\n.X..\n", "output": "1"}, {"input": "20\nX.XX..X.X........XXX\nX.X..XX...O.....XX..\n..XXX..X....X.......\n", "output": "26"}, {"input": "100\nX..XXX...XX..XX.....X.XXXXX.XXXXX.XXX..X..X..XXXXXXXXXXXXXXXX....X..X.X....XXXXXXX..XXXXXX.O.XXX.X.X\nX.X.XX.X..XXXXXXX...X.XXXXX.XXXXX.XX.XXX.X..XXXX..XXXXXXX..XX..XXXXXX.XXX...XX....X..X...X...X...X.X\nX.X.XX......XXXXXXXXX..XXXXXX..XXXXX.X...X....XXXX..X..XX......XXX..XXXXX...X..X..XXX..X.X..XX..XXXX\n", "output": "0"}, {"input": "5\nX....\nXX..O\nX....\n", "output": "1"}, {"input": "20\nXXXX......X..XXX..XX\nX.......O...X.X.....\nX...XXX...X...X.XX..\n", "output": "24"}, {"input": "20\nXXXXXXX...XXXXXXXXXX\nXXXXXXX.O.XXXXXXXXXX\nXXXXXXX.....XXXXXX..\n", "output": "0"}, {"input": "9\nXXXX...X.\nX......X.\n...O.....\n", "output": "0"}, {"input": "3\n...\n.O.\n...\n", "output": "0"}, {"input": "8\n.X.....X\n....O...\nX.......\n", "output": "0"}, {"input": "10\nXXXXX...XX\nXXXXX.O.XX\nXXXXX...XX\n", "output": "0"}, {"input": "10\nXXXX.XXX..\nXXXX.X...O\nXXXXXXXX..\n", "output": "0"}, {"input": "100\n..X.X..XX.XX.X.........O............................................................................\n....................................................................................................\n....................................................................................................\n", "output": "0"}, {"input": "10\nXXXXXX...X\nXXX..X.O.X\nXXXXXX...X\n", "output": "0"}, {"input": "4\nXX..\n...O\n..X.\n", "output": "0\n"}]}
{"statement": "Task: Given two positive integers $X$ and $Y$, find the number of Sheldon numbers $n$ such that $X \\leq n \\leq Y$. A Sheldon number is a positive integer whose binary representation matches the pattern $ABABAB\\ldots ABA$ or the pattern $ABABAB\\ldots AB$, where all the occurrences of $A$ represent a string with $N$ occurrences of the bit $1$ and where all the occurrences of $B$ represent a string with $M$ occurrences of the bit $0$, with $N > 0$ and $M > 0$. \n\nInput: The input consists of a single line containing two space-separated integers $X$ and $Y$.\n\nOutput: The output should consist of a single integer representing the number of Sheldon numbers $n$ such that $X \\leq n \\leq Y$.\n\nConstraints: $0 \\leq X \\leq Y < 2^{63}$.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/sheldon", "sample_test_cases": [{"input": "1 10\n", "output": "10\n"}, {"input": "70 75\n", "output": "1\n"}]}
{"statement": "Task: Given a tree with n vertices, some of which are colored black and others are colored white, find the number of ways to split the tree into k+1 parts by deleting k edges, such that each resulting part has exactly one black vertex. The answer should be given modulo 1000000007.\n\nInput: The input consists of three lines. The first line contains an integer n, the number of vertices in the tree. The second line contains n-1 integers, describing the edges of the tree. The third line contains n integers, indicating the color of each vertex.\n\nOutput: Output a single integer, the number of ways to split the tree as described in the problem statement, modulo 1000000007.\n\nConstraints: 2 \u2264 n \u2264 105, 0 \u2264 k < n, and xi is either 0 or 1 for each vertex i.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/462/D", "sample_test_cases": [{"input": "5\n0 1 1 3\n0 0 0 1 1\n", "output": "1\n"}, {"input": "2\n0\n1 0\n", "output": "1\n"}, {"input": "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "9523200\n"}, {"input": "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n0 1 1 2 4 3 3 3 2\n1 0 1 1 1 0 0 1 1 0\n", "output": "3\n"}, {"input": "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "6819840\n"}, {"input": "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n0 1 2 2 4 3 3 3 2\n1 0 1 1 1 0 0 1 1 0\n", "output": "2\n"}, {"input": "10\n0 0 2 1 4 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n", "output": "28\n"}, {"input": "10\n0 0 3 1 4 4 4 0 8\n0 0 0 1 0 1 1 0 0 1\n", "output": "9\n"}, {"input": "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 5 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 85 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "4546560\n"}, {"input": "100\n0 0 2 2 0 3 5 0 4 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 5 6 3 6 17 26 24 20 6 4 27 8 5 14 8 35 31 27 3 41 25 24 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 85 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "5683200\n"}, {"input": "100\n0 0 2 2 0 3 5 0 4 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 5 6 3 6 17 26 24 20 6 4 27 8 5 14 8 35 31 27 3 41 25 24 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 53 36 7 80 60 6 2 11 85 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "1420800\n"}, {"input": "100\n0 0 2 2 0 3 5 0 4 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 5 6 3 6 17 26 24 20 6 4 27 8 5 14 8 35 31 27 3 41 13 24 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 53 36 7 80 60 6 2 11 85 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "2841600\n"}, {"input": "100\n0 0 2 2 0 3 5 0 4 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 5 6 3 6 17 26 24 20 6 4 27 8 5 14 8 35 31 27 3 41 13 20 14 25 31 49 40 0 2 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 53 36 7 80 60 6 2 11 85 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "2273280\n"}]}
{"statement": "Task: Given an integer $n$, find the sum of the least common multiple of $c$ and the greatest common divisor of $a$ and $b$ for all triples of positive integers $(a, b, c)$ that add up to $n$. The output should be the sum modulo $10^9 + 7$.\n\nInput: The input is a single integer $n$.\n\nOutput: The output is a single integer that is the sum modulo $10^9 + 7$.\n\nConstraints: The input integer $n$ is between $3$ and $10^5$, inclusive.", "editorial": "", "tag": "['Number theory', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1717/E", "sample_test_cases": [{"input": "3\n", "output": "1\n"}, {"input": "5\n", "output": "11\n"}, {"input": "69228\n", "output": "778304278\n"}, {"input": "228\n", "output": "3369368\n"}, {"input": "47\n", "output": "32596\n"}, {"input": "13\n", "output": "405\n"}, {"input": "1337\n", "output": "425608851\n"}, {"input": "100000\n", "output": "454535891\n"}, {"input": "94874\n", "output": "584783437\n"}, {"input": "99413\n", "output": "461761995\n"}, {"input": "99913\n", "output": "550761256\n"}, {"input": "4\n", "output": "4\n"}, {"input": "6\n", "output": "20\n"}, {"input": "7\n", "output": "42\n"}, {"input": "8\n", "output": "60\n"}]}
{"statement": "Task: Given a bracket sequence consisting of \u2018(\u2019 and \u2018)\u2019, determine if it is possible to make the sequence valid by performing at most one segment inversion operation.\n\nInput: A string of brackets of length between 1 and 5000, containing only the characters '(' and ')'.\n\nOutput: Output \"possible\" if it is possible to make the bracket sequence valid by inverting at most one segment, or \"impossible\" otherwise.\n\nConstraints: The length of the input string will be between 1 and 5000.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/brackets", "sample_test_cases": [{"input": "()))\n", "output": "possible\n"}, {"input": ")))(\n", "output": "impossible\n"}, {"input": "()\n", "output": "possible\n"}]}
{"statement": "Task: Given a positive integer s, find the largest beautiful number which is less than s. A beautiful number is a positive integer whose decimal representation without leading zeroes contains an even number of digits, and there exists a permutation of this representation which is palindromic.\n\nInput: The input consists of t test cases, where each test case contains a decimal representation of a number s. It is guaranteed that the length of s is even, contains no leading zeroes, and there exists at least one beautiful number less than s. The input is provided through standard input.\n\nOutput: For each testcase, output the largest beautiful number which is less than s.\n\nConstraints: 1 \u2264 t \u2264 105, the length of s is even and doesn't exceed 2\u00b7105, and there exists at least one beautiful number less than s.", "editorial": "", "tag": "['Implementation', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/946/E", "sample_test_cases": [{"input": "1\n1010\n", "output": "1001\n"}, {"input": "6\n12\n10000000000000000000000000000000000000000000\n3030\n3112\n99771122997711229977112299778700000006\n99771122997711229977112299778699999996\n", "output": "11\n999999999999999999999999999999999999999999\n3003\n3030\n99771122997711229977112299778699999986\n99771122997711229977112299778699999986\n"}, {"input": "1\n100001\n", "output": "9999\n"}, {"input": "4\n12\n1000\n1001\n1002\n", "output": "11\n99\n99\n1001\n"}, {"input": "3\n100001\n100000\n100002\n", "output": "9999\n9999\n100001\n"}, {"input": "1\n10000001\n", "output": "999999\n"}, {"input": "2\n1001\n100001\n", "output": "99\n9999\n"}, {"input": "60\n799032\n1880\n489633\n167604\n641858\n521214\n951107\n121088\n952294\n514428\n890184\n883033\n317778\n456130\n373364\n404297\n757369\n815335\n317046\n148887\n834163\n990592\n721319\n402371\n458279\n570263\n887791\n365893\n433095\n463049\n457336\n669570\n803506\n178817\n214599\n213431\n895767\n399711\n416813\n943019\n190514\n265042\n233594\n830330\n529328\n986218\n678464\n825445\n854483\n730167\n418496\n603658\n981987\n700630\n272130\n174137\n220085\n199466\n570950\n931425\n", "output": "799007\n1818\n489498\n167176\n641641\n521152\n950950\n121020\n952259\n514415\n890098\n883030\n317731\n455994\n373337\n404220\n757353\n815185\n316631\n148841\n833998\n990550\n721271\n402240\n457754\n570075\n887788\n365653\n433040\n462642\n456654\n669559\n803380\n178781\n214421\n213321\n895598\n399663\n416641\n942942\n190190\n264642\n233552\n830308\n529295\n985985\n677996\n825285\n854458\n730073\n418481\n603630\n981981\n700575\n272117\n173731\n220077\n199441\n570750\n931391\n"}, {"input": "1\n7976\n", "output": "7887\n"}, {"input": "1\n1001\n", "output": "99\n"}, {"input": "11\n12\n3030\n3112\n9900\n10000000000000000000000000000000000000000000\n99771122997711229977112299778700000006\n9999999999999999999999999999999999\n1282388888999998888888888988\n10101010999999999999999999\n28383928391839821938\n938883833333333333\n", "output": "11\n3003\n3030\n9898\n999999999999999999999999999999999999999999\n99771122997711229977112299778699999986\n9999999999999999999999999999999988\n1282388888999998888888888931\n10101010999999999999999988\n28383928391839821928\n938883833333333292\n"}, {"input": "1\n1000\n", "output": "99\n"}, {"input": "1\n100101\n", "output": "100100\n"}, {"input": "3\n100001\n100010\n100002\n", "output": "9999\n100001\n100001\n"}, {"input": "2\n1011\n100001\n", "output": "1010\n9999\n"}]}
{"statement": "Task: Given a positive integer $n$ and an integer $k$, find the largest number that can be obtained by swapping pairs of digits of $n$ for exactly $k$ swaps.\n\nInput: The input consists of a single line containing two integers $n$ and $k$, separated by a space. The input is provided through standard input.\n\nOutput: Output the largest number that can be obtained after exactly $k$ swaps.\n\nConstraints: The input integer $n$ is between $100$ and $10^{18}$, and the number of swaps $k$ is between $1$ and $18$.\n\nNote: Swapping pairs of digits of $n$ means that we can choose two digits at different positions and exchange their positions, as long as the swap does not result in a leading zero. The largest number that can be obtained after exactly $k$ swaps should be returned as output.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/swapfrenzy", "sample_test_cases": [{"input": "1374 2\n", "output": "7413\n"}, {"input": "210 1\n", "output": "201\n"}, {"input": "666 3\n", "output": "666\n"}]}
{"statement": "Task: Given two strings of equal length, calculate the Hamming distance between them. The Hamming distance is defined as the number of positions at which the corresponding symbols are different.\n\nInput: The input consists of two lines, each containing a string of characters 'A'-'Z' with a length between 1 and 100 characters inclusive. The strings have equal length. The input is provided through standard input.\n\nOutput: Output a single integer representing the Hamming distance between the two strings.\n\nConstraints: The input strings have equal length.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/470/G", "sample_test_cases": [{"input": "CODECHEF\nTOPCODER\n", "output": "6\n"}, {"input": "HAMMING\nDISTANC\n", "output": "6\n"}]}
{"statement": "Task: Given a 2D plane with Bergur positioned at the origin and n opponents represented as circles with a center and radius, find the maximum number of opponents Bergur can hit with one shot. A shot hits an opponent if and only if the ray from the origin intersects strictly more than one point of the opponent.\n\nInput: The input consists of an integer n denoting the number of opponents followed by n lines, each containing three real numbers representing the x and y coordinates of the center of the opponent circle and its radius. The input is provided through standard input.\n\nOutput: The output should contain a single integer representing the maximum number of opponents Bergur can hit with one shot.\n\nConstraints: There can be at most $10^5$ opponents, the x and y coordinates of the opponents can range from $-10^9$ to $10^9$, and the radius of the opponents can range from $0$ to $10^9$. All real numbers in the input will have at most six digits after the decimal point.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/strikercount", "sample_test_cases": [{"input": "5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n", "output": "2\n"}, {"input": "6\n2 2 2\n6 2 1\n10 2 1\n2 6 1\n6 6 1\n2 10 1\n", "output": "3\n"}]}
{"statement": "Task: Given an array $\\mbox{A}$ of $n$ integers, find the maximum possible value of a function $\\mathrm{~g~}$ defined in terms of the sum of a subarray and the maximum sum of a strictly increasing subsequence in that subarray. Also, find the number of subarrays of the smallest length that achieve this maximum value of $\\mathrm{~g~}$.\n\nInput: The input consists of two lines. The first line contains an integer $n$ denoting the number of elements in array $\\mbox{A}$. The second line contains $n$ space-separated integers describing the respective values of $a_0,a_1,\\ldots,a_{n-1}$. Input is provided through standard input.\n\nOutput: The output format consists of a single line containing two space-separated integers. The first integer is the maximum possible value of $\\mathrm{~g~}$, and the second integer is the number of subarrays of the smallest length that achieve this maximum value of $\\mathrm{~g~}$. \n\nConstraints: $1\\leq n\\leq2\\cdot10^5$ and $-40\\leq a_i\\leq40$. For the first subtask, $1\\leq n\\leq2000$ and $-10\\leq a_i\\leq10$. For the second subtask, $1\\leq n\\leq10^5$ and $-12\\leq a_i\\leq12$.\n\nMathematical Concepts: Array, subsequence, subarray, sum, strictly increasing subsequence, maximum, goodness, length, minimum, value, function.\n\nComputer Science Concepts: Input, output, standard input, constraints, subtask.", "editorial": "", "tag": "['Constructive algorithms']", "difficulties": "HARD", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/two-subarrays/problem", "sample_test_cases": [{"input": "3\n2 3 1\n", "output": "1 1\n"}]}
{"statement": "Task: Given n famous events, each with a range of acceptable dates [li, ri], choose n dates for the events such that there is at most one event per day and all events occur within their respective date ranges.\n\nInput: The input consists of an integer n, followed by n lines each containing two integers li and ri representing the earliest and latest acceptable dates for the i-th event. The input is provided through standard input.\n\nOutput: Print n integers representing the dates on which the events took place. If there are several solutions, print any of them. The output should be written to standard output.\n\nConstraints: 1 \u2264 n \u2264 100, and 1 \u2264 li \u2264 ri \u2264 107.", "editorial": "", "tag": "['Complete search', 'Sorting', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/45/D", "sample_test_cases": [{"input": "10\n1 1\n8 10\n1 7\n6 8\n5 7\n1 9\n8 8\n6 10\n1 4\n3 4\n", "output": "1 10 4 6 5 7 8 9 2 3 \n"}, {"input": "10\n1 4\n1 12\n5 7\n5 5\n2 5\n1 7\n1 10\n7 9\n8 9\n9 11\n", "output": "1 10 6 5 2 3 4 7 8 9 "}, {"input": "10\n6 7\n5 11\n5 10\n9 10\n11 12\n6 12\n7 11\n1 1\n5 9\n2 8\n", "output": "6 8 7 9 12 11 10 1 5 2 \n"}, {"input": "10\n6 9\n1 8\n6 12\n8 15\n2 5\n1 2\n7 15\n12 15\n5 12\n8 15\n", "output": "6 3 7 9 2 1 8 12 5 10 \n"}, {"input": "10\n2 4\n10 13\n1 10\n6 13\n9 12\n1 10\n13 15\n1 11\n1 7\n5 6\n", "output": "2 10 3 7 9 4 13 6 1 5 \n"}, {"input": "10\n10 10\n13 15\n6 14\n3 15\n4 15\n11 12\n11 15\n8 15\n1 11\n1 9\n", "output": "10 13 6 3 4 11 12 8 2 1 "}, {"input": "10\n1 2\n1 3\n1 9\n10 10\n4 4\n5 9\n2 5\n7 8\n2 10\n7 10\n", "output": "1 2 5 10 4 6 3 7 8 9 \n"}, {"input": "10\n2 8\n8 10\n1 6\n1 10\n7 10\n1 9\n6 8\n3 4\n1 3\n5 8\n", "output": "4 10 2 8 9 7 6 3 1 5 \n"}, {"input": "10\n1 6\n4 10\n1 5\n5 10\n1 8\n4 5\n1 8\n4 8\n5 10\n10 10\n", "output": "2 7 1 8 3 4 5 6 9 10 \n"}, {"input": "10\n1 2\n10 12\n5 12\n1 7\n1 6\n11 12\n3 8\n7 9\n11 12\n5 6\n", "output": "1 10 6 3 2 11 4 7 12 5 \n"}, {"input": "10\n12 12\n6 13\n5 9\n7 11\n1 12\n11 15\n3 13\n1 14\n6 8\n10 10\n", "output": "12 8 5 7 1 11 3 2 6 10 "}, {"input": "10\n1 10\n3 4\n8 10\n3 4\n5 9\n1 4\n7 10\n1 9\n1 8\n4 10\n", "output": "7 3 10 4 6 1 9 5 2 8 \n"}, {"input": "10\n15 15\n6 6\n1 6\n7 15\n3 13\n10 15\n6 13\n1 9\n2 14\n12 13\n", "output": "15 6 1 8 3 10 7 2 4 12 "}, {"input": "10\n4 12\n2 8\n1 12\n6 8\n4 6\n12 12\n3 10\n1 10\n3 3\n1 10\n", "output": "9 2 8 6 4 12 7 1 3 5 \n"}, {"input": "10\n3 11\n2 12\n7 12\n5 5\n6 6\n1 11\n11 11\n1 12\n1 10\n7 11\n", "output": "3 8 9 5 6 2 11 4 1 7 \n"}]}
{"statement": "Task: Given an undirected weighted graph with n vertices and m edges, where each edge has a weight w_{i,j} = (i-j)^2, add up to two new edges so that vertex 1 and vertex n become connected. Find the minimum cost to achieve that.\n\nInput: The first line of input contains T. Each test case starts with two integers, n and m, followed by m lines, each containing two integers i and j, representing a path between two different vertices i and j. It is guaranteed that there is at most one path between any two vertices, and the sum of n+m over all test cases is at most 5 * 10^5. Input arrives from standard input.\n\nOutput: The output should consist of T lines. Each line should contain a single integer giving the minimum cost for the corresponding test case.\n\nConstraints: 1 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5; 1 \u2264 T \u2264 20.", "editorial": "", "tag": "['Graph algorithms', 'Constructive algorithms', 'Shortest paths', 'Sorting', 'Complete search', 'Dynamic programming', 'Flows and cuts']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1486/E", "sample_test_cases": [{"input": "10 20\n10 1 15\n7 1 32\n5 3 36\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 779 1138 1898 49 196 520 324 490 "}, {"input": "2 1\n2 1 48\n", "output": "0 -1 "}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 779 1138 1898 49 196 520 324 490\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 13\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2166 779 1073 1813 49 196 485 324 490\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 13\n6 2 40\n8 9 19\n7 8 11\n7 1 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2166 779 1413 1813 49 196 485 324 490\n"}, {"input": "2 1\n2 1 3\n", "output": "0 -1\n"}, {"input": "3 2\n1 2 2\n2 3 2\n", "output": "0 -1 16\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 12\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2133 779 1010 1730 49 196 452 324 490\n"}, {"input": "10 20\n8 1 15\n7 1 32\n5 3 36\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 23\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 779 1138 1898 49 196 520 484 490\n"}, {"input": "3 2\n1 2 2\n3 3 2\n", "output": "0 -1 -1\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 30\n7 3 38\n10 7 12\n7 5 29\n7 6 12\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 1 50\n10 3 41\n1 8 3\n", "output": "0 2133 914 1010 1730 49 196 452 324 625\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 12\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 36\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 1973 779 1010 1730 49 196 452 324 490\n"}, {"input": "10 20\n8 1 15\n7 1 32\n5 3 36\n3 9 14\n3 4 19\n6 8 2\n9 6 18\n7 3 38\n10 7 23\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2131 755 1114 1874 25 194 450 466 466\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n10 6 12\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 1 50\n10 3 41\n1 8 3\n", "output": "0 2427 779 1363 2171 49 196 746 274 490\n"}, {"input": "10 20\n8 1 15\n7 1 32\n5 3 36\n3 9 14\n3 4 2\n6 8 4\n9 6 18\n7 3 38\n10 7 23\n7 5 29\n7 6 14\n6 3 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 637 740 1898 49 196 520 484 490\n"}]}
{"statement": "Task: Given a string $s$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\", replace each question mark with one of the letters \"a\", \"b\" and \"c\" and count the total number of subsequences \"abc\" in all resulting strings. Print the answer modulo $10^9+7$.\n\nInput: The input consists of two lines: the first line contains an integer $n$ $(3 \\le n \\le 200,000)$, the length of the string $s$, and the second line contains the string $s$ of length $n$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\". The input is provided through standard input.\n\nOutput: The output is a single integer, the total number of subsequences \"abc\" in all strings that can be obtained by replacing the question marks with letters \"a\", \"b\" and \"c\", modulo $10^9+7$.\n\nConstraints: The string $s$ can contain at most $10$ question marks.\n\nMathematical and Computer Science Concepts: Given a string $s$ of length $n$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\", we need to count the total number of subsequences \"abc\" in all resulting strings that can be obtained by replacing the question marks with letters \"a\", \"b\" and \"c\". We can represent each string as a sequence of length $n$ consisting of letters \"a\", \"b\" and \"c\". We need to find all possible sequences that can be obtained by replacing the question marks with letters \"a\", \"b\" and \"c\" and count the number of subsequences \"abc\" in all of these sequences. A subsequence of a string $t$ is a sequence that can be derived from the string $t$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. We need to print the answer modulo $10^9+7$.", "editorial": "", "tag": "['String algorithms', 'Combinatorics', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1426/F", "sample_test_cases": [{"input": "6\nac?b?c\n", "output": "24\n"}, {"input": "7\n???????\n", "output": "2835\n"}, {"input": "9\ncccbbbaaa\n", "output": "0\n"}, {"input": "5\na???c\n", "output": "46\n"}, {"input": "3\n???\n", "output": "1\n"}, {"input": "3\nabc\n", "output": "1\n"}, {"input": "100\naccbaccabccbbbbabacabaaccacbcbcababbbcbcbcccabcbbc?caaabcabcaaccbccabaaaaccacabbaabcbbccbbababaacbca\n", "output": "14634\n"}, {"input": "100\ncbcbacbbba?aacaccabbabcbcbbccaccabcbbcbabc?bbbcabaabaabbccabbcabacbbcbacacccbaabcbcbaccababbbbccbaca\n", "output": "53175\n"}, {"input": "100\ncabcaabababcacaabaaccbaabcabcbaccbbcaabbbbacabbbcacbabaaabcaccbbacbabccabaabbaccaaacaabbabcaacaacccc\n", "output": "7687\n"}, {"input": "100\n??b?a?a???aca?c?a?ca??????ac?b???aabb?c?ac??cbca???a?b????baa?ca??b???cbc??c??ab?ac???c?bcbb?c??abac\n", "output": "331264319\n"}, {"input": "200\n???c????????ba?????c?b???c???a??a?b??bb?c???cccc?ac?????c??????b??c?aa?cb?ca?a??cc?b???a?c???c??bbb?cacbbac?ccc?a?aca??b??a??c?c?a??????b??a????baa?a?a?????a????bb??b?????ac?b?aacb??c????????a?c??????\n", "output": "821576000\n"}, {"input": "300\ncc?aabbb?ba?cbcb??b??ababcabcb???b?bcb?ac??a?acc?cba?aa?a???bc?????ca??ac???cb??caaca???aabbc?cb?bb?a?bbb?a?cbbaccbcaab?a???baab?ac?ab??a?b?ac?acbcbb?cc??bbbcc?c??cab?cac?c???accb???c?cc?bb???b?bca?bbaccca??b?c?bb?b?a??ccb?c?abbc?aaa???bca?ccb?bb?c?b???c???bcac??ca?ba?a?cbabbb??b?aaaba??b??a?bbcbbcb\n", "output": "944418931\n"}, {"input": "3\nabc\n", "output": "1\n"}, {"input": "200\n???c????????ba?????c?b???c???a??a?b??bb?c???cccc?ac?????c??????b??c?aa?cb?ca?a??cc?b???a?c???c??bbb?cacbbac?ccc?a?aca??b??a??c?c?a??????b??a????baa?a?a?????a????bb??b?????ac?b?aacb??c????????a?c??????\n", "output": "821576000\n"}, {"input": "100\naccbaccabccbbbbabacabaaccacbcbcababbbcbcbcccabcbbc?caaabcabcaaccbccabaaaaccacabbaabcbbccbbababaacbca\n", "output": "14634\n"}]}
{"statement": "Task: Given a set S of non-empty words, find the maximal possible size of a set X of non-empty words such that each word of X is a prefix of some word from S, and X has no similar words. Similar words are defined as words that can be obtained from each other by removing their first letter.\n\nInput: The input data contains multiple test cases. The first line of the input data contains an integer t, the number of test cases. Each test case starts with an integer n, the number of words in the set S (1 \u2264 n \u2264 10^6). Each of the following n lines contains one non-empty word, consisting of lowercase English letters. All words in S are different. It is guaranteed that the total length of all words in one input data doesn't exceed 10^6. The input is read from standard input.\n\nOutput: For each test case, print one line that contains one integer m, the maximal number of words that X can contain.\n\nConstraints: The total length of all words in one input data doesn't exceed 10^6.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'String algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/856/B", "sample_test_cases": [{"input": "2\n3\naba\nbaba\naaab\n2\nab\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaba\ncaaa\n2\nab\na\n", "output": "8\n2\n"}, {"input": "2\n3\naba\nabab\nacaa\n2\nab\nb\n", "output": "7\n2\n"}, {"input": "2\n3\naab\nbaba\nacaa\n2\nbb\na\n", "output": "9\n2\n"}, {"input": "2\n3\naba\nbaba\naaab\n1\naa\na\n", "output": "6\n1\n"}, {"input": "2\n3\naba\nabab\naaac\n2\nab\nc\n", "output": "6\n3\n"}, {"input": "2\n3\naba\nbaca\naaab\n2\naa\na\n", "output": "7\n1\n"}, {"input": "2\n3\naba\nbaba\naaab\n2\nba\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaba\naaac\n2\nab\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaba\naaab\n2\nbb\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nabab\naaac\n2\nab\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaba\naaab\n2\naa\nb\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nabab\naaac\n2\nab\nb\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaca\naaab\n2\naa\nb\n", "output": "7\n2\n"}, {"input": "2\n3\naba\nbaba\nbaaa\n2\nab\na\n", "output": "6\n2\n"}]}
{"statement": "Task: Given a tree with $n$ nodes and $q$ sets of distinct nodes, calculate the sum of the product of the nodes in each unordered pair of nodes in each set multiplied by the distance between them, modulo $10^9+7$.\n\nInput: The input consists of an integer $n$ and an integer $q$, followed by $n-1$ lines each containing two integers $a$ and $b$ representing an undirected edge between nodes $a$ and $b$. This is followed by $2q$ lines, where the first line of each pair contains an integer $k$ representing the size of the set, and the second line contains $k$ space-separated integers representing the nodes in the set. Input is provided through standard input.\n\nOutput: Output $q$ lines, where the $i$-th line contains the sum of the product of the nodes in each unordered pair of nodes in the $i$-th set multiplied by the distance between them, modulo $10^9+7$.\n\nConstraints: $1\\leq n\\leq2\\cdot10^5$, $1\\leq a,b\\leq n$, $1\\leq q\\leq10^5$, $1\\leq k_i\\leq10^5$, the sum of $k_i$ over all $q$ does not exceed $2\\cdot10^{5}$, and all elements in each set are distinct.", "editorial": "", "tag": "['Tree algorithms']", "difficulties": "HARD", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/kittys-calculations-on-a-tree/problem", "sample_test_cases": [{"input": "7 3\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2\n2 4\n1\n5\n3\n2 4 5\n", "output": "16\n0\n106\n"}]}
{"statement": "Task: Given an alphabetical string $S$ of length $N$, find the number of palindromic alphabetical strings of length $2N$ that contain $S$ as a subsequence. The output should be the number of palindromic alphabetical strings modulo $10^9+7$.\n\nInput: The input consists of an integer $N$ and an alphabetical string $S$ of length $N$, received from standard input. \n\nOutput: The output should be a single integer representing the number of palindromic alphabetical strings of length $2N$ that contain $S$ as a subsequence, modulo $10^9+7$.\n\nConstraints: $0 \\leq N \\leq 200$.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/makingpalindromes", "sample_test_cases": [{"input": "2\nAA\n", "output": "51\n"}, {"input": "2\nAB\n", "output": "2\n"}]}
{"statement": "Task: Given two permutations p and s of length n, where each permutation contains the integers from 1 to n exactly once, find the minimum cost to transform p into s by swapping elements. The cost of swapping two elements is equal to the absolute difference between their indices.\n\nInput: The input consists of three lines. The first line contains a single integer n, the length of the permutations. The second line contains the initial permutation p. The third line contains the target permutation s. The input is read from standard input.\n\nOutput: The output should consist of three parts. The first line should contain a single integer, the minimum cost required to transform p into s. The second line should contain a single integer k, the number of swap operations needed to achieve this transformation. The third part should contain k lines, each line containing two integers i and j (1 \u2264 i, j \u2264 n, i \u2260 j), representing a swap operation to transform p into s. The output is printed to standard output.\n\nConstraints: 1 \u2264 n \u2264 2000, and each number from 1 to n occurs exactly once in both p and s.", "editorial": "", "tag": "['Greedy algorithms', 'Mathematics', 'Constructive algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/584/E", "sample_test_cases": [{"input": "4\n4 2 1 3\n3 2 4 1\n", "output": "3\n2\n3 4\n1 3\n"}, {"input": "1\n1\n1\n", "output": "0\n0\n"}, {"input": "2\n1 2\n1 2\n", "output": "0\n0\n"}, {"input": "3\n3 2 1\n1 3 2\n", "output": "2\n2\n2 3\n1 2\n"}, {"input": "6\n4 5 2 6 3 1\n1 5 2 4 6 3\n", "output": "5\n3\n5 6\n4 5\n1 4\n"}, {"input": "7\n7 4 6 2 5 1 3\n7 5 6 1 3 2 4\n", "output": "7\n5\n2 5\n5 6\n6 7\n4 5\n5 6\n"}, {"input": "10\n5 1 6 2 8 3 4 10 9 7\n5 1 6 2 8 3 4 10 9 7\n", "output": "0\n0\n"}, {"input": "9\n1 6 4 5 9 8 7 3 2\n2 3 7 8 9 5 4 6 1\n", "output": "20\n4\n1 9\n2 8\n3 7\n4 6\n"}, {"input": "8\n5 8 3 7 6 1 2 4\n1 2 4 5 8 3 7 6\n", "output": "15\n15\n5 6\n6 7\n7 8\n4 5\n5 6\n6 7\n3 4\n4 5\n5 6\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n"}, {"input": "11\n2 7 4 1 5 9 6 11 8 10 3\n7 4 1 5 9 6 11 8 10 3 2\n", "output": "10\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n"}, {"input": "12\n3 4 10 1 2 6 7 9 12 5 8 11\n5 8 11 3 4 10 1 2 6 7 9 12\n", "output": "27\n27\n9 10\n10 11\n11 12\n8 9\n9 10\n10 11\n7 8\n8 9\n9 10\n6 7\n7 8\n8 9\n5 6\n6 7\n7 8\n4 5\n5 6\n6 7\n3 4\n4 5\n5 6\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n"}, {"input": "10\n6 9 8 10 4 3 7 1 5 2\n6 1 7 9 4 8 3 10 5 2\n", "output": "10\n6\n4 7\n7 8\n6 7\n3 4\n4 6\n2 4\n"}, {"input": "10\n7 10 5 8 9 3 4 6 1 2\n7 10 5 8 9 3 4 6 1 2\n", "output": "0\n0\n"}, {"input": "4\n3 1 4 2\n4 3 2 1\n", "output": "3\n3\n2 3\n3 4\n1 2\n"}, {"input": "5\n5 1 3 4 2\n1 3 5 4 2\n", "output": "2\n2\n1 2\n2 3\n"}]}
{"statement": "Task: Given a line of English text, determine if it can be rendered as a haiku by counting the syllables in the words of the text. If it can be rendered as a haiku, print the haiku as three lines of output, where the first and third lines contain 5 syllables each, and the second line contains 7 syllables. If it cannot be rendered as a haiku, print the line of input with no changes.\n\nInput: A single line of text consisting of a sequence of one or more words separated by single blanks, where each word is a non-empty, maximal string of zero or more alphabetic characters (upper and/or lower-case) followed by zero or more non-blank, non-alphabetic characters. The total line length will not exceed 200 characters. Input arrives from standard input.\n\nOutput: If the words in the input line can be divided into a haiku, then print the haiku as three lines of output. Each line should be left-justified. A single space should separate each pair of words within a line. Upper/lower casing from the input should be preserved. Non-alphabetic characters terminating each word should be preserved. A word cannot be split across multiple lines. Output arrives on standard output.\n\nConstraints: The input line may contain words with up to 200 characters.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/haikuformatting", "sample_test_cases": [{"input": "Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\n", "output": "Blue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.\n"}, {"input": "Who would know if we had too few syllables?\n", "output": "Who would know if we had too few syllables?\n"}, {"input": "International contest- motivation high Programmers have fun!.\n", "output": "International\ncontest- motivation high\nProgrammers have fun!.\n"}, {"input": "Programming contest is stressing us all out. International pain.\n", "output": "Programming contest is stressing us all out. International pain.\n"}]}
{"statement": "Task: Given an array of n positive integers, find the maximum number of elements that can be removed from the array, where in each operation, an index i is chosen such that a_i = i, and a_i is removed from the array. Additionally, q independent queries are provided, where each query involves replacing the x first and y last elements of the array by n+1. For each query, the weight of the array after the replacements must be determined.\n\nInput: The input consists of two integers n and q, representing the length of the array and the number of queries, respectively. The next line contains n integers a_1, a_2, ..., a_n, representing the elements of the array. The i-th of the next q lines contains two integers x and y, representing the number of elements to be replaced from the beginning and the end of the array, respectively. The input is provided through standard input.\n\nOutput: The output consists of q lines, where each line contains a single integer, representing the answer to the corresponding query.\n\nConstraints: 1 \u2264 n, q \u2264 3 \u22c5 10^5, 1 \u2264 a_i \u2264 n, and 0 \u2264 x, y < n.", "editorial": "", "tag": "['Constructive algorithms', 'Sorting', 'Amortized analysis', 'Greedy algorithms', 'Data structures']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1405/E", "sample_test_cases": [{"input": "2 1\n1 1\n0 0\n", "output": "2\n"}, {"input": "1 1\n1\n0 0\n", "output": "1\n"}, {"input": "30 10\n1 1 3 3 5 2 1 8 2 6 11 5 2 6 12 11 8 5 11 3 14 8 16 13 14 25 16 2 8 17\n6 3\n0 15\n1 0\n9 2\n12 16\n1 0\n17 3\n14 13\n0 22\n3 10\n", "output": "3\n15\n16\n2\n0\n16\n0\n0\n8\n4\n"}, {"input": "13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 6\n5 0\n0 12\n", "output": "5\n11\n4\n1\n0\n"}, {"input": "5 2\n1 6 1 2 4\n0 0\n1 0\n", "output": "2\n0\n"}, {"input": "2 1\n1 0\n0 0\n", "output": "1\n"}, {"input": "1 1\n0\n0 0\n", "output": "0\n"}, {"input": "30 10\n1 1 3 3 5 2 1 8 2 6 11 5 2 6 12 11 8 5 11 3 14 3 16 13 14 25 16 2 8 17\n6 3\n0 15\n1 0\n9 2\n12 16\n1 0\n17 3\n14 13\n0 22\n3 10\n", "output": "3\n15\n16\n2\n0\n16\n0\n0\n8\n4\n"}, {"input": "13 5\n2 2 3 9 5 4 6 10 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n", "output": "5\n9\n5\n1\n0\n"}, {"input": "13 5\n2 2 3 9 5 4 6 5 7 4 3 11 13\n3 1\n0 0\n2 6\n5 0\n0 12\n", "output": "4\n11\n4\n1\n0\n"}, {"input": "5 2\n1 6 1 3 4\n0 0\n1 0\n", "output": "3\n0\n"}, {"input": "30 10\n1 1 3 3 5 2 1 8 2 6 11 5 2 6 12 11 8 5 11 3 14 3 29 13 14 25 16 2 8 17\n6 3\n0 15\n1 0\n9 2\n12 16\n1 0\n17 3\n14 13\n0 22\n3 10\n", "output": "3\n15\n12\n2\n0\n12\n0\n0\n8\n4\n"}, {"input": "30 10\n1 1 3 3 5 2 1 8 2 6 11 5 2 6 12 11 8 5 11 3 14 3 29 13 14 44 16 2 8 17\n6 3\n0 15\n1 0\n9 2\n12 16\n1 0\n17 3\n14 13\n0 22\n3 10\n", "output": "2\n15\n10\n1\n0\n10\n0\n0\n8\n4\n"}, {"input": "13 5\n2 2 3 9 5 4 6 5 11 8 3 11 13\n3 1\n0 0\n2 6\n5 0\n0 12\n", "output": "4\n9\n4\n1\n0\n"}, {"input": "5 2\n1 6 1 2 4\n0 1\n1 0\n", "output": "1\n0\n"}]}
{"statement": "Task: Given a positive integer n and a sequence of n positive integers c_1, c_2, ..., c_n, determine if there exists a rooted tree with n nodes such that each internal node has at least two children and the number of nodes in the subtree rooted at node i is c_i.\n\nInput: The first line of the input contains an integer n (1 \u2264 n \u2264 24), the number of nodes in the tree. The second line contains n positive integers, where the i-th integer represents c_i (1 \u2264 c_i \u2264 n). Input is provided through standard input.\n\nOutput: Output \"YES\" if there exists at least one tree following the given restrictions, otherwise output \"NO\". Output is provided through standard output.\n\nConstraints: n is between 1 and 24, and each c_i is between 1 and n.", "editorial": "", "tag": "['Bit manipulation', 'Constructive algorithms', 'Greedy algorithms', 'Tree algorithms', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/429/C", "sample_test_cases": [{"input": "4\n1 1 1 4\n", "output": "YES"}, {"input": "5\n1 1 5 2 1\n", "output": "NO"}, {"input": "13\n1 1 1 1 1 1 1 1 1 4 4 4 13\n", "output": "YES"}, {"input": "4\n1 1 1 3\n", "output": "NO"}, {"input": "24\n1 1 1 1 1 1 1 1 1 1 1 1 24 1 1 1 1 1 1 1 1 1 1 1\n", "output": "YES"}, {"input": "24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n", "output": "NO"}, {"input": "10\n1 1 1 1 7 1 1 1 4 10\n", "output": "YES"}, {"input": "24\n1 1 3 1 1 10 2 9 13 1 8 1 4 1 3 24 1 1 1 1 4 1 3 1\n", "output": "NO"}, {"input": "24\n2 3 20 1 4 9 1 3 1 2 1 3 1 2 1 1 1 2 1 2 4 24 2 1\n", "output": "NO"}, {"input": "24\n8 5 3 1 1 5 10 1 1 1 1 5 1 2 7 3 4 1 1 24 1 1 2 8\n", "output": "NO"}, {"input": "24\n1 1 1 3 4 1 24 1 1 3 1 1 1 5 14 2 17 1 2 2 5 1 1 6\n", "output": "NO"}, {"input": "1\n1\n", "output": "YES"}, {"input": "17\n6 1 1 1 3 1 1 17 6 1 4 1 1 1 3 1 1\n", "output": "YES"}, {"input": "23\n1 1 1 1 3 7 3 1 1 1 3 7 1 3 1 15 1 3 7 3 23 1 1\n", "output": "YES"}, {"input": "24\n1 24 1 1 1 3 8 1 1 3 1 1 6 1 1 1 1 3 5 1 3 7 13 1\n", "output": "YES"}]}
{"statement": "Task: Given a convex polygon with $n$ vertices in a two-dimensional coordinate system, calculate the expected distance a taxi will travel between two randomly chosen points within the polygon. The taxi can only travel along the streets, which are represented by the straight line segments connecting the vertices of the polygon. The distance between any two points $(x, y)$ and $(x_1, y_1)$ is defined as $|x-x_1|+|y-y_1|$.\n\nInput: The input consists of an integer $n$ $(3 \\le n \\le 100000)$ on the first line, representing the number of vertices of the convex polygon. The next $n$ lines each contain two integers $x$ and $y$ $(|x|, |y| < 10^9)$, representing the coordinates of the vertices of the polygon in clockwise order.\n\nOutput: The output is a single number, representing the expected distance a taxi will travel between two randomly chosen points within the polygon. The output should have a relative or absolute error less than $10^{-6}$.\n\nConstraints: There will be between 3 and 100000 vertices on the border of the polygon. The absolute values of the coordinates of the vertices will be less than $10^9$. The input is provided through standard input.", "editorial": "", "tag": "[]", "difficulties": "HARD", "source": "kattis", "url": "https://open.kattis.com/problems/randommanhattan", "sample_test_cases": [{"input": "4\n0 0\n0 1\n1 1\n1 0\n", "output": "0.666666666666667\n"}, {"input": "3\n0 0\n1 1\n2 0\n", "output": "0.733333333333333\n"}, {"input": "6\n0 0\n1 1\n3 2\n5 1\n4 -1\n2 -1\n", "output": "2.08448753462604\n"}]}
{"statement": "Task: Given a rectangular grid of size n \u00d7 m, where each cell contains either \".\" or \"X\", find the maximum time T for which a fire could have raged in the Berland Forest. At the beginning of minute 0, only the cells that contain \"X\" were on fire. At the end of each minute, the fire spread from every burning cell to each of its 8 neighboring cells. The fire was extinguished at the beginning of minute T. The task is to find the maximum value of T and a possible set of cells that could have been initially set on fire.\n\nInput: The input consists of an integer n and an integer m, followed by n lines containing m-character strings representing the rectangular grid of size n \u00d7 m. Each string contains \".\" or \"X\" characters. The input is provided through standard input.\n\nOutput: The output consists of two parts. In the first part, a single integer T is printed on a new line, representing the maximum time for which the fire could have raged. In the second part, n lines are printed, each containing m characters. The j-th character of the i-th line is \"X\" if the corresponding cell was on fire at the beginning of the fire, and \".\" otherwise.\n\nConstraints: 1 \u2264 n, m \u2264 10^6, and 1 \u2264 n \u22c5 m \u2264 10^6. The rectangular grid contains at least one \"X\".", "editorial": "", "tag": "['Sorting', 'Graph algorithms', 'Shortest paths']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1261/C", "sample_test_cases": [{"input": "3 8\nXXX..XXX\nXXXXXXXX\nXXXXXXXX\n", "output": "0\nXXX..XXX\nXXXXXXXX\nXXXXXXXX\n"}, {"input": "8 7\n.XXX...\n.XXX...\n.XXX...\n..XXX..\n...XXX.\n....XXX\n....XXX\n....XXX\n", "output": "0\n.XXX...\n.XXX...\n.XXX...\n..XXX..\n...XXX.\n....XXX\n....XXX\n....XXX\n"}, {"input": "20 20\n....................\n....................\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXXXX.\n..XXXXXXXXXXXXXXXXX.\n..XXXXXXXXXXXXXXXXX.\n..XXXXXXXXXXXXXXXXX.\n", "output": "6\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n........XXXXXX......\n........XXXXXX......\n........XXXXX.......\n........XXXXX.......\n........XXXXX.......\n........XXXXX.......\n....................\n....................\n....................\n....................\n....................\n....................\n"}, {"input": "10 12\n...X..X..XX.\n.....X......\n..X.........\n...X..XX...X\n.......X.X..\n....X...X.X.\n..........X.\n......XXX...\n......X..X..\n..X....XX..X\n", "output": "0\n...X..X..XX.\n.....X......\n..X.........\n...X..XX...X\n.......X.X..\n....X...X.X.\n..........X.\n......XXX...\n......X..X..\n..X....XX..X\n"}, {"input": "13 12\n............\n...XXX..XXXX\n.XXXXXX.XXXX\n.XXXXXX.XXXX\n.XXXXXXXXXXX\n.XXXXXXXXXXX\n.XXX..XXXXXX\nXXXXXXXX....\nXXXXXXXXXX..\nXXXXXXXXXXX.\n.....XXXXXXX\n.....XXXXXXX\n.....XXXXXXX\n", "output": "1\n............\n............\n....X....XX.\n..XXXX...XX.\n..XXXX...XX.\n..X....XXXX.\n..X.........\n..X.........\n.XXXXXX.....\n......XXX...\n......XXXX..\n......XXXXX.\n............\n"}, {"input": "7 5\n..XXX\n..XXX\n..XXX\n.XXX.\nXXX..\nXXX..\nXXX..\n", "output": "0\n..XXX\n..XXX\n..XXX\n.XXX.\nXXX..\nXXX..\nXXX..\n"}, {"input": "7 11\nXXX.XXX.XXX\nXXX.XXX.XXX\nXXX.XXX.XXX\n.XXXXXXXXX.\n..XXX.XXX..\n..XXX.XXX..\n..XXX.XXX..\n", "output": "0\nXXX.XXX.XXX\nXXX.XXX.XXX\nXXX.XXX.XXX\n.XXXXXXXXX.\n..XXX.XXX..\n..XXX.XXX..\n..XXX.XXX..\n"}, {"input": "7 7\nXXXXXXX\nXXXXXXX\nXXXXXXX\nXX...XX\nXXXXXXX\nXXXXXXX\nXXXXXXX\n", "output": "0\nXXXXXXX\nXXXXXXX\nXXXXXXX\nXX...XX\nXXXXXXX\nXXXXXXX\nXXXXXXX\n"}, {"input": "1 1\nX\n", "output": "0\nX\n"}, {"input": "15 14\n..............\n..XXXXXXXX....\n..XXXXXXXXXXXX\n..XXXXXXXXXXXX\nXXXXXXXXXXXXXX\nXXXXXXXXXXXXXX\nXXXXXXXXXXXXXX\nXXXXXXXXXXXXX.\nXXXXXXXXXXXXX.\n..XXXXXXXXX...\n.XXXXXXXXXXX..\n.XXXXXXXXXXX..\n.XXXXXXXXXXX..\n.XXXXXXXXXXX..\n.XXXXXXXXXXX..\n", "output": "2\n..............\n..............\n..............\n....XXXX......\n....XXXXXXXX..\n....XXXXXXX...\n..XXXXXXXXX...\n....XXXXX.....\n....XXXXX.....\n....XXXXX.....\n....XXXXX.....\n....XXXXX.....\n...XXXXXXX....\n..............\n..............\n"}, {"input": "3 6\nXXXXXX\nXXXXXX\nXXXXXX\n", "output": "1\n......\n.XXXX.\n......\n"}, {"input": "4 11\n.XXX.XXX...\n.XXXXXXX...\n.XXXXXXX...\n.XXX.XXX...\n", "output": "0\n.XXX.XXX...\n.XXXXXXX...\n.XXXXXXX...\n.XXX.XXX...\n"}, {"input": "5 5\n..XXX\n..XXX\nXXXXX\nXXXX.\nXXX..\n", "output": "0\n..XXX\n..XXX\nXXXXX\nXXXX.\nXXX..\n"}, {"input": "17 17\n.................\n.....XXXXXXXXX...\n.....XXXXXXXXXXX.\n.....XXXXXXXXXXXX\n..XXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n.XXXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXX\n..XXXXXXXXXXXXXXX\n.....XXXXXXXXXXXX\n.....XXXXXXXXX...\n.....XXXXXXXXX...\n", "output": "3\n.................\n.................\n.................\n.................\n........XXX......\n........XXXXX....\n........XXXXXX...\n.....XXXXXXXXX...\n....XXXXXXXXXX...\n.....XXXXXXXXX...\n.....XXXXXXXXX...\n........XXXXXX...\n........XXX......\n........XXX......\n.................\n.................\n.................\n"}, {"input": "8 7\n.XXX...\n.XXX...\n.XXX...\n..XXX..\n...XXX.\n....XXX\nXXX....\n....XXX\n", "output": "0\n.XXX...\n.XXX...\n.XXX...\n..XXX..\n...XXX.\n....XXX\nXXX....\n....XXX\n"}]}
