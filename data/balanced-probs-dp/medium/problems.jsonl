{"statement": "Task: Given a system of pipes consisting of two rows, each with $n$ pipes, and six types of pipes, determine whether it is possible to turn some pipes in a way that water can flow from $(1,0)$ to $(2,n+1)$. Each pipe can be rotated $90$ degrees clockwise or counterclockwise.\n\nInput: The input consists of an integer $q$ representing the number of queries, followed by $q$ queries. Each query consists of an integer $n$ and two rows of $n$ digits each, representing the types of pipes in the system. The input is provided through standard input.\n\nOutput: The output consists of $q$ lines, each containing either \"YES\" or \"NO\" depending on whether it is possible to turn the pipes in a way that water can flow from $(1,0)$ to $(2,n+1)$.\n\nConstraints: $1 \\leq q \\leq 10^4$, $1 \\leq n \\leq 2 \\cdot 10^5$, and the sum of $n$ over all queries does not exceed $2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Implementation']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1234/C", "sample_test_cases": [{"input": "6\n7\n2323216\n1615124\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n345\n2\n46\n54\n", "output": "YES\nYES\nYES\nNO\nYES\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n4\n2\n14\n24\n2\n12\n34\n3\n536\n345\n2\n46\n54\n", "output": "YES\nYES\nYES\nNO\nYES\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n525\n2\n46\n54\n", "output": "YES\nYES\nYES\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1245193\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n525\n2\n46\n54\n", "output": "NO\nYES\nYES\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1245193\n1\n1\n4\n2\n13\n24\n2\n12\n44\n3\n536\n525\n2\n46\n54\n", "output": "NO\nNO\nYES\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n2\n2\n14\n24\n2\n12\n34\n3\n536\n345\n2\n46\n54\n", "output": "YES\nNO\nYES\nNO\nYES\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n4\n2\n31\n24\n2\n12\n34\n3\n404\n525\n2\n46\n54\n", "output": "YES\nYES\nNO\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1245193\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n525\n2\n61\n62\n", "output": "NO\nYES\nYES\nNO\nNO\nYES\n"}, {"input": "6\n7\n2323216\n1245193\n1\n3\n4\n2\n12\n24\n2\n12\n65\n3\n536\n525\n2\n46\n54\n", "output": "NO\nYES\nNO\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n5\n2\n23\n41\n2\n12\n34\n3\n536\n345\n2\n46\n54\n", "output": "YES\nYES\nNO\nNO\nYES\nNO\n"}, {"input": "6\n7\n2323216\n1245193\n1\n3\n4\n2\n13\n24\n2\n12\n34\n3\n536\n435\n2\n61\n62\n", "output": "NO\nYES\nYES\nNO\nYES\nYES\n"}, {"input": "6\n7\n4026438\n1245193\n1\n2\n4\n2\n22\n24\n2\n12\n44\n3\n536\n525\n2\n46\n54\n", "output": "NO\nNO\nNO\nNO\nNO\nNO\n"}, {"input": "6\n7\n2323216\n1245193\n1\n3\n4\n2\n13\n42\n2\n12\n34\n3\n536\n435\n2\n61\n62\n", "output": "NO\nYES\nNO\nNO\nYES\nYES\n"}, {"input": "6\n7\n2323216\n1615124\n1\n3\n1\n2\n13\n24\n2\n16\n34\n3\n536\n345\n2\n46\n55\n", "output": "YES\nNO\nYES\nYES\nYES\nNO\n"}, {"input": "6\n7\n2323216\n1615124\n1\n2\n4\n2\n22\n23\n2\n12\n34\n3\n536\n345\n2\n46\n20\n", "output": "YES\nNO\nNO\nNO\nYES\nNO\n"}]}
{"statement": "Task: Given a sequence of n integers, find the length of the longest alternating subsequence. An alternating subsequence is defined as a subsequence where the elements satisfy the condition that they are either in increasing or decreasing order, with the order alternating between increasing and decreasing.\n\nInput: The input consists of a single line containing an integer n (1 <= n <= 10^5), followed by n integers a1, a2, ..., an, representing the sequence.\n\nOutput: Output a single integer, the length of the longest alternating subsequence in the input sequence.\n\nConstraints: The input sequence has a length between 1 and 10^5, inclusive. The integers in the sequence are bounded by -10^9 and 10^9. The expected time complexity of the solution is O(n), and the expected space complexity is O(1).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-alternating-subsequence5951/1", "sample_test_cases": [{"input": "nums = {1,5,4}", "output": "3"}]}
{"statement": "Task: Given an array of non-negative integers arr[] and an integer sum, count all subsets of the given array with a sum equal to the given sum. The answer should be output modulo 10^9+7.\n\nInput: The input consists of an integer N, the size of the array, followed by N non-negative integers representing the array elements, and an integer sum. The input is taken from standard input.\n\nOutput: The output should be a single integer representing the number of subsets of the given array that add up to the given sum.\n\nConstraints: The product of N and sum should be between 1 and 10^6, and each array element should be between 0 and 10^6.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1", "sample_test_cases": [{"input": "N = 6, arr[] = {2, 3, 5, 6, 8, 10}\r\n       sum = 10", "output": "3"}, {"input": "N = 5, arr[] = {1, 2, 3, 4, 5}\r\n       sum = 10", "output": "3"}]}
{"statement": "Task: Given an undirected graph with N nodes and M edges, and assuming both players play optimally, determine the winner of a game played by two players, Mouse and Cat, who alternate turns. The Mouse starts at node 1 and goes first, the Cat starts at node 2 and goes second, and there is a Hole at node 0. During each player's turn, they must travel along one edge of the graph that meets where they are. The game can end in 3 ways: if ever the Cat occupies the same node as the Mouse, the Cat wins; if ever the Mouse reaches the Hole, the Mouse wins; if ever a position is repeated, the game is a draw.\n\nInput: The input is a list of lists representing an undirected graph, where graph[a] is a list of all nodes b such that ab is an edge of the graph. The input arrives from standard input.\n\nOutput: The output is an integer: 1\u00a0if the game is won by Mouse, 2\u00a0if the game is won by Cat, and 0\u00a0if the game is a draw.\n\nConstraints: The input graph has a length between 3 and 50, and it is guaranteed that graph[1] is non-empty and that graph[2] contains a non-zero element.", "editorial": "", "tag": "['Graph algorithms', 'Directed graphs', 'Dynamic programming', 'Game theory', 'Mathematics']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/cat-and-mouse/", "sample_test_cases": [{"input": [[[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3], [], []]], "output": 0}]}
{"statement": "Task: Given a mobile numeric keypad, where only certain buttons can be pressed and some buttons cannot be pressed, find the number of possible numbers of a given length that can be formed. \n\nInput: The input is a single integer N, which represents the length of the numbers to be formed. The input is provided through standard input. \n\nOutput: The output is a single integer, which represents the number of possible numbers of length N that can be formed using the given rules. \n\nConstraints: The input integer N is constrained such that 1 \u2264 N \u2264 25. The mobile numeric keypad has 10 buttons representing the digits from 0 to 9. The buttons can be pressed in a sequence to form a number. The buttons that can be pressed are those that are up, left, right, or down to the current button or the current button itself (like 00,11, etc.). The bottom row corner buttons (i.e. * and #) cannot be pressed.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/mobile-numeric-keypad5456/1", "sample_test_cases": [{"input": "1", "output": "10"}, {"input": "N = 2", "output": "36"}]}
{"statement": "Task: Given a string s consisting of digits 0-9 and a number N, count the number of subsequences that are divisible by N. Output the count of such subsequences modulo 10^9+7.\n\nInput: The input consists of a string s and an integer N, which are provided through standard input.\n\nOutput: The output should be a single integer, which is the count of subsequences that are divisible by N modulo 10^9+7.\n\nConstraints: 1 \u2264 |s|*N \u2264 10^6.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/number-of-subsequences-in-a-string-divisible-by-n5947/1", "sample_test_cases": [{"input": "s = \"1234\", N = 4", "output": "4"}, {"input": "s = \"330\", N = 6", "output": "4"}]}
{"statement": "Task: Given an array of integers arr, find the number of sub-arrays with an odd sum. The answer must be computed modulo 10^9 + 7.\n\nInput: The input consists of an array of integers, which arrives from standard input. The first line of input contains a single integer n, the length of the array. The second line contains n integers a1, a2, ..., an, representing the elements of the array. It is guaranteed that 1 <= n <= 10^5 and 1 <= ai <= 100.\n\nOutput: The output should consist of a single integer, the number of sub-arrays with an odd sum.\n\nConstraints: The length of the array is at most 10^5 and each integer is between 1 and 100.", "editorial": "", "tag": "['Mathematics', 'Dynamic programming', 'Data structures', 'Range queries']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/", "sample_test_cases": [{"input": [[1, 3, 5]], "output": 4}]}
{"statement": "Task: Given an array of integers, find the number of unique multisets that can be formed such that the bitwise XOR of all the elements of the multiset is a prime number. The program needs to find the number of valid multisets and print it modulo $10^9+7$.\n\nInput: The input consists of an integer $q$ denoting the number of queries, followed by $2q$ lines describing each query. The first line of each query contains an integer $n$ denoting the number of integers in the array, and the second line contains $n$ space-separated integers describing the respective values of $a_0,a_1,\\ldots,a_{n-1}$. The input arrives from standard input.\n\nOutput: For each query, the program needs to find the number of unique multisets that can be formed using numbers from the array such that the bitwise XOR of all the multiset's elements is prime. The answer must be printed modulo $10^9+7$ on a new line.\n\nConstraints: The input constraints are $1\\leq q\\leq10$, $1\\leq n\\leq1000000$, and $3500\\leq a_i\\leq4500$. The program must ensure that the output is within the range of a 32-bit signed integer.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/prime-xor/problem", "sample_test_cases": [{"input": "1   \n3   \n3511 3671 4153  \n", "output": "4\n"}]}
{"statement": "Task: Given two integers n and x, find the total number of ways n can be expressed as the sum of the xth power of unique natural numbers. Return the number of ways modulo 10^9+7.\n\nInput: The input consists of two integers n and x, which represent the number to be expressed and the power to which the natural numbers are raised, respectively. The input is provided through standard input.\n\nOutput: The function should return a single integer, which represents the total number of ways n can be expressed as the sum of xth power of unique natural numbers.\n\nConstraints: The input number n is constrained to be between 1 and 1000, while the power x is constrained to be between 1 and 5.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/express-as-sum-of-power-of-natural-numbers5647/1", "sample_test_cases": [{"input": "n = 10, x = 2", "output": "1"}, {"input": "n = 100, x = 2", "output": "3"}]}
{"statement": "Task: Given an array cost[] of positive integers of size N and an integer W, cost[i] represents the cost of i kg packet of oranges, the task is to find the minimum cost to buy W kgs of oranges. If it is not possible to buy exactly W kg oranges then the output will be -1.\n\nInput: The input consists of three parameters: an integer N representing the size of the array, an integer W representing the amount of oranges to buy, and an array cost[] representing the cost of each packet of oranges. The input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum cost to buy the required amount of oranges.\n\nConstraints: 1 \u2264 N, W \u2264 2*10^{2}, -1 \u2264 cost[i] \u2264 10^{5}, and cost[i] \u2260 0.\n\nMathematical Concepts: The problem involves finding the minimum cost to buy a certain amount of oranges given the cost of each packet of oranges. This can be represented as a mathematical optimization problem where we need to minimize the cost function subject to the constraint that we need to buy exactly W kgs of oranges. \n\nComputer Science Concepts: The input is provided through standard input and the output is a single integer. The problem can be solved using dynamic programming where we need to find the minimum cost to buy different amounts of oranges and use this information to find the minimum cost to buy W kgs of oranges. The time complexity of the solution is O(N*W) and the space complexity is O(N*W).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/minimum-cost-to-fill-given-weight-in-a-bag1956/1", "sample_test_cases": [{"input": "N = 5, arr[] = {20, 10, 4, 50, 100}\r\nW = 5", "output": "14"}, {"input": "N = 5, arr[] = {-1, -1, 4, 3, -1}\r\nW = 5", "output": "-1"}]}
{"statement": "Task: Given an array of n integers, the task is to find the minimum number of operations required to make all the elements of the array equal to 1. In each operation, two adjacent elements are chosen and one of them is replaced with their greatest common divisor.\n\nInput: The input consists of two lines. The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers, the elements of the array. The input is provided through standard input.\n\nOutput: The output is a single integer, which is the minimum number of operations required to make all the elements of the array equal to 1. If it is not possible to make all the elements of the array equal to 1, then -1 is printed.\n\nConstraints: The input array contains n integers, where 1 \u2264 n \u2264 2000 and 1 \u2264 ai \u2264 109. The greatest common divisor of any two adjacent elements in the array can be computed in O(log(ai)) time.", "editorial": "", "tag": "['Greedy algorithms', 'Complete search', 'Number theory', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/892/C", "sample_test_cases": [{"input": "15\n2 6 6 6 3 3 3 15 5 5 5 7 5 5 5\n", "output": "15\n"}, {"input": "3\n30 14 21\n", "output": "4\n"}, {"input": "12\n10 10 14 14 14 14 14 14 14 14 21 21\n", "output": "20\n"}, {"input": "2\n1 1\n", "output": "0\n"}, {"input": "2\n1000000000 1000000000\n", "output": "-1\n"}, {"input": "5\n2 1 1 1 2\n", "output": "2\n"}, {"input": "6\n6 15 10 6 15 10\n", "output": "7\n"}, {"input": "4\n2 1 1 1\n", "output": "1\n"}, {"input": "4\n1 1 1 1\n", "output": "0\n"}, {"input": "3\n15 6 10\n", "output": "4\n"}, {"input": "3\n42 15 35\n", "output": "4\n"}, {"input": "6\n2 3 4 1 1 1\n", "output": "3\n"}, {"input": "4\n2 6 9 1\n", "output": "3\n"}, {"input": "9\n10 10 10 10 10 10 10 10 21\n", "output": "9\n"}, {"input": "15\n10 10 10 10 10 10 21 21 21 21 21 21 21 21 21\n", "output": "15\n"}]}
{"statement": "Task: Given a row of numbers A and an integer K, partition the row into at most K adjacent groups such that the sum of the average of each group is maximized. The partition must use every number in A, and scores are not necessarily integers.\n\nInput: The input consists of a row of numbers A and an integer K, which are read from standard input. The length of A is between 1 and 100, the values of A[i] are between 1 and 10000, and K is between 1 and the length of A.\n\nOutput: The output is a single floating-point number, which is the largest score we can achieve.\n\nConstraints: Answers within 10^-6 of the correct answer will be accepted as correct.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Range queries']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/largest-sum-of-averages/", "sample_test_cases": [{"input": [[9, 1, 2, 3, 9], 3], "output": 20.0}]}
{"statement": "Task: Given a row of m houses, each with one of n colors, and an m * n matrix cost representing the cost of painting a house with a particular color, find the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. A neighborhood is a maximal group of continuous houses that are painted with the same color. Some houses have already been painted and cannot be painted again.\n\nInput: The input consists of an integer m representing the number of houses in the row, an integer n representing the number of possible colors, an array houses of length m representing the colors of the houses (0 if unpainted), an m * n matrix cost representing the cost of painting a house with a particular color, and an integer target representing the desired number of neighborhoods. The input is provided through standard input.\n\nOutput: The output should be an integer representing the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If this is not possible, return -1.\n\nConstraints: 1 <= m <= 100, 1 <= n <= 20, 1 <= target <= m, 0 <= houses[i] <= n, and 1 <= cost[i][j] <= 10^4.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/paint-house-iii/", "sample_test_cases": [{"input": [[0, 0, 0, 0, 0], [[1, 10], [10, 1], [10, 1], [1, 10], [5, 1], [], []], 5, 2, 3], "output": 9}]}
{"statement": "Task: Given two initial terms and an integer n, compute the nth term of a modified Fibonacci sequence, where each term is the sum of the previous two terms, with the second term squared.\n\nInput: The input consists of a single line containing three integers t1, t2, and n, where t1 and t2 are the first two terms of the modified Fibonacci sequence, and n is the index of the term to compute.\n\nOutput: The output should be a single integer, the nth term of the modified Fibonacci sequence.\n\nConstraints: The values of t1 and t2 are between 0 and 2, inclusive. The value of n is between 3 and 20, inclusive. The value of tn may exceed the range of a 64-bit integer.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/fibonacci-modified/problem", "sample_test_cases": [{"input": "0 1 5\n", "output": "5\n"}]}
{"statement": "Task: Given a string $s$ consisting of digits 0-9, find the minimum number of characters that need to be erased from $s$ to make it a good string. A string is good if its left cyclic shift is equal to its right cyclic shift.\n\nInput: The first line of input contains a single integer $t$ representing the number of test cases. For each test case, the first line contains two integers $n$ and $m$, where $n$ is the length of the string $s$ and $m$ is the number of test cases. The second line contains the string $s$ of length $n$. The input is provided through standard input.\n\nOutput: The output consists of $t$ lines, one for each test case. Each line should contain a single integer representing the minimum number of characters that need to be erased from the corresponding input string to make it good.\n\nConstraints: $1 \\le t \\le 1000$, $2 \\le n \\le 2 \\cdot 10^5$, the total length of all strings does not exceed $2 \\cdot 10^5$. Each character in the string is a digit between 0 and 9.", "editorial": "", "tag": "['Dynamic programming', 'Amortized analysis', 'Complete search', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1389/C", "sample_test_cases": [{"input": "3\n95831\n100120013\n252525252525\n", "output": "3\n5\n0\n"}, {"input": "1\n1111\n", "output": "0\n"}, {"input": "1\n1111\n", "output": "0\n"}, {"input": "1\n0111\n", "output": "1\n"}, {"input": "3\n95831\n100120013\n289014129764\n", "output": "3\n5\n8\n"}, {"input": "1\n0011\n", "output": "2\n"}, {"input": "1\n0101\n", "output": "0\n"}, {"input": "3\n142345\n100120013\n253858690946\n", "output": "4\n5\n8\n"}, {"input": "3\n97433\n36392895\n317241747758\n", "output": "3\n6\n8\n"}, {"input": "3\n97433\n585375\n317241747758\n", "output": "3\n3\n8\n"}, {"input": "3\n97433\n193252\n317241747758\n", "output": "3\n4\n8\n"}, {"input": "3\n97433\n270296\n1224375636859\n", "output": "3\n4\n9\n"}, {"input": "3\n97433\n491979\n2183677498773\n", "output": "3\n3\n9\n"}, {"input": "3\n95831\n100120013\n443352605999\n", "output": "3\n5\n9\n"}, {"input": "3\n95831\n100120013\n117590749739\n", "output": "3\n5\n6\n"}]}
{"statement": "Task: Given an array of integers representing the initial distribution of chocolates among colleagues, equalize the distribution by performing a series of operations. In each operation, a colleague can be given $1$, $2$, or $5$ pieces of chocolate, and everyone who receives chocolate in that round must receive the same number of pieces. Find the minimum number of operations required to equalize the distribution.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains an integer $n$, the number of colleagues, and the size of the array. The second line contains $n$ space-separated integers, representing the initial distribution of chocolates. The input is provided through standard input.\n\nOutput: The output should consist of a single integer for each test case, representing the minimum number of operations required to equalize the distribution of chocolates.\n\nConstraints: Each test case has at most $10000$ colleagues, and the initial number of chocolates each colleague has is less than $1000$. There can be at most $100$ test cases.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/equal/problem", "sample_test_cases": [{"input": "1\n4\n2 2 3 7\n", "output": "2\n"}, {"input": "1\n3\n10 7 12\n", "output": "3\n"}]}
{"statement": "Task: Given an infinite number of 4 types of lego blocks of sizes given as (depth x height x width), the task is to build a wall of height $n$ and width $m$ using these blocks. The wall should be one solid structure without any holes or straight vertical breaks across all rows of bricks. The problem requires finding the number of valid wall formations modulo $(10^9+7)$.\n\nInput: The first line of input contains the number of test cases $t$. Each of the next $t$ lines contains two space-separated integers $n$ and $m$, representing the height and width of the wall, respectively.\n\nOutput: The output should consist of $t$ lines. Each line should contain a single integer representing the number of valid wall formations modulo $(10^9+7)$.\n\nConstraints: $1\\leq t\\leq100$, $1\\leq n,m\\leq1000$.\n\nMathematical concepts: The problem involves combinatorics and modular arithmetic. The task is to find the number of ways to arrange the given lego blocks to form a wall of a specific height and width. The solution requires counting the number of valid permutations of the blocks while satisfying the given conditions. The modulo operation is used to handle large numbers and prevent integer overflow.\n\nComputer science concepts: The problem involves input/output operations, looping constructs, and conditional statements. The input is read from standard input and the output is printed to standard output. The looping construct is used to iterate over multiple test cases. The conditional statement is used to check if a permutation is valid or not.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/lego-blocks/problem", "sample_test_cases": [{"input": "4\n2 2\n3 2\n2 3\n4 4\n", "output": "3  \n7  \n9  \n3375\n"}]}
{"statement": "Task: Given a string of length N, find the number of palindromic subsequences (not necessarily distinct) present in the string. Return the answer modulo 10^9+7.\n\nInput: The input consists of a single string of length N.\n\nOutput: Return a single integer representing the number of palindromic subsequences present in the input string, modulo 10^9+7.\n\nConstraints: The length of the input string is between 1 and 1000. The time complexity of the solution should be O(N^2) and the space complexity should be O(N^2).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-palindromic-subsequences/1", "sample_test_cases": [{"input": "Str = \"abcd\"", "output": "4"}, {"input": "Str = \"aab\"", "output": "4"}]}
{"statement": "Task: Given a tree represented as a graph with $n$ vertices and $n-1$ edges, divide the tree into two disjoint sets of vertices such that no vertex in one set is connected to another vertex in the same set. Compute the number of ways to divide the tree modulo $10^9+7$.\n\nInput: The input consists of an integer $n$ representing the number of vertices in the tree, followed by $n-1$ lines each containing two space-separated integers $u$ and $v$ representing an edge connecting vertices $u$ and $v$. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the number of ways to divide the tree between two disjoint sets of vertices such that no vertex in one set is connected to another vertex in the same set. The output should be printed to standard output.\n\nConstraints: $2\\leq n\\leq10^5$, $1\\leq u,v\\leq n$, and it is guaranteed that all vertices are connected.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/kingdom-division/problem", "sample_test_cases": [{"input": "5\n1 2\n1 3\n3 4\n3 5\n", "output": "4\n"}]}
{"statement": "Task: Given the area and cost of small, medium, and large pizzas, find the minimum cost to buy at least X units of pizza.\n\nInput: The input consists of seven integers X, S, M, L, CS, CM, and CL, where X is the minimum required area of pizza, S, M, and L are the areas of small, medium, and large pizzas respectively, and CS, CM, and CL are their respective costs. The input is read from standard input.\n\nOutput: The output should be a single integer, which represents the minimum cost required to buy at least X units of pizza.\n\nConstraints: 1 <= X <= 500, 1 <= S <= M <= L <= 100, and 1 <= CS <= CM <= CL <= 100.\n\nMathematical Concepts: Integers, arithmetic operations (addition, multiplication), inequalities.\n\nComputer Science Concepts: Standard input/output, function definition, time and space complexity.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/pizza-mania0155/1", "sample_test_cases": [{"input": "X = 16, S = 3, M = 6, L = 9, CS = 50, CM = 150, CL = 300", "output": "300"}, {"input": "X = 10, S = 1, M = 3, L = 10, CS = 10, CM = 20, CL = 50", "output": "50"}]}
{"statement": "Task: Given a set of $n$ integers, divide the set into two subsets such that the sum of absolute differences between the integers in the two subsets is minimized. One subset must contain exactly $k$ integers.\n\nInput: The first line of input contains two space-separated integers $n$ and $k$, where $n$ is the number of integers in the set and $k$ is the number of integers in the first subset. The second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ representing the values of the integers in the set. Input is provided through standard input.\n\nOutput: A single integer, which is the minimum sum of absolute differences between the two subsets.\n\nConstraints: $1\\leq k<n\\leq3000$, $1\\leq a_i\\leq10^9$. For some test cases, $n$ is smaller.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/fair-cut/problem", "sample_test_cases": [{"input": "4 2\n4 3 1 2\n", "output": " 6\n"}, {"input": "4 1\n3 3 3 1\n", "output": "2\n"}]}
{"statement": "Task: Given a binary tree represented by its root node, find the length of the longest ZigZag path in the tree. A ZigZag path is defined as a path that alternates between moving left and right child nodes. The length of the path is the number of nodes visited minus one.\n\nInput: The input is a binary tree represented by its root node. The binary tree can have at most 50000 nodes. The value of each node is an integer between 1 and 100. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the length of the longest ZigZag path in the given binary tree.\n\nConstraints: The binary tree can have at most 50000 nodes. The value of each node is an integer between 1 and 100.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/", "sample_test_cases": []}
{"statement": "Task: Given $t$ queries, each query consisting of $n$ models with sizes $s_1, s_2, \\ldots, s_n$, find the maximum number of models that Orac can buy such that the arrangement of the models in increasing order of indices is beautiful. An arrangement is beautiful if for any two adjacent models with indices $i_j$ and $i_{j+1}$, $i_{j+1}$ is divisible by $i_j$ and $s_{i_j} < s_{i_{j+1}}$.\n\nInput: The first line of input contains an integer $t$ which is the number of queries. For each query, the first line contains an integer $n$ which is the number of models in the shop. The second line contains $n$ integers $s_1, s_2, \\ldots, s_n$ which are the sizes of the models. The input is provided through standard input.\n\nOutput: The output should consist of $t$ lines, where each line should contain a single integer which is the maximum number of models that Orac can buy for the corresponding query.\n\nConstraints: $1 \\le t \\le 100$, $1 \\le n \\le 100\\,000$, $1 \\le s_i \\le 10^9$, and the sum of all $n$ values is at most $100\\,000$.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1350/B", "sample_test_cases": [{"input": "4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 4 3 2 1\n1\n9\n", "output": "2\n3\n1\n1\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1052 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1052 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1052 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 160 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 4 6 2 1\n1\n9\n", "output": "2\n3\n2\n1\n"}, {"input": "4\n4\n6 6 3 6\n7\n1 4 2 3 4 4 5\n5\n5 1 8 2 1\n1\n11\n", "output": "1\n3\n2\n1\n"}, {"input": "4\n23\n3198 4895 1585 3916 2650 5552 876 2731 1971 126 2152 6910 1096 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000010\n2\n1 1\n100\n1 2 3 4 5 6 7 10 9 10 11 12 13 14 24 16 17 18 19 20 21 22 23 24 25 26 27 28 29 41 31 32 56 34 35 36 37 38 39 40 41 42 43 44 45 46 54 48 25 60 51 52 53 54 49 56 57 58 59 60 61 62 63 64 129 119 67 68 69 70 71 72 27 74 75 76 77 78 79 80 81 82 83 84 85 115 87 88 144 90 91 92 93 94 160 96 97 98 99 100\n", "output": "4\n1\n1\n7\n"}, {"input": "4\n4\n5 6 4 6\n7\n1 4 2 3 6 1 5\n5\n5 1 11 2 1\n1\n11\n", "output": "2\n2\n2\n1\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1052 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 25 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 160 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 5 6 2 1\n1\n9\n", "output": "2\n3\n2\n1\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1052 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 25 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 144 90 91 92 93 94 160 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 5 11 2 1\n1\n9\n", "output": "2\n3\n2\n1\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1971 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 25 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 144 90 91 92 93 94 160 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}, {"input": "4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 5 11 2 1\n1\n11\n", "output": "2\n3\n2\n1\n"}, {"input": "4\n23\n3198 4895 1585 3881 2650 2366 876 2731 1971 126 2152 3621 2169 4103 1074 2594 2897 3983 3830 3460 729 576 3281\n1\n1000000000\n2\n1 1\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 25 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 115 87 88 144 90 91 92 93 94 160 96 97 98 99 100\n", "output": "3\n1\n1\n7\n"}]}
{"statement": "Task: Alice and Bob are playing a game using a string S of length N. They both have their individual strings which are initially empty. Both players take alternate turns. Alice starts first. In Alice's turn, she will choose a prefix of S, remove the chosen prefix from S, and append the prefix to the end of her string. In Bob's turn, he will choose a suffix of S, remove the chosen suffix from S, reverse the suffix, and append it to the end of his string. Chef has decided to reward them if the length of the Longest Common Subsequence (LCS) of Alice's and Bob's strings is maximized. Help Chef calculate the length of maximum LCS that can be achieved by Alice and Bob.\n\nInput: The input consists of T test cases. Each test case starts with an integer N, followed by a string S of length N. The input is provided through standard input.\n\nOutput: For each test case, output the length of the maximum LCS achievable by Alice and Bob.\n\nConstraints: 1 \u2264 T \u2264 1000, 1 \u2264 N \u2264 5000, and the sum of N over all test cases won't exceed 5000. A prefix is a contiguous subsequence of the string obtained by deleting some (possibly zero) elements from the end of the string. A suffix is a contiguous subsequence of the string obtained by deleting some (possibly zero) elements from the beginning of the string.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codechef", "url": "https://www.codechef.com/problems/MAXLCS", "sample_test_cases": [{"input": "3\n4\nabab\n6\nabccda\n4\naaaa\n", "output": "1\n2\n2\n"}]}
{"statement": "Task: Given an amount of money and a set of coins with different denominations, find the minimum number of coins needed to make up the given amount. If it is not possible to make the given amount using the given coins, return -1.\n\nInput: The input consists of two integers: an array of coin denominations and a total amount of money. The input is read from standard input.\n\nOutput: The output is a single integer representing the minimum number of coins required to make the given amount of money. If it is not possible to make the given amount using the given coins, return -1.\n\nConstraints: The length of the coin denominations array is between 1 and 12, the value of each coin is between 1 and 2^31 - 1, and the total amount of money is between 0 and 10^4.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Graph traversal']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/coin-change/", "sample_test_cases": [{"input": [[1, 2, 5], 11], "output": 3}]}
{"statement": "Task: Given a tree that is constructed in a specific way, calculate the sum of distances between each pair of nodes. The tree is an acyclic connected graph that is constructed in $N$ steps, where at each step, three duplicates of the current tree are created and two new nodes are added to connect all four copies in an H shape. The length of the new edges added at each step is given in the input. The output should be the sum of distances between each pair of nodes in the tree, modulo $10^9+7$.\n\nInput: The input consists of two lines. The first line contains an integer $N$ representing the number of steps in constructing the tree. The second line contains $N$ space-separated integers representing the length of the new edges added at each step. Input arrives from standard input.\n\nOutput: The output should be a single integer representing the sum of distances between each pair of nodes in the tree, modulo $10^9+7$.\n\nConstraints: The number of steps in constructing the tree is $1\\leq N\\leq 10^6$, and the length of the new edges added at each step is $1\\leq A_i\\leq 9$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/hr-city/problem", "sample_test_cases": [{"input": "1\n1\n", "output": "29\n"}, {"input": "2\n2 1\n", "output": "2641\n"}]}
{"statement": "Task: Alex and Lee play a game with piles of stones. There are N piles arranged in a row, and each pile has a positive integer number of stones. The objective of the game is to end with the most stones. The total number of stones is odd, so there are no ties. Alex and Lee take turns, with Alex starting first. Each turn, a player takes the entire pile of stones from either the beginning or the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins. Assuming Alex and Lee play optimally, determine if Alex can win the game.\n\nInput: The input consists of an even number of piles of stones arranged in a row, with each pile having a positive integer number of stones. The input is provided through standard input.\n\nOutput: The output is a boolean value, True if Alex can win the game and False otherwise.\n\nConstraints: The length of the array of piles is between 2 and 500, the length is even, each pile has between 1 and 500 stones, and the total number of stones is odd.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Game theory', 'Mathematics']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/stone-game/", "sample_test_cases": [{"input": [[5, 3, 4, 5]], "output": true}]}
{"statement": "Task: Given a target value N and an infinite supply of each denomination of Indian currency { 1, 2, 5, 10, 20, 50, 100, 200, 500, 2000 }, find the minimum number of coins and/or notes needed to make the change for Rs N. Return the list containing the value of coins required in decreasing order.\n\nInput: The input is a single integer N, which represents the target value. The input is provided through standard input.\n\nOutput: The output is a list of integers representing the value of coins required to make change for the given target value.\n\nConstraints: The input value N is constrained such that 1 \u2264 N \u2264 10^6.", "editorial": "", "tag": "['Dynamic programming', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/-minimum-number-of-coins4426/1", "sample_test_cases": [{"input": "N = 43", "output": "20 20 2 1"}, {"input": "N = 1000", "output": "500 500"}]}
{"statement": "Task: Given an array arr[] of size N, determine if it can be divided into two disjoint subsets such that the sum of elements in both subsets is the same.\n\nInput: The input consists of an integer N and an array arr[] of size N, taken from standard input.\n\nOutput: The output should be a YES if the array can be partitioned into two parts with equal sum, and NO otherwise.\n\nConstraints: N should be between 1 and 100, each element of the array should be between 1 and 1000, and the product of N and the sum of elements in the array should be less than or equal to 5*10^6.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/subset-sum-problem2014/1", "sample_test_cases": [{"input": "N = 4\r\narr = {1, 5, 11, 5}", "output": "YES"}, {"input": "N = 3\r\narr = {1, 3, 5}", "output": "NO"}]}
{"statement": "Task: Given an array of integers arr and an integer target, find two non-overlapping sub-arrays of arr each with sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum. Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\n\nInput: The input consists of an array of integers arr with n elements and an integer target. The array and target are provided through standard input.\n\nOutput: The output should be a single integer representing the minimum sum of the lengths of the two required sub-arrays, or -1 if no such sub-arrays exist.\n\nConstraints: The input array arr has at most 10^5 elements, and each element is between 1 and 1000. The target is at most 10^8.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Sorting', 'Amortized analysis']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/", "sample_test_cases": [{"input": [[3, 2, 2, 4, 3], 3], "output": 2}]}
{"statement": "Task: Given two strings str1 and str2, find the minimum number of insertions and deletions required to transform str1 into str2. The same character may need to be both removed and inserted at different positions.\n\nInput: The input consists of two strings, str1 and str2, each with a length of at most 1000. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum number of operations required to transform str1 into str2.\n\nConstraints: The input strings consist only of lowercase English alphabets. The length of the strings is at most 1000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/minimum-number-of-deletions-and-insertions0209/1", "sample_test_cases": [{"input": "str1 = \"heap\", str2 = \"pea\"", "output": "3"}, {"input": "str1 = \"geeksforgeeks\"\nstr2 = \"geeks\"", "output": "8"}]}
{"statement": "Task: Given an array of integers, find the maximum possible sum among all non-empty subsequences and subarrays of the array.\n\nInput: The first line of input contains a single integer T, the number of test cases. Each test case starts with an integer N, the size of the array, followed by N integers representing the elements of the array. The input is read from standard input.\n\nOutput: The output should consist of T lines. Each line should contain two space-separated integers, the maximum sum of all non-empty subarrays and subsequences of the array, respectively.\n\nConstraints: $1\\leq t\\leq10$, $1\\leq n\\leq10^5$, $-10^4\\leq arr[i]\\leq10^4$. The subarrays and subsequences considered should have at least one element.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/maxsubarray/problem", "sample_test_cases": [{"input": "2\n4\n1 2 3 4\n6\n2 -1 2 3 4 -5\n", "output": "10 10\n10 11\n"}, {"input": "1\n5\n-2 -3 -1 -4 -6\n", "output": "-1 -1\n"}]}
{"statement": "Task: There are n passengers boarding an airplane with n seats. The first passenger chooses a seat randomly, and subsequent passengers will take their own seat if it is available, otherwise they will choose a seat randomly. The task is to find the probability that the n-th person will get their own seat.\n\nInput: The input consists of a single integer n, which represents the number of passengers boarding the airplane. The input is provided through standard input.\n\nOutput: The output should be a single decimal number representing the probability that the n-th person will get their own seat.\n\nConstraints: 1 <= n <= 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Probability']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/airplane-seat-assignment-probability/", "sample_test_cases": [{"input": [1], "output": 1.0}]}
{"statement": "Task: Given an NxN chessboard and a Knight at position (x, y), find the probability that the Knight remains on the board after taking K steps, where the Knight chooses any of the 8 directions uniformly at random and cannot re-enter the board once it leaves it.\n\nInput: The input consists of four integers N, x, y, and K, which represent the size of the chessboard, the initial position of the Knight, and the number of steps it takes, respectively. The input is read from standard input.\n\nOutput: The output is a single floating-point number representing the probability that the Knight remains on the board after taking K steps.\n\nConstraints: 1 <= N <= 100, 0 <= x, y <= N, and 0 <= K <= N.\n\nMathematical and Computer Science Concepts: The problem can be modeled as a graph where each cell on the chessboard is a vertex and each possible move of the Knight is an edge. The Knight can move to any of the 8 cells that are two steps away from its current position. The probability of the Knight remaining on the board after K steps can be found using dynamic programming. We can define a 3D array dp[i][j][k] to represent the probability of the Knight being at cell (i, j) after k steps. The base case is dp[x][y][0] = 1, and the recursive case is dp[i][j][k] = sum(dp[i+dx][j+dy][k-1]/8) for all valid (dx, dy) pairs. The final answer is the sum of dp[i][j][K] for all cells (i, j) on the board.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/probability-of-knight5529/1", "sample_test_cases": [{"input": "N = 8, x = 0, y = 0, K = 3", "output": "0.125000"}, {"input": "N = 4, x = 1, y = 2, k = 4", "output": "0.024414"}]}
{"statement": "Task: Given a string 'str' and a wildcard pattern 'pattern' of length N and M respectively, determine whether the wildcard pattern matches the string. The wildcard pattern can include the characters \u2018?\u2019 and \u2018*\u2019, where \u2018?\u2019 matches any single character and \u2018*\u2019 matches any sequence of characters (including the empty sequence). The matching should cover the entire string.\n\nInput: The input consists of two strings: the wildcard pattern and the string to be matched. Both strings have a length of at most 200. The input is provided through standard input.\n\nOutput: The output is a single integer: 1 if the wildcard pattern matches the string, and 0 otherwise.\n\nConstraints: The length of both strings is at most 200.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/wildcard-pattern-matching/1", "sample_test_cases": [{"input": "pattern = \"ba*a?\"\nstr = \"baaabab\"", "output": "1"}, {"input": "pattern = \"a*ab\"\nstr = \"baaabab\"", "output": "0"}]}
{"statement": "Task: Given an array of integers, find the maximum sum of a contiguous subarray with at most one element deletion. The subarray must be non-empty after the deletion.\n\nInput: The input is an array of integers received from standard input. The array has at most 10^5 elements and each element is between -10^4 and 10^4.\n\nOutput: The output is a single integer, which represents the maximum sum of a contiguous subarray with at most one element deletion.\n\nConstraints: The input array has at most 10^5 elements and each element is between -10^4 and 10^4.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/", "sample_test_cases": [{"input": [[1, -2, 0, 3]], "output": 4}]}
{"statement": "Task: Given a string s consisting of only integer characters, the task is to find the minimum number of steps required to delete all characters of the string, where each step involves deleting a palindrome substring. The remaining parts of the string are concatenated after each step.\n\nInput: The input is a single string s containing only integer characters, which is provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of steps required to delete all characters of the given string.\n\nConstraints: The input string s has a length between 1 and 1000, inclusive. The time complexity of the algorithm should be O(|s|^3) and the space complexity should be O(|s|^2).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/minimum-steps-to-delete-a-string2956/1", "sample_test_cases": [{"input": "s = \"2553432\"", "output": "2"}, {"input": "s = \"1234\"", "output": "4"}]}
{"statement": "Task: Given an integer N, find the number of ways to climb N stairs where each step is either 1 or 2 stairs, and the order of the steps does not matter.\n\nInput: The input consists of a single integer N, which represents the number of stairs. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the number of ways the person can climb the stairs. The output should be printed to standard output.\n\nConstraints: The input integer N is constrained such that 1 <= N <= 10^6.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-ways-to-nth-stairorder-does-not-matter1322/1", "sample_test_cases": [{"input": "N = 4", "output": "3"}, {"input": "N = 5", "output": "3"}]}
{"statement": "Task: Given an array A[ ] of N positive integers representing the time taken to complete each task, find the minimum amount of time required to finish the tasks, considering that you can skip any task, but skipping two consecutive tasks is forbidden.\n\nInput: The input consists of two lines. The first line contains a single integer N, denoting the number of tasks. The second line contains N space-separated integers, denoting the time taken to complete each task. The input arrives from standard input.\n\nOutput: The output should be a single integer, denoting the minimum amount of time required to finish the tasks.\n\nConstraints: 1 <= N <= 10^6, and the time taken to complete each task is a positive integer.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/skip-the-work5752/1", "sample_test_cases": [{"input": "N = 2\nA[] ={10,20}", "output": "10"}, {"input": "N = 4\nA[] = {10,5,7,10}", "output": "12"}]}
{"statement": "Task: Given the initial health H and money M, the task is to determine the maximum level that can be reached in a game where the player must choose one of three roads at each level, with each road having different effects on the player's health and money. The player cannot select the same road twice in a row, and the game ends if the player's health or money drops to zero or below.\n\nInput: The input consists of two integers H and M, representing the player's initial health and money, respectively. The input is received from standard input.\n\nOutput: The output is a single integer representing the maximum level that can be reached without violating the constraints of the game.\n\nConstraints: 1 \u2264 H, M \u2264 800.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/levels-of-game/1", "sample_test_cases": [{"input": "H=2\nM=10", "output": "1"}, {"input": "H=20\nM=8", "output": "5"}]}
{"statement": "Task: Given an array A of size n, find the number of sequences that can be obtained after exact k adjacent swaps and at most k swaps.\n\nInput: The input consists of two integers n and k separated by a space, where n is the size of the array and k is the number of swaps allowed. The input is provided through standard input.\n\nOutput: The output consists of two integers separated by a space, which represent the number of sequences that can be obtained after exact k adjacent swaps and at most k swaps, respectively. The output should be printed to standard output. The output should be taken modulo 1000000007.\n\nConstraints: The input integers n and k satisfy 1 \u2264 n \u2264 2500 and 1 \u2264 k \u2264 2500. An adjacent swap can be made between two elements of the Array A, A[i] and A[i+1] or A[i] and A[i-1]. A swap otherwise can be between any two elements of the array A[i] and A[j] \u2200 1 \u2264 i, j \u2264 N, i \u2260 j.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/swappermutation/problem", "sample_test_cases": [{"input": "3 2\n", "output": "3 6\n"}]}
{"statement": "Task: Given a bag of colored balls, determine the number of ways to draw the balls such that the last ball of each color is drawn before the last ball of the next color.\n\nInput: The input consists of an integer k representing the number of colors, followed by k integers c_{1}, c_{2}, ..., c_{k} representing the number of balls of each color. The total number of balls does not exceed 1,000. Input is received from standard input.\n\nOutput: Output a single integer representing the number of valid ways to draw the balls, modulo 1,000,000,007.\n\nConstraints: 1 \u2264 k \u2264 1000, 1 \u2264 c_{i} \u2264 1000.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/553/A", "sample_test_cases": [{"input": "3\n2\n2\n1\n", "output": "3\n"}, {"input": "4\n1\n2\n3\n4\n", "output": "1680\n"}, {"input": "10\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n", "output": "12520708\n"}, {"input": "5\n10\n10\n10\n10\n10\n", "output": "425711769\n"}, {"input": "11\n291\n381\n126\n39\n19\n20\n3\n1\n20\n45\n2\n", "output": "902382672\n"}, {"input": "1\n1\n", "output": "1\n"}, {"input": "13\n67\n75\n76\n80\n69\n86\n75\n86\n81\n84\n73\n72\n76\n", "output": "232242896\n"}, {"input": "25\n35\n43\n38\n33\n47\n44\n40\n36\n41\n42\n33\n30\n49\n42\n62\n39\n40\n35\n43\n31\n42\n46\n42\n34\n33\n", "output": "362689152\n"}, {"input": "47\n20\n21\n16\n18\n24\n20\n25\n13\n20\n22\n26\n24\n17\n18\n21\n22\n21\n23\n17\n15\n24\n19\n18\n21\n20\n19\n26\n25\n20\n17\n17\n17\n26\n32\n20\n21\n25\n28\n24\n21\n21\n17\n28\n20\n20\n31\n19\n", "output": "295545118\n"}, {"input": "3\n343\n317\n337\n", "output": "691446102\n"}, {"input": "1\n5\n", "output": "1\n"}, {"input": "1\n5\n", "output": "1\n"}, {"input": "10\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n", "output": "12520708\n"}, {"input": "25\n35\n43\n38\n33\n47\n44\n40\n36\n41\n42\n33\n30\n49\n42\n62\n39\n40\n35\n43\n31\n42\n46\n42\n34\n33\n", "output": "362689152\n"}, {"input": "5\n10\n10\n10\n10\n10\n", "output": "425711769\n"}]}
{"statement": "Task: Given a series of video clips from a sporting event that lasted T seconds, the task is to find the minimum number of clips needed to cover the entire sporting event. The clips can overlap and have varied lengths, and can be cut into segments freely. If it is impossible to cover the entire event, return -1.\n\nInput: The input consists of an integer T, representing the number of test cases, followed by T test cases. Each test case starts with two integers, N and T, where N is the number of video clips and T is the total duration of the sporting event. This is followed by N lines, each containing two integers start_time and end_time, representing the start and end times of each video clip. The input is provided through standard input.\n\nOutput: The output should consist of T lines. Each line should contain a single integer giving the minimum number of clips needed to cover the entire sporting event for the corresponding test case. If it is impossible to cover the entire event, return -1.\n\nConstraints: 1 <= T <= 100, 1 <= N <= 100, 0 <= start_time <= end_time <= 100, 0 <= T <= 100.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/video-stitching/", "sample_test_cases": []}
{"statement": "Task: Given two integers n and r, calculate the value of nCr (combination of n things taken r at a time) modulo 10^9+7.\n\nInput: The input consists of two integers n and r, provided through standard input.\n\nOutput: The output should be a single integer, which represents the value of nCr modulo 10^9+7.\n\nConstraints: 1 \u2264 n \u2264 1000 and 1 \u2264 r \u2264 800.\n\nMathematical concepts: Combination, modulo operation.\n\nComputer science concepts: Input/output, integer data type.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/ncr1019/1", "sample_test_cases": [{"input": "n = 3, r = 2", "output": "3"}, {"input": "n = 2, r = 4", "output": "0"}]}
{"statement": "Task: Given an array A of non-negative integers, find the number of unique bitwise OR results of all contiguous subarrays of A.\n\nInput: The input consists of a single array A of non-negative integers. The first line of input contains an integer n (1 <= n <= 50000) representing the length of the array A. The second line contains n non-negative integers separated by space, representing the elements of the array A. Each element of A can have a value up to 10^9. The input is provided through standard input.\n\nOutput: The output is a single integer representing the number of unique bitwise OR results of all contiguous subarrays of the input array.\n\nConstraints: The input array can have up to 50000 elements, and each element can have a value up to 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/bitwise-ors-of-subarrays/", "sample_test_cases": [{"input": [[0]], "output": 1}]}
{"statement": "Task: Given a string S, find the length of the longest palindromic subsequence.\n\nInput: The input is a single string S, which is received from standard input. The length of the string S is between 1 and 1000, inclusive.\n\nOutput: The output is a single integer, which represents the length of the longest palindromic subsequence of the input string S.\n\nConstraints: 1 \u2264 |S| \u2264 1000\n\nExplanation: A subsequence of a string is a sequence of characters that can be derived from the original string by deleting some or no characters without changing the order of the remaining characters. A palindrome is a string that reads the same backward as forward. A palindromic subsequence of a string is a subsequence that is also a palindrome. The task is to find the length of the longest palindromic subsequence of a given string S. The length of a subsequence is the number of characters in it.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-palindromic-subsequence-1612327878/1", "sample_test_cases": [{"input": "S = \"bbabcbcab\"", "output": "7"}, {"input": "S = \"abcd\"", "output": "1"}]}
{"statement": "Task: Given a sequence of non-zero integers, count the number of subsegments with negative and positive product.\n\nInput: The input consists of an integer $n$ representing the number of elements in the sequence, followed by $n$ integers representing the sequence. The input is provided through standard input.\n\nOutput: The output consists of two integers representing the number of subsegments with negative and positive product, respectively.\n\nConstraints: The input sequence contains non-zero integers ranging from $-10^9$ to $10^9$. The length of the sequence is at most $2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Implementation']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1215/B", "sample_test_cases": [{"input": "5\n5 -3 3 -1 1\n", "output": "8 7\n"}, {"input": "10\n4 2 -4 3 1 2 -4 3 2 3\n", "output": "28 27\n"}, {"input": "5\n-1 -2 -3 -4 -5\n", "output": "9 6\n"}, {"input": "1\n1761402\n", "output": "0 1\n"}, {"input": "1\n1\n", "output": "0 1\n"}, {"input": "1\n-648613522\n", "output": "1 0\n"}, {"input": "2\n-837247075 -925321573\n", "output": "2 1\n"}, {"input": "2\n1 -42205445\n", "output": "2 1\n"}, {"input": "2\n1 1\n", "output": "0 3\n"}, {"input": "2\n-703630698 870277542\n", "output": "2 1\n"}, {"input": "2\n1 753393670\n", "output": "0 3\n"}, {"input": "2\n665876657 284761489\n", "output": "0 3\n"}, {"input": "10\n-27433367 -21216390 1 303383863 -799030648 -1 160141051 -1 -342089574 -215298491\n", "output": "28 27\n"}, {"input": "2\n1000000000 -1000000000\n", "output": "2 1\n"}, {"input": "5\n1 1 1 1 1\n", "output": "0 15\n"}]}
{"statement": "Task: Given a matrix representing Geekland, where each cell contains some points, the task is to find the minimum number of steps required for a knight to collect the maximum points. The knight can collect all the points from all the cells that can be visited in exactly i steps without revisiting any cell, and has magical powers to fetch coins from the future.\n\nInput: The input consists of four integers: n, m, start_x, and start_y, representing the dimensions of the matrix and the starting coordinates of the knight. This is followed by an n x m matrix arr containing the points in each cell. The input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of steps required for the knight to collect the maximum points.\n\nConstraints: The input matrix arr has dimensions 1 <= len(arr), len(arr[0]) < 10^{3} and contains values between 0 and 100.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/7e5ec07f9d865297cff9a91522c2ce805433b420/1", "sample_test_cases": [{"input": "n = 9\r\nm = 10\r\nstart_x = 4, start_y = 5\r\narr =\r\n0 0 0 2 0 2 0 2 0 0\r\n0 0 2 0 2 0 2 0 2 0\r\n0 2 0 0 1 2 0 0 0 2\r\n0 0 2 0 2 0 2 0 2 0\r\n0 2 0 2 0 0 0 2 0 2\r\n0 0 2 0 2 0 2 0 2 0\r\n0 2 0 0 0 2 0 0 0 2\r\n0 0 2 0 2 0 2 0 2 0\r\n0 0 0 2 0 2 0 2 0 0", "output": "1"}, {"input": "n = 3 \r\nm = 3\r\nstart_x = 2, start_y = 1\r\narr =\r\n7 6 8\r\n9 1 4\r\n6 2 8", "output": "0"}]}
{"statement": "Task: Given a string s and an integer k, the task is to check if the string can be transformed into a palindrome by making exactly k insertions of characters.\n\nInput: The input consists of a string s and an integer k, which are provided through standard input. The string s contains only lowercase English alphabets and its length is between 1 and 103, inclusive.\n\nOutput: The output format is a boolean value indicating whether the given string can be transformed into a palindrome by making exactly k insertions of characters.\n\nConstraints: 1 \u2264 |s| \u2264 103.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/palindromic-strings2555/1", "sample_test_cases": [{"input": "s = \"abac\", K = 2", "output": "1"}, {"input": "s = \"abcde\", K = 3", "output": "0"}]}
{"statement": "Task: Given an array A of integers, find the length of the longest arithmetic subsequence in A.\n\nInput: The input consists of an array A of integers, which is received from standard input. The first line of input contains an integer T, the number of test cases. Each test case starts with an integer N, the length of the array A, followed by N integers representing the elements of A. It is guaranteed that 2 <= N <= 1000 and 0 <= A[i] <= 500 for all 0 <= i < N. The sum of N over all test cases is at most 5 * 10^5.\n\nOutput: The output should consist of T lines. Each line should contain a single integer representing the length of the longest arithmetic subsequence in the corresponding array A.\n\nConstraints: 2 <= A.length <= 1000, 0 <= A[i] <= 500.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/longest-arithmetic-subsequence/", "sample_test_cases": [{"input": [[3, 6, 9, 12]], "output": 4}]}
{"statement": "Task: Given a string S of length n consisting of lowercase alphabets and an integer k, count the number of substrings of S that have exactly k distinct characters.\n\nInput: The input consists of two parts. The first part is an integer n (1 \u2264 n \u2264 10^5), representing the length of the string S. The second part is a string S of length n consisting of lowercase alphabets. The third part is an integer k (1 \u2264 k \u2264 26), representing the number of distinct characters that a substring should have.\n\nOutput: The output should be a single integer representing the number of substrings of S that have exactly k distinct characters.\n\nConstraints: The input string S has a length between 1 and 10^5, and the value of k ranges from 1 to 26.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Amortized analysis']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-number-of-substrings4528/1", "sample_test_cases": [{"input": "S = \"aba\", K = 2", "output": "3"}, {"input": "S = \"abaaca\", K = 1", "output": "7"}]}
{"statement": "Task: Given a value V and an array coins[] of size M, find the minimum number of coins needed to make change for V cents, using the coins in the array. If it is not possible to make change, return -1.\n\nInput: The input consists of three integers: V, M, and an array coins[] of size M. The input is provided through standard input.\n\nOutput: The function should return a single integer, which is the minimum number of coins needed to make change for V.\n\nConstraints: The input constraints are that 1 \u2264 V*M \u2264 10^{6} and all array elements are distinct.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/number-of-coins1824/1", "sample_test_cases": [{"input": "V = 30, M = 3, coins[] = {25, 10, 5}", "output": "2"}, {"input": "V = 11, M = 4,coins[] = {9, 6, 5, 1}", "output": "2"}]}
{"statement": "Task: Given an array of n integers, find the maximum sum of all the elements that are not a part of the longest increasing subsequence.\n\nInput: The input consists of an integer n, representing the size of the array, followed by an array Arr of n integers. The input is taken from standard input.\n\nOutput: The output should be a single integer representing the maximum sum of all the elements that are not a part of the longest increasing subsequence.\n\nConstraints: The size of the input array n is constrained such that 1 \u2264 N \u2264 1000 and the values of the array elements are constrained such that 1 \u2264 Arr[i] \u2264 10^{5}.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximum-sum-of-elements-not-part-of-lis/1", "sample_test_cases": [{"input": "n = 6\nArr = {4, 6, 1, 2, 4, 6}", "output": "10"}, {"input": "n = 5\nArr = {5, 4, 3, 2, 1}", "output": "14"}]}
{"statement": "Task: Given two waiters, Rahul and Ankit, and n orders, where each order has a different tip amount for each waiter, distribute the orders among the two waiters in a way that maximizes the total tip amount. Rahul can take at most x orders, and Ankit can take at most y orders, where x + y is greater than or equal to n.\n\nInput: The input consists of five parameters: an integer n representing the number of orders, integers x and y representing the maximum number of orders that Rahul and Ankit can take, respectively, and two arrays a[] and b[] of size n representing the tip amount for each order if taken by Rahul and Ankit, respectively. The input is provided through standard input.\n\nOutput: The output is a single integer representing the maximum possible total tip amount that can be obtained by distributing the orders among Rahul and Ankit.\n\nConstraints: 1 \u2264 n \u2264 10^5, 1 \u2264 x, y \u2264 n, x + y \u2265 n, and 1 \u2264 a[i], b[i] \u2264 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximum-tip-calculator2631/1", "sample_test_cases": [{"input": "n = 5, x = 3, y = 3\na[] = {1, 2, 3, 4, 5}\nb[] = {5, 4, 3, 2, 1}", "output": "21"}, {"input": "n = 8, x = 4, y = 4\na[] = {1, 4, 3, 2, 7, 5, 9, 6}\nb[] = {1, 2, 3, 6, 5, 4, 9, 8}", "output": "43"}]}
{"statement": "Task: Given a wallet with n banknotes, each with a positive integer value smaller than 1000, and a specific amount of money demanded by a mobster, determine if there exists a subset of the banknotes whose total value matches the demanded amount.\n\nInput: The input consists of multiple test cases. The first line of each test case contains two integers, n and m, representing the number of banknotes and the demanded amount, respectively. The next line contains n integers representing the values of the banknotes. The input is read from standard input.\n\nOutput: For each test case, output a single line with the word 'Yes' if there is a subset of the banknotes that sums to m, and 'No' otherwise.\n\nConstraints: There are at most 100 test cases, the wallet does not hold more than 20 banknotes, and the value of a single banknote is never more than 1000.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Mathematics', 'Complete search']", "difficulties": "MEDIUM", "source": "codechef", "url": "https://www.codechef.com/problems/A1", "sample_test_cases": [{"input": "5\n3 3\n1\n1\n1\n5 11\n1\n2\n4\n8\n16\n5 23\n1\n2\n4\n8\n16\n5 13\n1\n5\n5\n10\n10\n20 132\n17\n6\n4\n998\n254\n137\n259\n153\n154\n3\n28\n19\n123\n542\n857\n23\n687\n35\n99\n999", "output": "Yes\nYes\nYes\nNo\nYes"}]}
{"statement": "Task: Given an array of integers, find the maximum length of a subarray where the product of all its elements is positive.\n\nInput: The input consists of a single array of integers, where the length of the array is between 1 and 10^5. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the maximum length of a subarray with positive product.\n\nConstraints: The input integers can range from -10^9 to 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/", "sample_test_cases": [{"input": [[1, -2, -3, 4]], "output": 4}]}
{"statement": "Task: Given a list of words, a list of single letters, and an array of scores, find the maximum score of any valid set of words formed by using the given letters, where each word can only be used once. The score of each letter is given by an array of scores.\n\nInput: The input consists of a list of words, a list of single letters, and an array of scores, which arrive from standard input. The list of words is a sequence of strings, the list of letters is a sequence of characters, and the array of scores is a sequence of integers.\n\nOutput: The output should be a single integer representing the maximum score that can be obtained from any valid set of words.\n\nConstraints: The length of the list of words is between 1 and 14, the length of each word is between 1 and 15, the length of the list of letters is between 1 and 100, the length of each letter is 1, the length of the score array is 26, the score of each letter is between 0 and 10, and the words and letters contain only lower case English letters.", "editorial": "", "tag": "['Bit manipulation', 'String algorithms', 'Complete search', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/maximum-score-words-formed-by-letters/", "sample_test_cases": [{"input": [["\"dog\"", "\"cat\"", "\"dad\"", "\"good\""], ["\"a\"", "\"a\"", "\"c\"", "\"d\"", "\"d\"", "\"d\"", "\"g\"", "\"o\"", "\"o\""], [1, 0, 9, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "output": 0}]}
{"statement": "Task: Given a rectangular grid of size m x n with obstacles, find the number of unique paths a robot can take to reach the bottom-right corner of the grid, given that the robot can only move down or right.\n\nInput: The input is a rectangular grid of size m x n, with 0 representing an empty space and 1 representing an obstacle. The input is provided through standard input.\n\nOutput: The output is a single integer representing the number of unique paths the robot can take to reach the bottom-right corner of the grid. The output is printed to standard output.\n\nConstraints: The input grid will have at most 100 rows and 100 columns.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/unique-paths-ii/", "sample_test_cases": [{"input": [[[0, 0, 0], [0, 1, 0], [0, 0, 0]]], "output": 2}, {"input": [[[0, 1], [0, 0]]], "output": 1}]}
{"statement": "Task: Given $n$ sequences, each consisting of integers, find the number of pairs of sequences whose concatenation has an ascent. A sequence has an ascent if there exists a pair of indices $(i, j)$ such that $1 \\le i < j \\le l$ and $a_i < a_j$.\n\nInput: The first line of input contains an integer $n$ denoting the number of sequences. The next $n$ lines contain the length of a sequence and the sequence itself. Each sequence consists of a series of integers. The input is provided through standard input.\n\nOutput: The output should be a single integer, the number of pairs of sequences whose concatenation has an ascent.\n\nConstraints: $1 \\le n \\le 100000$, $1 \\le l_i$, $0 \\le s_{i, j} \\le 10^6$, and the sum of all $l_i$ does not exceed $100000$.", "editorial": "", "tag": "['Sorting', 'Combinatorics', 'Implementation', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1284/B", "sample_test_cases": [{"input": "5\n1 1\n1 1\n1 2\n1 4\n1 3\n", "output": "9\n"}, {"input": "3\n4 2 0 2 0\n6 9 9 8 8 7 7\n1 6\n", "output": "7\n"}, {"input": "10\n3 62 24 39\n1 17\n1 99\n1 60\n1 64\n1 30\n2 79 29\n2 20 73\n2 85 37\n1 100\n", "output": "72\n"}, {"input": "1\n3 1 2 3\n", "output": "1\n"}, {"input": "5\n5 1 2 3 4 5\n4 1 2 3 4\n3 3 2 1\n2 2 1\n1 1\n", "output": "22\n"}, {"input": "3\n3 10 11 9\n3 7 8 6\n3 4 5 3\n", "output": "9\n"}, {"input": "1\n3 1 2 3\n", "output": "1\n"}, {"input": "5\n5 1 2 3 4 5\n4 1 2 3 4\n3 3 2 1\n2 2 1\n1 1\n", "output": "22\n"}, {"input": "3\n3 10 11 9\n3 7 8 6\n3 4 5 3\n", "output": "9\n"}, {"input": "1\n3 1 2 2\n", "output": "1\n"}, {"input": "5\n5 1 2 3 4 5\n4 1 2 3 4\n3 3 2 1\n2 2 1\n1 0\n", "output": "22\n"}, {"input": "3\n3 10 11 9\n3 7 8 6\n3 4 2 3\n", "output": "9\n"}, {"input": "5\n1 1\n1 0\n1 2\n1 4\n1 3\n", "output": "10\n"}, {"input": "1\n3 1 1 1\n", "output": "0\n"}, {"input": "3\n4 2 0 2 0\n6 9 9 8 13 7 7\n1 6\n", "output": "8\n"}]}
{"statement": "Task: Given an integer N, find the number of structurally unique binary search trees that can be formed using integers from 1 to N (inclusive). The output should be returned modulo 1e9+7.\n\nInput: The input is an integer N, provided through standard input.\n\nOutput: The output is the number of unique binary search trees that can be formed using integers from 1 to N (inclusive), returned by a function named numTrees(). The output should be returned modulo 1e9+7.\n\nConstraints: The input integer N is constrained by 1 <= N <= 1000. The time complexity of the solution should be O(N^2), and the auxiliary space used should be O(N).", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Range queries']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/unique-bsts-1587115621/1", "sample_test_cases": [{"input": "N = 2", "output": "2"}, {"input": "N = 3", "output": "5"}]}
{"statement": "Task: Given a binary matrix M with R rows and C columns, where each element of the matrix will be 0 or 1. Find the largest square that can be formed with center (i, j) and contains at most K 1s. There are Q queries, a single query has two integers denoting the centre (i,j) of the square.\n\nInput: The input consists of integers R and C denoting the number of rows and columns of the binary matrix, followed by the binary matrix M as a list of lists. The input also includes integers i, j, and K for each query, which represent the center of the square and the maximum number of ones allowed in the square. The input is provided through standard input.\n\nOutput: The output is a list of integers representing the length of the largest square for each query.\n\nConstraints: 1 \u2264 R,C \u2264 500, 1 \u2264 Q \u2264 10^4, 0 \u2264 K \u2264 R*C, and 0 \u2264 i < R, 0 \u2264 j < C.\n\nMathematical Concepts: Binary matrix, query, center of a square, ones in a square, largest square.\n\nComputer Science Concepts: Standard input, list of lists, integer, constraints.", "editorial": "", "tag": "['Sorting', 'Complete search', 'Dynamic programming', 'Divide and conquer', 'Matrices', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/largest-square-in-a-binary-matrix-with-at-most-k-1s-for-multiple-queries/1", "sample_test_cases": [{"input": "R = 4, C = 5\r\nM = {{1, 0, 1, 0, 0} \r\n     {1, 0, 1, 1, 1} \r\n     {1, 1, 1, 1, 1} \r\n     {1, 0, 0, 1, 0}}\r\nK = 9, Q = 1\r\nq_i[] = {1}\r\nq_j[] = {2}", "output": "3"}, {"input": "R = 3, C = 3\r\nM = {{1, 1, 1} \r\n     {1, 1, 1} \r\n     {1, 1, 1}}\r\nK = 9, Q = 2\r\nq_i[] = {1, 2}\r\nq_j[] = {1, 2}", "output": "3 1"}]}
{"statement": "Task: Given integers `N` and `K`, find the number of ways to fill a `N` by `2` grid with `K` colored dominoes, such that no two adjacent dominoes have the same color. The answer should be given modulo `12345787`.\n\nInput: The input consists of two integers `N` and `K`, separated by a space, and arrives from standard input.\n\nOutput: The output should be a single integer, representing the number of ways to fill the grid as described above.\n\nConstraints: `1 <= N <= 10000` and `1 <= K <= 100`.\n\nConcepts: We can represent the grid as a sequence of `N` cells, where each cell can be either horizontal or vertical. We can use `0` to represent a horizontal domino and `1` to represent a vertical domino. We need to find the number of ways to fill this sequence with `K` colors, such that no two adjacent cells have the same color. We can use dynamic programming to solve this problem. Let `dp[i][j][k]` be the number of ways to fill the first `i` cells of the sequence, where the `i`-th cell has color `j` and the `i-1`-th cell has color `k`. We can compute `dp[i][j][k]` by summing `dp[i-1][k][l]` for all colors `l` different from `j`. The answer is the sum of `dp[N][j][k]` for all colors `j` and `k`. We can use modular arithmetic to avoid overflow and compute the answer modulo `12345787`.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Ad-hoc']", "difficulties": "MEDIUM", "source": "codewars", "url": "https://www.codewars.com/kata/5a59e029145c46eaac000062", "sample_test_cases": []}
{"statement": "Task: Given a sequence of $n$ digits, perform a recursive operation that replaces pairs $(a_{2i+1}, a_{2i+2})$ with $(a_{2i+1} + a_{2i+2})\\bmod 10$ for $0\\le i<2^{k-1}$ and counts the number of pairs whose sum is at least $10$. Repeat this operation until the sequence becomes of length $1$. Given $q$ queries, each consisting of a range of indices $[l_i, r_i]$ of the sequence, output the number of candies obtained after performing the operation on the subsequence $[s_{l_i}, s_{l_i+1}, \\ldots, s_{r_i}]$.\n\nInput: The input consists of an integer $n$ ($1 \\le n \\le 10^5$) representing the length of the sequence, followed by $n$ digits $s_1, s_2, \\ldots, s_n$ ($0 \\le s_i \\le 9$), followed by an integer $q$ ($1 \\le q \\le 10^5$) representing the number of queries. Each of the next $q$ lines contains two integers $l_i$, $r_i$ ($1 \\le l_i \\le r_i \\le n$) representing the range of indices for the $i$-th query. The input is provided through standard input.\n\nOutput: The output consists of $q$ lines, where the $i$-th line contains a single integer representing the number of candies obtained after performing the operation on the subsequence $[s_{l_i}, s_{l_i+1}, \\ldots, s_{r_i}]$. The output is provided through standard output. The length of each subsequence is a non-negative integer power of $2$.\n\nConstraints: The length of the sequence $n$ is a non-negative integer power of $2$.", "editorial": "", "tag": "['Mathematics', 'Dynamic programming', 'Data structures', 'Implementation']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1189/C", "sample_test_cases": [{"input": "8\n8 7 3 1 7 0 9 4\n3\n1 8\n2 5\n7 7\n", "output": "3\n1\n0\n"}, {"input": "6\n0 1 2 3 3 5\n3\n1 2\n1 4\n3 6\n", "output": "0\n0\n1\n"}, {"input": "1\n8\n1\n1 1\n", "output": "0\n"}, {"input": "2\n9 9\n2\n1 1\n1 2\n", "output": "0\n1\n"}, {"input": "4\n8 5 6 6\n3\n2 3\n2 3\n3 4\n", "output": "1\n1\n1\n"}, {"input": "10\n6 6 8 8 2 5 0 1 2 1\n5\n5 6\n3 6\n8 9\n7 8\n2 9\n", "output": "0\n2\n0\n0\n3\n"}, {"input": "20\n4 8 6 6 3 0 1 8 3 6 1 4 3 2 1 3 6 4 5 4\n15\n16 19\n3 10\n9 9\n3 18\n6 7\n15 18\n12 19\n17 18\n12 12\n6 9\n3 10\n1 2\n2 3\n4 19\n16 16\n", "output": "1\n3\n0\n5\n0\n1\n2\n1\n0\n1\n3\n1\n1\n5\n0\n"}, {"input": "2\n9 9\n2\n1 1\n1 2\n", "output": "0\n1\n"}, {"input": "4\n8 5 6 6\n3\n2 3\n2 3\n3 4\n", "output": "1\n1\n1\n"}, {"input": "1\n8\n1\n1 1\n", "output": "0\n"}, {"input": "20\n4 8 6 6 3 0 1 8 3 6 1 4 3 2 1 3 6 4 5 4\n15\n16 19\n3 10\n9 9\n3 18\n6 7\n15 18\n12 19\n17 18\n12 12\n6 9\n3 10\n1 2\n2 3\n4 19\n16 16\n", "output": "1\n3\n0\n5\n0\n1\n2\n1\n0\n1\n3\n1\n1\n5\n0\n"}, {"input": "10\n6 6 8 8 2 5 0 1 2 1\n5\n5 6\n3 6\n8 9\n7 8\n2 9\n", "output": "0\n2\n0\n0\n3\n"}, {"input": "1\n6\n1\n1 1\n", "output": "0\n"}, {"input": "10\n6 7 8 8 2 5 0 1 2 1\n5\n5 6\n3 6\n8 9\n7 8\n2 9\n", "output": "0\n2\n0\n0\n3\n"}, {"input": "10\n6 7 8 8 2 5 0 1 2 1\n5\n5 6\n3 3\n8 9\n7 8\n2 9\n", "output": "0\n0\n0\n0\n3\n"}]}
{"statement": "Task: Given two sequences of integers, find the longest common subsequence between them.\n\nInput: The input consists of two sequences of integers, A and B. The first line contains two space-separated integers n and m, the sizes of sequences A and B. The next line contains n space-separated integers a[i], where i is in the range [1, n]. The next line contains m space-separated integers b[j], where j is in the range [1, m].\n\nOutput: Print the longest common subsequence as a series of space-separated integers on one line. If there are multiple common subsequences with the same maximum length, print any one of them.\n\nConstraints: The length of the sequences is at most 100, and each integer in the sequences is at most 1000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/dynamic-programming-classics-the-longest-common-subsequence/problem", "sample_test_cases": [{"input": "5 6\n1 2 3 4 1\n3 4 1 2 1 3\n", "output": "1 2 3\n"}]}
{"statement": "Task: Given an $n\\times n\\times n$ cube represented by an array of integers, count the number of sub-cubes of size $k\\times k\\times k$ (where $1\\leq k\\leq n$) that have the maximum value of $k$. \n\nInput: The input consists of multiple queries. Each query starts with an integer $n$ representing the side length of the cube, followed by $n^3$ integers representing the values in the cells of the cube. The input is provided through standard input.\n\nOutput: For each query, output $n$ integers separated by spaces. The $i^{\\mbox{th}}$ integer represents the number of sub-cubes of size $i\\times i\\times i$ that have the maximum value of $i$.\n\nConstraints: $1\\leq q\\leq5$, $1\\leq n\\leq50$, and $1\\leq f(x,y,z)\\leq n$ where $1\\leq x,y,z\\leq n$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/counting-special-sub-cubes/problem", "sample_test_cases": [{"input": "2\n2\n2 1 1 1 1 1 1 1\n2\n1 1 1 1 2 1 1 2\n", "output": "7 1\n6 1\n"}]}
{"statement": "Task: Given a list of n strictly increasing integers, find the length of the longest strictly increasing subsequence where no two adjacent elements are coprime and all elements are chosen from the given list.\n\nInput: The input consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of good integers. The second line contains a single-space separated list of n good integers a1, a2, ..., an in strictly increasing order (1 \u2264 ai \u2264 105; ai < ai + 1). The input is provided through standard input.\n\nOutput: Print a single integer \u2014 the length of the longest good subsequence.\n\nConstraints: The input integers are in strictly increasing order, and the maximum value of each integer is 105.", "editorial": "", "tag": "['Number theory', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/265/D", "sample_test_cases": [{"input": "2\n1009 2018\n", "output": "2\n"}, {"input": "7\n1 2 3 4 7 9 10\n", "output": "3\n"}, {"input": "2\n601 1202\n", "output": "2\n"}, {"input": "8\n3 4 5 6 7 8 9 10\n", "output": "4\n"}, {"input": "2\n5101 10202\n", "output": "2\n"}, {"input": "3\n21 67 243\n", "output": "2\n"}, {"input": "5\n2 3 7 9 10\n", "output": "2\n"}, {"input": "1\n99991\n", "output": "1\n"}, {"input": "3\n1 4 7\n", "output": "1\n"}, {"input": "3\n3 14 22\n", "output": "2\n"}, {"input": "10\n2 4 8 67 128 324 789 1296 39877 98383\n", "output": "7\n"}, {"input": "10\n2 3 45 67 89 101 234 567 890 1234\n", "output": "5\n"}, {"input": "3\n150 358 382\n", "output": "3\n"}, {"input": "1\n1\n", "output": "1\n"}, {"input": "4\n1 2 4 6\n", "output": "3\n"}]}
{"statement": "Task: Given a positive integer $n$, find the minimum number of distinct powerful numbers that can be summed up to $n$, where a number is considered powerful if it is either a power of two or a factorial. If there is no such combination of distinct powerful numbers that add up to $n$, output -1.\n\nInput: The input consists of multiple test cases. The first line of each test case contains a positive integer $n$ ($1\\le n\\le 10^{12}$). The first line of the input contains the number of test cases $t$ ($1 \\le t \\le 100$). \n\nOutput: For each test case, output a single integer representing the minimum number of distinct powerful numbers that can be summed up to $n$. If there is no such combination of distinct powerful numbers that add up to $n$, output -1.\n\nConstraints: The input integer $n$ can be as large as $10^{12}$, but there are only up to 100 test cases.", "editorial": "", "tag": "['Bit manipulation', 'Constructive algorithms', 'Complete search', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1646/C", "sample_test_cases": [{"input": "4\n7\n11\n240\n17179869184\n", "output": "2\n3\n4\n1\n"}, {"input": "100\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n", "output": "1\n1\n2\n1\n2\n1\n2\n1\n2\n2\n3\n2\n3\n2\n3\n1\n2\n2\n3\n2\n3\n2\n3\n1\n2\n2\n3\n2\n3\n2\n3\n1\n2\n2\n3\n2\n3\n2\n3\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n1\n2\n2\n3\n2\n3\n2\n3\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n"}, {"input": "100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n", "output": "4\n3\n4\n3\n4\n4\n5\n4\n5\n4\n5\n3\n4\n4\n5\n4\n5\n4\n5\n1\n2\n2\n3\n2\n3\n2\n3\n1\n2\n2\n3\n2\n3\n2\n3\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n3\n4\n4\n5\n4\n5\n4\n5\n3\n4\n4\n5\n4\n5\n4\n5\n2\n3\n3\n4\n3\n4\n3\n4\n2\n3\n3\n4\n3\n4\n3\n4\n3\n"}, {"input": "52\n8589934592\n67108864\n6\n8388608\n32768\n1073741824\n16777216\n8192\n39916800\n262144\n256\n2097152\n2\n5040\n68719476736\n1024\n549755813888\n64\n362880\n268435456\n4294967296\n524288\n131072\n2048\n32\n4\n24\n40320\n4096\n33554432\n87178291200\n512\n128\n8\n16384\n1\n65536\n4194304\n34359738368\n120\n536870912\n720\n479001600\n17179869184\n274877906944\n3628800\n134217728\n2147483648\n6227020800\n137438953472\n1048576\n16\n", "output": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"}, {"input": "22\n1\n3\n11\n43\n107\n235\n491\n3499\n12203\n28587\n98155\n229227\n1013995\n2062571\n15685995\n32463211\n234643051\n1509641835\n3657125483\n66233778651\n477441124711\n546451189359\n", "output": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n"}, {"input": "100\n201\n203\n205\n207\n209\n211\n213\n215\n217\n219\n221\n223\n225\n227\n229\n231\n233\n235\n237\n239\n241\n243\n245\n247\n249\n251\n253\n255\n257\n259\n261\n263\n265\n267\n269\n271\n273\n275\n277\n279\n281\n283\n285\n287\n289\n291\n293\n295\n297\n299\n301\n303\n305\n307\n309\n311\n313\n315\n317\n319\n321\n323\n325\n327\n329\n331\n333\n335\n337\n339\n341\n343\n345\n347\n349\n351\n353\n355\n357\n359\n361\n363\n365\n367\n369\n371\n373\n375\n377\n379\n381\n383\n385\n387\n389\n391\n393\n395\n397\n399\n", "output": "4\n5\n5\n5\n4\n5\n5\n5\n4\n5\n5\n5\n4\n5\n5\n5\n5\n6\n6\n6\n5\n6\n6\n6\n3\n4\n4\n4\n2\n3\n3\n3\n3\n4\n4\n4\n3\n4\n4\n4\n3\n4\n4\n4\n3\n4\n4\n4\n4\n5\n5\n5\n4\n5\n5\n5\n4\n5\n5\n5\n3\n4\n4\n4\n4\n5\n5\n5\n4\n5\n5\n5\n4\n5\n5\n5\n4\n5\n5\n5\n5\n6\n6\n6\n5\n6\n6\n6\n3\n4\n4\n4\n3\n4\n4\n4\n4\n5\n5\n5\n"}, {"input": "100\n893\n762\n471\n646\n612\n435\n775\n455\n410\n417\n443\n752\n639\n510\n960\n522\n896\n809\n638\n602\n710\n458\n410\n479\n895\n439\n519\n797\n774\n921\n688\n721\n669\n873\n877\n685\n655\n536\n580\n520\n994\n480\n824\n466\n999\n927\n630\n916\n726\n923\n874\n707\n741\n503\n488\n436\n433\n469\n557\n913\n777\n561\n594\n842\n511\n974\n470\n534\n747\n421\n614\n495\n491\n403\n637\n605\n695\n811\n511\n513\n702\n907\n828\n739\n667\n579\n753\n734\n456\n819\n847\n633\n826\n562\n761\n796\n847\n565\n648\n419\n", "output": "5\n4\n6\n3\n4\n6\n4\n5\n4\n4\n5\n2\n4\n4\n4\n3\n3\n4\n3\n4\n4\n5\n4\n6\n5\n6\n3\n5\n3\n5\n4\n2\n5\n4\n5\n6\n5\n2\n3\n2\n4\n4\n4\n5\n5\n6\n5\n4\n2\n6\n4\n5\n4\n7\n5\n5\n5\n6\n5\n4\n4\n4\n4\n3\n5\n4\n5\n3\n4\n5\n4\n7\n7\n5\n4\n5\n6\n5\n5\n2\n4\n5\n5\n4\n5\n4\n3\n3\n4\n5\n4\n3\n5\n4\n4\n4\n4\n5\n3\n5\n"}, {"input": "1\n488408742907\n", "output": "15\n"}, {"input": "51\n2097151\n134217727\n1048575\n4194303\n32767\n1073741823\n1\n719\n23\n5039\n2147483647\n1023\n255\n536870911\n33554431\n2047\n3\n87178291199\n131071\n31\n16777215\n127\n268435455\n17179869183\n7\n6227020799\n63\n8589934591\n3628799\n16383\n511\n67108863\n274877906943\n137438953471\n8388607\n39916799\n362879\n34359738367\n262143\n8191\n65535\n119\n549755813887\n479001599\n4294967295\n4095\n524287\n40319\n5\n15\n68719476735\n", "output": "12\n12\n11\n8\n9\n13\n1\n6\n3\n7\n14\n6\n4\n12\n11\n7\n2\n15\n8\n3\n10\n3\n13\n15\n2\n15\n4\n14\n11\n8\n5\n11\n16\n15\n9\n10\n8\n16\n9\n7\n7\n5\n17\n13\n15\n8\n10\n8\n2\n3\n17\n"}, {"input": "52\n134217729\n16777217\n137438953473\n262145\n4194305\n524289\n479001601\n721\n1048577\n513\n268435457\n40321\n5\n129\n65\n17179869185\n65537\n4294967297\n1025\n32769\n8388609\n39916801\n549755813889\n33554433\n536870913\n68719476737\n87178291201\n25\n9\n17\n16385\n257\n2097153\n7\n121\n4097\n5041\n33\n2147483649\n274877906945\n2\n362881\n67108865\n3628801\n2049\n6227020801\n8193\n131073\n1073741825\n8589934593\n34359738369\n3\n", "output": "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"}]}
{"statement": "Task: Given an array A of N lowercase letter strings, all of the same length, choose any set of deletion indices, and for each string, delete all the characters in those indices. Find the minimum possible value of D.length such that after deleting columns in the set of deletion indices D, the final array has every element (row) in lexicographic order.\n\nInput: The input is an array A of N strings of length L, where each string is composed of lowercase letters. The input arrives from standard input.\n\nOutput: The output is a single integer representing the minimum possible value of D.length.\n\nConstraints: 1 <= N <= 100 and 1 <= L <= 100.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/delete-columns-to-make-sorted-iii/", "sample_test_cases": [{"input": [["\"babca\"", "\"bbazb\""]], "output": 4}]}
{"statement": "Task: Given a chessboard of size NxN, with a white knight and several black pawns located on the board, find the maximum number of black pawns that can be captured by the white knight before it reaches the rightmost column of the board, while moving only towards the right of the board.\n\nInput: The input consists of t test cases, where each test case includes the size of the board (N) and the layout of the board with 'K' representing the white knight and 'P' representing black pawns. The input is provided through standard input.\n\nOutput: For each test case, output a single integer indicating the maximum number of black pawns that can be captured by the white knight.\n\nConstraints: $4 \\leq N \\leq 1000$, there is exactly one white knight ('K') on the board.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codechef", "url": "https://www.codechef.com/problems/E1", "sample_test_cases": [{"input": "1\n5\nK....\n..P..\n.P...\n...P.\n.....", "output": "2"}]}
{"statement": "Task: Given a string A and a dictionary of n words B, determine if A can be segmented into a space-separated sequence of dictionary words. The words from the dictionary can be used any number of times and in any order.\n\nInput: The input consists of a string A of length s and a list of n words B. The words from the dictionary are represented as strings. The input is provided through standard input.\n\nOutput: The output should be a single integer, 1 if it is possible to break the string into words from the dictionary, and 0 otherwise.\n\nConstraints: 1 \u2264 N \u2264 12 and 1 \u2264 s \u2264 1100, where s is the length of string A.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/word-break1352/1", "sample_test_cases": [{"input": "n = 12\r\nB = { \"i\", \"like\", \"sam\",\r\n\"sung\", \"samsung\", \"mobile\",\r\n\"ice\",\"cream\", \"icecream\",\r\n\"man\", \"go\", \"mango\" }\r\nA = \"ilike\"", "output": "1"}, {"input": "n = 12\r\nB = { \"i\", \"like\", \"sam\",\r\n\"sung\", \"samsung\", \"mobile\",\r\n\"ice\",\"cream\", \"icecream\", \r\n\"man\", \"go\", \"mango\" }\r\nA = \"ilikesamsung\"", "output": "1"}]}
{"statement": "Task: Given a train with n wagons, a stowaway and a controller play a game where the stowaway tries to reach the terminal station without being caught by the controller. The controller moves cyclically from the head to the tail of the train and back again, while the stowaway can move to neighboring wagons or leave the train and re-enter at any wagon. The players move in an alternating fashion, with the stowaway moving first when the train is moving, and the controller moving first when the train is idle. Determine the winner of the game.\n\nInput: The first line of input contains three integers n, m and k, representing the number of wagons in the train, the stowaway's initial position, and the controller's initial position, respectively. The second line contains a string either \"to head\" or \"to tail\", representing the direction in which the controller moves. The third line contains a binary string of length m+1, representing the state of the train at each minute. A \"0\" indicates that the train is moving, while a \"1\" indicates that the train is idle. \n\nOutput: If the stowaway wins, output \"Stowaway\". Otherwise, output \"Controller\" followed by the minute at which the stowaway is caught.\n\nConstraints: 2 \u2264 n \u2264 50, 1 \u2264 m \u2264 200, 1 \u2264 k, m \u2264 n, m \u2260 k.", "editorial": "", "tag": "['Dynamic programming', 'Game theory', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/74/B", "sample_test_cases": [{"input": "50 4 12\nto tail\n00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000010000000010000000000000000000000000000000000000000001\n", "output": "Stowaway\n"}, {"input": "3 1 3\nto head\n10111111111111111011110110111111110111011111111111111111110101111111111111101111111111011110111110111111111111111111111111111110111111111111111110001011101111101110111111111111111111110101111111110011\n", "output": "Controller 148\n"}, {"input": "2 2 1\nto tail\n01\n", "output": "Controller 1\n"}, {"input": "5 1 4\nto head\n1000000000001\n", "output": "Controller 7\n"}, {"input": "10 2 1\nto tail\n000000001\n", "output": "Stowaway\n"}, {"input": "9 7 2\nto head\n1000100010110000101010010000000000010010000010100000001001000000001000000101100000000001\n", "output": "Controller 33\n"}, {"input": "3 2 3\nto head\n0000000000000000001\n", "output": "Controller 2\n"}, {"input": "13 9 8\nto tail\n000000000000000000000000000010011100000000000100100000000010000100000000000000000000000000000000000000010000011\n", "output": "Controller 5\n"}, {"input": "2 1 2\nto head\n1101\n", "output": "Controller 3\n"}, {"input": "2 2 1\nto tail\n10111111111111111110111011111111111111111111111111111110111111111110111111101111111111111111111111011111111111111011111111110111111101111111111101111111111111111101111111111111111111111111111001111111\n", "output": "Controller 2\n"}, {"input": "5 4 2\nto tail\n1\n", "output": "Stowaway\n"}, {"input": "4 3 1\nto tail\n1000001001101\n", "output": "Controller 6\n"}, {"input": "4 1 3\nto head\n011000011000001\n", "output": "Controller 14\n"}, {"input": "10 3 6\nto head\n0000001001010100000001010001000110001100011100000100100001100000001100000000000010000001000100100011\n", "output": "Controller 5\n"}, {"input": "50 42 13\nto head\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n", "output": "Controller 61\n"}]}
{"statement": "Task: A car starts at position 0 on an infinite number line and drives automatically according to a sequence of instructions A (accelerate) and R (reverse). When the car receives an instruction \"A\", it increases its position by its current speed and doubles its speed. When the car receives an instruction \"R\", it changes the sign of its speed. Given a target position, find the minimum number of instructions needed to reach that position.\n\nInput: The input consists of a single integer, the target position, received from standard input.\n\nOutput: The output consists of a single integer, the minimum number of instructions needed to reach the target position.\n\nConstraints: The target position is an integer between 1 and 10000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/race-car/", "sample_test_cases": [{"input": [3], "output": 2}]}
{"statement": "Task: Given a list of n abbreviated names of Berland kings and their relatives, find the length of the longest possible name of a dynasty that could have existed in Berland. A dynasty is formed by concatenating all the short names of the kings in the order in which they ruled. The first name of the heir should be the same as the last name of the predecessor and the first name of the first king in the dynasty should coincide with the last name of the last king in this dynasty. If no dynasty can be found, print 0.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 5\u00b7105) representing the number of names in Vasya's list, followed by n lines containing n abbreviated names, one per line. The input arrives from standard input.\n\nOutput: The output is a single integer representing the length of the longest possible name of a dynasty that could have existed in Berland.\n\nConstraints: The abbreviated names are non-empty sequences of lowercase Latin letters. The length of each abbreviated name does not exceed 10 characters.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/191/A", "sample_test_cases": [{"input": "10\nabdcced\nbdacdac\necb\ndc\neaeeebdd\nadcdbadcac\neb\naadecccde\nedbaeacad\naccd\n", "output": "0\n"}, {"input": "100\nd\na\ne\neb\nc\nd\nd\ne\nc\ne\nac\nd\nc\naa\na\ne\nda\ne\ne\nc\ne\na\nc\nc\nbc\nbd\nd\nda\ncc\nbe\nb\na\nee\nd\nbe\nbe\ne\nb\na\ned\ncb\nab\na\nea\nac\naa\ned\nd\nb\neb\ne\ned\nc\nce\nc\nd\nc\nd\nd\nee\ne\nb\nea\nea\nda\nab\nba\ned\nda\nec\nea\nbd\nee\ndc\nd\nbd\nd\nc\ncc\nab\nbd\na\nad\ne\nd\ne\nbc\nbb\nc\nbc\na\na\ne\nca\nac\nc\nad\nc\nbe\nd\n", "output": "35\n"}, {"input": "3\nab\nacb\nba\n", "output": "5\n"}, {"input": "10\na\nb\na\nc\nb\na\nb\na\na\na\n", "output": "6\n"}, {"input": "5\ncab\nbbc\ncaa\nccc\naca\n", "output": "9\n"}, {"input": "3\nac\nabc\nca\n", "output": "5\n"}, {"input": "5\nab\nbc\ncd\nde\nffffffffff\n", "output": "10\n"}, {"input": "16\nddgcb\nfgbhgbdg\ngha\ndh\nddfb\nfggbc\nedb\nhd\nd\nhfgcabf\nhdaef\nfhbcdgba\nchee\ncafeggc\nf\necb\n", "output": "7\n"}, {"input": "50\nagecd\ncghafi\nfiide\niecc\njbdcfjhgd\ndiee\nhfeg\nehc\ngfijgjh\ngacaifebg\ndicbbddc\nhjgciaei\njjcdh\ng\ngc\ncf\nhfdjhd\nc\nicidbec\nji\neeh\ncgeejggc\nacfd\njjg\najefdj\neghhebiic\nbih\ngbb\njjaa\nidc\ngafi\necg\ndbigbjiehj\ncedif\nahidfaaajg\nhfhhiccbgb\ndgegjgieif\nhgjebhfdc\nj\nahehd\nahdah\nbijbhh\na\ndabiggfhac\ndedigbjbf\nihbdj\niihagchd\ngfebhfdi\njbjdcggdh\nf\n", "output": "37\n"}, {"input": "10\nabdcced\nbcacdac\necb\ndc\neaeeebdd\nadcdbadcac\neb\naadecccde\nedbaeacad\naccd\n", "output": "0\n"}, {"input": "100\nd\na\ne\neb\nc\nd\nd\ne\nc\ne\nac\nd\nc\naa\na\ne\nda\ne\ne\nc\ne\na\nc\nc\nbc\nbd\nd\nda\ncc\nbe\nb\na\nee\nd\nbe\nbe\ne\nb\na\ned\ncb\nab\na\nea\nac\naa\ned\nd\nb\neb\ne\ned\nc\nce\nc\nd\nc\nd\nd\nee\ne\nb\nea\nea\nda\nab\nba\ned\nda\nec\nea\nbd\nee\ndc\nd\nbd\nd\nc\ncc\nab\nbd\na\nad\nd\nd\ne\nbc\nbb\nc\nbc\na\na\ne\nca\nac\nc\nad\nc\nbe\nd\n", "output": "35\n"}, {"input": "10\na\nb\nb\nc\nb\na\nb\na\na\na\n", "output": "5\n"}, {"input": "5\nc`b\nbbc\ncaa\nccc\naca\n", "output": "9\n"}, {"input": "5\nab\nbc\ndc\nde\nffffffffff\n", "output": "10\n"}, {"input": "16\nddgcb\nfgbhgbdg\ngha\neh\nddfb\nfggbc\nedb\nhd\nd\nhfgcabf\nhdaef\nfhbcdgba\nchee\ncafeggc\nf\necb\n", "output": "7\n"}]}
{"statement": "Task: Given an array of N integers, find the length of the longest strictly increasing subsequence.\n\nInput: The input consists of an integer N, followed by N integers A[i] representing the elements of the array. Input arrives from standard input.\n\nOutput: The output should be a single integer representing the length of the longest strictly increasing subsequence.\n\nConstraints: 1 \u2264 N \u2264 10^4, 0 \u2264 A[i] \u2264 10^6.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1", "sample_test_cases": [{"input": "N = 16\nA = {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15}", "output": "6"}, {"input": "N = 6\nA[] = {5,8,3,7,9,1}", "output": "3"}]}
{"statement": "Task: Given a string $s$ of lowercase Latin letters, find the number of occurrences of the most frequent hidden string in $s$. A hidden string is a subsequence of $s$ whose indices form an arithmetic progression.\n\nInput: The input is a single line containing a string $s$ of lowercase Latin letters. The input is provided through standard input.\n\nOutput: Output a single integer representing the number of occurrences of the most frequent hidden string.\n\nConstraints: The length of the input string $s$ is between 1 and $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Complete search', 'Mathematics', 'String algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1307/C", "sample_test_cases": [{"input": "aaabb\n", "output": "6\n"}, {"input": "usaco\n", "output": "1\n"}, {"input": "lol\n", "output": "2\n"}, {"input": "qdpinbmcrfwxpdbfgozvvocemjructoadewegtvbvbfwwrpgyeaxgddrwvlqnygwmwhmrhaizpyxvgaflrsvzhhzrouvpxrkxfza\n", "output": "37\n"}, {"input": "cc\n", "output": "2\n"}, {"input": "qqq\n", "output": "3\n"}, {"input": "aaaa\n", "output": "6\n"}, {"input": "bdhzijklmaopxqrstnfugvcwye\n", "output": "1\n"}, {"input": "bdhzijklmaopxqrstnfugvcwyeb\n", "output": "2\n"}, {"input": "zy\n", "output": "1\n"}, {"input": "zzzzzzzzzzzzzzzz\n", "output": "120\n"}, {"input": "aaaaaaaaaaa\n", "output": "55\n"}, {"input": "abccabaccddbabddab\n", "output": "16\n"}, {"input": "abcdefghijklyyyyyyymnopqrstuvwxabcdefghijklyyyyyyymnopqrstuvwxabcdefghijklyyyyyyymnopqrstuvwxabcdefghijklyyyyyyymnopqrstuvwxabcdefghijklyyyyyyymnopqrstuvwxabcdefghijklzzzzzzzmnopqrstuvwxabcdefghijklzzzzzzzmnopqrstuvwxabcdefghijklzzzzzzzmnopqrstuvwxabcdefghijklzzzzzzzmnopqrstuvwxabcdefghijklzzzzzzzmnopqrstuvwx\n", "output": "1225\n"}, {"input": "abcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxyyyyyyyyyzzzzzzzzzabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxabcdefghijklmnopqrstuvwx\n", "output": "81\n"}]}
{"statement": "Task: Given an $n \\times m$ matrix consisting of \"*\" and \".\", count the number of spruces in the matrix, where a spruce is defined as a set of matrix cells containing \"*\" and satisfying certain conditions.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 500$) \u2014 matrix size. The next $n$ lines of each test case contain $m$ characters $c_{i, j}$ \u2014 matrix contents. The input is read from standard input.\n\nOutput: For each test case, output a single integer \u2014 the total number of spruces in the matrix.\n\nConstraints: The sum of $n \\cdot m$ over all test cases does not exceed $500^2$ ($\\sum n \\cdot m \\le 500^2$).", "editorial": "", "tag": "['Dynamic programming', 'Implementation', 'Complete search']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1461/B", "sample_test_cases": [{"input": "4\n2 3\n.*.\n***\n2 3\n.*.\n**.\n4 5\n.***.\n*****\n*****\n*.*.*\n5 7\n..*.*..\n.*****.\n*******\n.*****.\n..*.*..\n", "output": "5\n3\n23\n34\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n19\n22\n4\n8\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n19\n22\n4\n8\n"}, {"input": "4\n2 3\n..*\n***\n2 3\n.*.\n**.\n4 5\n.***.\n*****\n*****\n*.*.*\n5 7\n..*.*..\n.*****.\n*******\n.*****.\n..*.*..\n", "output": "4\n3\n23\n34\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n*****.\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n19\n22\n4\n8\n"}, {"input": "4\n2 3\n..*\n***\n2 3\n.*.\n**.\n4 5\n.***.\n*****\n*****\n*.*.*\n1 7\n..*.*..\n.*****.\n*******\n.*****.\n..*.*..\n", "output": "4\n3\n23\n2\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n1 4\n.**.\n****\n", "output": "24\n89\n19\n22\n4\n2\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n***.*\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n1 4\n.**.\n****\n", "output": "24\n89\n20\n22\n4\n2\n"}, {"input": "4\n2 3\n..*\n***\n2 3\n.*.\n**.\n4 5\n.***.\n*****\n*****\n*.*.*\n5 7\n..*.*..\n.*****.\n*******\n****.*.\n..*.*..\n", "output": "4\n3\n23\n32\n"}, {"input": "6\n4 7\n...*...\n..***..\n..****.\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n***.*\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n20\n22\n4\n8\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.***..\n***.*.\n.*****\n3 3\n*.*\n...\n*.*\n1 4\n.**.\n****\n", "output": "24\n89\n19\n19\n4\n2\n"}, {"input": "6\n4 7\n...*...\n..***..\n..****.\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n***.*\n*...*\n5 6\n.*....\n.*.*..\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n20\n21\n4\n8\n"}, {"input": "4\n2 3\n..*\n***\n2 3\n.*.\n**.\n4 5\n**.*.\n*****\n*****\n*.*.*\n1 7\n..*.*..\n.*****/\n*******\n.*****.\n..*.*..\n", "output": "4\n3\n21\n2\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n.*******..\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n***.*\n*...*\n5 6\n.*....\n.**...\n.***..\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n1 4\n**..\n****\n", "output": "24\n87\n20\n22\n4\n2\n"}, {"input": "6\n4 7\n...*...\n..***..\n.****..\n*******\n6 10\n....*.*...\n...*****..\n..*******.\n.********.\n********.*\n**********\n5 5\n*...*\n**.**\n*****\n**.**\n*...*\n5 6\n.*....\n.**...\n.*.**.\n.****.\n.*****\n3 3\n*.*\n...\n*.*\n2 4\n.**.\n****\n", "output": "24\n89\n19\n20\n4\n8\n"}]}
{"statement": "Task: Given two arrays of integers, nums1 and nums2, find the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.\n\nInput: The input consists of two arrays of integers, nums1 and nums2, which are received from standard input. The length of nums1 and nums2 is between 1 and 500, and the values of each element in the arrays are between -1000 and 1000.\n\nOutput: The output is a single integer, which represents the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.\n\nConstraints: The length of nums1 and nums2 is between 1 and 500, and the values of each element in the arrays are between -1000 and 1000.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/max-dot-product-of-two-subsequences/", "sample_test_cases": [{"input": [[2, 1, -2, 5], [3, 0, -6]], "output": 18}]}
{"statement": "Task: Given an amount $n$ and a list of coin denominations $c$, determine the number of ways to make change for $n$ using the coins in $c$. A coin denomination is an integer value that represents the value of a coin. There is a limitless supply of each coin type.\n\nInput: The input consists of two lines. The first line contains two space-separated integers $n$ and $m$, where $n$ is the amount to change and $m$ is the number of coin types. The second line contains $m$ space-separated integers that describe the values of each coin type. The input is received from standard input.\n\nOutput: The output is a single integer representing the number of ways to make change for $n$ using the coins in $c$.\n\nConstraints: Each coin denomination $c_i$ is a distinct integer between 1 and 50. The amount $n$ is an integer between 1 and 250, and the number of coin types $m$ is an integer between 1 and 50. The problem can be solved using dynamic programming to avoid solving the same subproblem multiple times.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/coin-change/problem", "sample_test_cases": [{"input": "4 3\n1 2 3\n", "output": "4\n"}, {"input": "10 4\n2 5 3 6\n", "output": "5\n"}]}
{"statement": "Task: Given an array Arr of size N, each element of the array represents the amount of calories, the task is to calculate the maximum of amount of calories you can get remembering the fact that you cannot take three consecutive calories.\n\nInput: The input consists of two lines. The first line contains an integer N, representing the size of the array. The second line contains N space-separated integers, representing the amount of calories in each element of the array. Input is received from standard input.\n\nOutput: The output is a single integer, representing the maximum amount of calories that can be obtained from the given array while ensuring that no three consecutive calories are taken.\n\nConstraints: The input size is limited to 10^5, and the calorie values are limited to 10^4.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/maximum-calorie0056/1", "sample_test_cases": [{"input": "N = 5, arr[] = {3, 2, 1, 10, 3}", "output": "18"}, {"input": "N = 2, arr[] = {8, 15}", "output": "23"}]}
{"statement": "Task: Given a number N, find the minimum number of perfect squares that sum up to N.\n\nInput: The input is a single integer N, which represents the number to be expressed as the sum of squares. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the minimum number of perfect squares required to sum up to N.\n\nConstraints: The input integer N is constrained such that 1 <= N <= 10000. The time complexity of the solution should be O(N * sqrt(N)), and the space complexity should be O(N).\n\nMathematical Concepts: Perfect squares, sum of squares.\n\nComputer Science Concepts: Input/output, time complexity, space complexity.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/get-minimum-squares0538/1", "sample_test_cases": [{"input": "N = 100", "output": "1"}, {"input": "N = 6", "output": "3"}]}
{"statement": "Task: Given a starting position, a destination, and a list of gas stations with their respective distances from the starting position and the amount of gas they have, find the minimum number of refueling stops the car must make to reach its destination. If the car cannot reach the destination, return -1.\n\nInput: The input consists of three integers: target, startFuel, and a list of gas stations. The gas station list is a list of lists, where each inner list contains two integers: the distance of the gas station from the starting position and the amount of gas it has. The input is read from standard input.\n\nOutput: The output is a single integer representing the minimum number of refueling stops the car must make to reach its destination. If it cannot reach the destination, the function should return -1.\n\nConstraints: 1 <= target, startFuel, stations[i][1] <= 10^9, 0 <= stations.length <= 500, and 0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target.\n\nMathematical Concepts: The problem can be modeled as a graph, where the starting position is the source node, the destination is the sink node, and the gas stations are intermediate nodes. Each node is connected to its adjacent nodes by edges, and the weight of each edge is the amount of fuel required to travel from one node to the other. The problem can be solved using graph algorithms such as Dijkstra's algorithm or dynamic programming.\n\nComputer Science Concepts: The problem involves input/output operations, data structures such as arrays and lists, and algorithms such as Dijkstra's algorithm or dynamic programming. The problem can be solved using iterative or recursive approaches, and the time and space complexity of the solution depend on the algorithm used. The problem also involves error handling, as the function should return -1 if the car cannot reach the destination.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/minimum-number-of-refueling-stops/", "sample_test_cases": [{"input": [1, 1, [[], []]], "output": 0}]}
{"statement": "Task: Given a N*M grid of characters 'O', 'X', and 'Y', find the minimum Manhattan distance between an 'X' and a 'Y' character.\n\nInput: The first line of input contains two integers N and M, representing the dimensions of the grid. This is followed by N lines, each containing M characters, representing the grid. The characters can be 'O', 'X', or 'Y'. The input is provided through standard input.\n\nOutput: The output should consist of a single integer representing the minimum Manhattan distance between an 'X' and a 'Y' character in the given grid.\n\nConstraints: 1 \u2264 N*M \u2264 10^5, there exists at least one 'X' and at least one 'Y' in the grid.", "editorial": "", "tag": "['Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/7366ce450d84b55391fc787a681c4d60de359e72/1", "sample_test_cases": [{"input": "N = 4, M = 4\r\ngrid  = {{X, O, O, O}\r\n         {O, Y, O, Y}\r\n         {X, X, O, O}\r\n         {O, Y, O, O}}", "output": "1"}, {"input": "N = 3, M = 3\r\ngrid = {{X, X, O}\r\n        {O, O, Y}\r\n        {Y, O, O}}", "output": "2"}]}
{"statement": "Task: Given a 5x6 snakes and ladders board, find the minimum number of dice throws required to reach the destination or last cell (30^{th} cell) from the source (1st cell) by moving along the board according to the values obtained on a 6-sided dice. The board contains snakes and ladders, which can either help or hinder progress, and the player must navigate around them to reach the destination.\n\nInput: The input consists of an integer N denoting the total number of snakes and ladders and an array arr[] of 2*N size where 2*i and (2*i + 1)^{th} values denote the starting and ending point respectively of i^{th }snake or ladder. The input is taken from standard input.\n\nOutput: The output should be a single integer denoting the minimum number of dice throws required to reach the destination.\n\nConstraints: The input constraints are: 1 \u2264 N \u2264 10 and 1 \u2264 arr[i] \u2264 30.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Data structures', 'Graph traversal']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/snake-and-ladder-problem4816/1", "sample_test_cases": [{"input": "N = 8\r\narr[] = {3, 22, 5, 8, 11, 26, 20, 29, \r\n       17, 4, 19, 7, 27, 1, 21, 9}", "output": "3"}]}
{"statement": "Task: Given a binary matrix of size n x m, find the maximum size square sub-matrix with all 1s. \n\nInput: The input consists of three lines. The first line contains two integers n and m, representing the number of rows and columns of the binary matrix, respectively. The next n lines contain m integers each, representing the elements of the binary matrix. Each element of the matrix is either 0 or 1. Input is received from standard input. \n\nOutput: The output is a single integer representing the size of the maximum square sub-matrix with all 1s. If there are no 1s in the matrix, the output is 0. \n\nConstraints: The size of the binary matrix is constrained by 1 \u2264 n, m \u2264 50. The time complexity of the solution should be O(n*m) with an auxiliary space of O(n*m).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/largest-square-formed-in-a-matrix0806/1", "sample_test_cases": [{"input": "n = 2, m = 2\nmat = {{1, 1}, \n       {1, 1}}", "output": "2"}, {"input": "n = 2, m = 2\nmat = {{0, 0}, \n       {0, 0}}", "output": "0"}]}
{"statement": "Task: Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.\n\nInput: The input consists of a single array of integers A received from standard input. The array A represents a circular array C, where the end of the array connects to the beginning of the array. \n\nOutput: The output is a single integer representing the maximum sum of a non-empty subarray of C.\n\nConstraints: The integers in the input array can range from -30000 to 30000, and the length of the array can range from 1 to 30000. The subarray may only include each element of the fixed buffer A at most once. For a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Divide and conquer']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/maximum-sum-circular-subarray/", "sample_test_cases": [{"input": [[-2, 3, -2, 1]], "output": 3}]}
{"statement": "Task: Given two strings str1 and str2, find the shortest string that has both str1 and str2 as subsequences. If there are multiple answers, return any of them.\n\nInput: The input consists of two strings, str1 and str2, both consisting of lowercase English letters. The input is provided through standard input.\n\nOutput: Output a single string, which is the shortest string that contains both str1 and str2 as subsequences.\n\nConstraints: The input strings have a length between 1 and 1000.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/shortest-common-supersequence/", "sample_test_cases": [{"input": ["\"abac\"", "\"cab\""], "output": "\"cabac\""}]}
{"statement": "Task: Given three strings A, B, and C, find the length of the longest common sub-sequence in all three strings.\n\nInput: The input consists of three strings A, B, and C, and their respective lengths n1, n2, and n3. The input is provided through standard input.\n\nOutput: The output is a single integer representing the length of the longest common sub-sequence in all three strings.\n\nConstraints: The lengths of the three strings are between 1 and 20, inclusive.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/lcs-of-three-strings0028/1", "sample_test_cases": [{"input": "A = \"geeks\", B = \"geeksfor\", \nC = \"geeksforgeeks\"", "output": "5"}, {"input": "A = \"abcd\", B = \"efgh\", C = \"ijkl\"", "output": "0"}]}
{"statement": "Task: Given a string composed of lowercase English letters, find the maximum product of the lengths of two palindromic subsequences of the string. The subsequences should not overlap.\n\nInput: The input is a single line containing a word composed of lowercase English letters. The input is read from standard input.\n\nOutput: Output a single integer representing the maximum possible score that can be obtained by building two palindromic subsequences. The output is written to standard output.\n\nConstraints: The input string will have a length between 1 and 3000, and each character will be a lowercase English alphabet.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/strplay/problem", "sample_test_cases": [{"input": "eeegeeksforskeeggeeks\n", "output": "50\n"}]}
{"statement": "Task: Given two integers 'n' and 'sum', find the count of all n digit numbers whose sum of digits is 'sum'. Leading 0's are not counted as digits.\n\nInput: The input consists of two integers 'n' and 'sum', provided through standard input.\n\nOutput: The output should be a single integer, which represents the count of all n digit numbers whose sum of digits is equal to the given 'sum'.\n\nConstraints: The value of 'n' should be between 1 and 100, and the value of 'sum' should be between 1 and 1000.\n\nExplanation: The problem involves finding the number of n digit integers whose digits add up to a given sum. For example, if n=2 and sum=2, the possible n digit numbers are 11 and 20. The task is to find the count of such numbers. The input consists of two integers 'n' and 'sum', which are provided through standard input. The output should be a single integer, which represents the count of all n digit numbers whose sum of digits is equal to the given 'sum'. The constraints are that the value of 'n' should be between 1 and 100, and the value of 'sum' should be between 1 and 1000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum0733/1", "sample_test_cases": [{"input": "n = 2, sum = 2", "output": "2"}, {"input": "n = 1, sum = 10", "output": "-1"}]}
{"statement": "Task: Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n\nInput: The input is a single integer array, which arrives from standard input. The input array can have up to 2 * 10^4 elements and each element can have a value between -10^4 and 10^4.\n\nOutput: The output is a single integer representing the largest product of a contiguous subarray within the input array.\n\nConstraints: The input array can have up to 2 * 10^4 elements and each element can have a value between -10^4 and 10^4.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/maximum-product-subarray/", "sample_test_cases": [{"input": [[2, 3, -2, 4]], "output": 6}]}
{"statement": "Task: Given an integer $n$, and two integers $l$ and $r$, find the number of arrays of length $n$ consisting of integers between $l$ and $r$ (inclusive) such that the sum of all the integers in the array is divisible by $3$. The answer should be output modulo $10^9 + 7$. If there are no satisfying arrays, output $0$.\n\nInput: The input consists of a single line containing three integers: $n$, $l$, and $r$. The input is provided through standard input.\n\nOutput: The output should be a single integer, which is the number of ways to restore the array modulo $10^9 + 7$.\n\nConstraints: $1 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq l \\leq r \\leq 10^9$.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1105/C", "sample_test_cases": [{"input": "2 1 3\n", "output": "3\n"}, {"input": "3 2 2\n", "output": "1\n"}, {"input": "9 9 99\n", "output": "711426616\n"}, {"input": "1000 562 6782363\n", "output": "710038164\n"}, {"input": "200000 1 1000000000\n", "output": "69063912\n"}, {"input": "1 1 1\n", "output": "0\n"}, {"input": "3 1000000000 1000000000\n", "output": "1\n"}, {"input": "120881 536336525 585696606\n", "output": "915864703\n"}, {"input": "7884 43814 254290\n", "output": "104223746\n"}, {"input": "3895 1 564243401\n", "output": "169725536\n"}, {"input": "3253 53 64\n", "output": "655055602\n"}, {"input": "557 686714962 940820215\n", "output": "18124659\n"}, {"input": "121382 445163929 988375913\n", "output": "594431176\n"}, {"input": "2 5 1000\n", "output": "330672\n"}, {"input": "1 1 1000000000\n", "output": "333333333\n"}]}
{"statement": "Task: Given a square chess board represented by a 2D binary matrix of size n x n, count the number of empty squares of all possible sizes, where the smallest size of the square is 2x2 and the biggest size is nxn. \n\nInput: The input is a square chess board represented by a 2D binary matrix of size n x n, where each element is either 0 or 1. The input is received from standard input.\n\nOutput: The output is an object where each item is the size of the square and the number of squares of that size. If there are no squares, return an empty object.\n\nConstraints: The size of the board is between 2 and 400 for JavaScript, 2 and 120 for Python, 2 and 130 for Ruby, 2 and 250 for Java, and 2 and 120 for Haskell.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codewars", "url": "https://www.codewars.com/kata/5bc6f9110ca59325c1000254", "sample_test_cases": []}
{"statement": "Task: Given a set of $n$ intervals on a number line, find the size of its largest possible subset of intervals such that no three intervals in the subset share a common point.\n\nInput Format: The first line contains an integer $S$, denoting the number of interval sets you must find answers for. The $s\\cdot(n+1)$ subsequent lines describe each of the $S$ interval sets as follows:\n\nThe first line contains an integer $n$, denoting the number of intervals in the list. Each line $i$ of the $n$ subsequent lines contains two space-separated integers describing the respective starting ($a_i$) and ending ($b_i$) boundaries of an interval on the number line.\n\nOutput Format: For each of the $S$ interval sets, print an integer denoting the size of the largest possible subset of intervals in the given set such that no three points in the subset overlap.\n\nConstraints: $1\\leq S\\leq100$, $2\\leq n\\leq1000$, $1\\leq a_i\\leq b_i\\leq10^9$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/interval-selection/problem", "sample_test_cases": [{"input": "4\n3\n1 2\n2 3\n2 4\n3\n1 5\n1 5\n1 5\n4\n1 10\n1 3\n4 6\n7 10\n4\n1 10\n1 3\n3 6\n7 10\n", "output": "2\n2\n4\n3\n"}]}
{"statement": "Task: Given a tree T with n nodes, count the number of subtrees (T') of T that have at most K edges connected to (T - T').\n\nInput: The input consists of an integer n denoting the number of nodes in the tree, an integer K, and n-1 lines containing two integers each, indicating an edge between two nodes. The input is provided through standard input.\n\nOutput: The output is a single integer representing the number of possible subtrees of T satisfying the given condition.\n\nConstraints: 1 <= K <= n <= 50, and every node is indicated by a distinct number from 1 to n.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/cuttree/problem", "sample_test_cases": [{"input": "3 1\n2 1\n2 3\n", "output": "6\n"}]}
{"statement": "Task: Given two sorted arrays of distinct integers, find the maximum score that can be obtained by traversing a valid path. A valid path is defined as follows: choose one of the arrays to traverse, traverse it from left to right, and if a value is present in both arrays, switch to the other array. The score is defined as the sum of unique values in the valid path. Return the maximum score modulo 10^9 + 7.\n\nInput: The input consists of two lines, each containing a sorted array of distinct integers. The first line represents nums1 and the second line represents nums2. Input is provided through standard input.\n\nOutput: The output is a single integer representing the maximum score that can be obtained from all possible valid paths.\n\nConstraints: The input arrays nums1 and nums2 have lengths between 1 and 10^5, and their elements are between 1 and 10^7. The arrays are strictly increasing.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Amortized analysis', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "leetcode", "url": "https://leetcode.com/problems/get-the-maximum-score/", "sample_test_cases": [{"input": [[2, 4, 5, 8, 10], [4, 6, 8, 9]], "output": 30}]}
{"statement": "Task: Given a function F(n) over the integers in the range of 1 to max_n, and 0 to max_fn for every n, find the number of possible definitions of F(n) that satisfy the following equations: F(n) + F(n + 1) <= max_fn for 1 <= n < max_n, and F(max_n) + F(1) <= max_fn. The answer should be given modulo 12345787.\n\nInput: The input consists of two integers, max_n and max_fn, which represent the range of integers for the function F(n). The input is provided through standard input.\n\nOutput: The output should be a single integer, which represents the number of possible definitions of the function F(n) that satisfy the given equations.\n\nConstraints: 1 <= max_n <= 100, and 1 <= max_fn <= 5. The inputs will be always valid integers.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codewars", "url": "https://www.codewars.com/kata/59951f21d65a27e95d00004f", "sample_test_cases": []}
{"statement": "Task: Given an infinite number line, starting at 0, and the ability to move either left or right, find the minimum number of steps required to reach a given destination D, where in each move, the number of steps taken is equal to the move number.\n\nInput: The input is a single integer D, representing the destination. The input is provided through standard input.\n\nOutput: The output should be a single integer, representing the minimum number of steps required to reach the destination.\n\nConstraints: The input integer D is constrained such that 1 \u2264 D \u2264 10000.", "editorial": "", "tag": "['Dynamic programming', 'Complete search']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/minimum-number-of-steps-to-reach-a-given-number5234/1", "sample_test_cases": [{"input": "D = 2", "output": "3"}, {"input": "D = 10", "output": "4"}]}
{"statement": "Task: Given an array arr[] of size N representing the heights of N temples located in a row along a mountain range, find the minimum number of offerings a devotee must give to satisfy the religious beliefs. If two adjacent temples are at different altitudes, then the temple that is higher up should receive more offerings than the one that is at lower altitude. If two adjacent temples are at the same height, then their offerings relative to each other does not matter.\n\nInput: The input consists of an integer N representing the number of temples and an array arr[] of size N representing the heights of the temples. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum number of offerings required to satisfy the religious beliefs of the devotee.\n\nConstraints: 1 \u2264 N \u2264 10^4 and 1 \u2264 arr[i] \u2264 1000. The expected time complexity is O(N) and the expected auxiliary space is O(N).\n\nExplanation: We can represent the given row of temples as a sequence of N integers. We need to find the minimum number of offerings required to satisfy the religious beliefs of the devotee. The offerings must be given in such a way that if two adjacent temples are at different altitudes, then the temple that is higher up should receive more offerings than the one that is at lower altitude. If two adjacent temples are at the same height, then their offerings relative to each other does not matter. We need to find the minimum number of offerings required to satisfy these conditions.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/temple-offerings2831/1", "sample_test_cases": [{"input": "N = 3\narr = {1, 2, 2}", "output": "4"}, {"input": "N = 6\narr = {1, 4, 3, 6, 2, 1}", "output": "10"}]}
{"statement": "Task: Given a tetrahedron with vertices labeled A, B, C, and D, count the number of different cyclic paths of length n starting and ending at vertex D. The ant can move from one vertex to another along some edge of the tetrahedron. The output should be the number of ways modulo 1000000007.\n\nInput: The input consists of a single integer n (1 \u2264 n \u2264 107) representing the length of the cyclic path. The input is received from standard input.\n\nOutput: The output should be a single integer representing the number of different cyclic paths of length n starting and ending at vertex D of the tetrahedron, modulo 1000000007.\n\nConstraints: The input integer n is constrained such that 1 \u2264 n \u2264 107.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/166/E", "sample_test_cases": [{"input": "1000000\n", "output": "266233856\n"}, {"input": "100\n", "output": "721510432\n"}, {"input": "300000\n", "output": "93822635\n"}, {"input": "300\n", "output": "327873818\n"}, {"input": "9\n", "output": "4920\n"}, {"input": "1\n", "output": "0\n"}, {"input": "3\n", "output": "6\n"}, {"input": "3000\n", "output": "645417275\n"}, {"input": "6\n", "output": "183\n"}, {"input": "8\n", "output": "1641\n"}, {"input": "1500\n", "output": "451187545\n"}, {"input": "10000\n", "output": "723907367\n"}, {"input": "15\n", "output": "3587226\n"}, {"input": "900\n", "output": "295068084\n"}, {"input": "30\n", "output": "782663359\n"}]}
{"statement": "Task: Given three strings A, B, and C, determine whether C can be formed by interleaving A and B. An interleaving of two strings S and T is a configuration that creates a new string Y from the concatenation of substrings of A and B, where the length of Y is equal to the length of C.\n\nInput: The input consists of three strings A, B, and C, each of length at most 100, provided through standard input.\n\nOutput: The function isInterleave() takes three strings A, B, and C as input and returns true if C is an interleaving of A and B, else it returns false.\n\nConstraints: 1 \u2264 length of A, B \u2264 100, 1 \u2264 length of C \u2264 200.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/interleaved-strings/1", "sample_test_cases": [{"input": "A = YX, B = X, C = XXY", "output": "0"}, {"input": "A = XY, B = X, C = XXY", "output": "1"}]}
{"statement": "Task: Given a string of 'D's and 'K's, partition it into contiguous pieces with equal ratios of 'D's to 'K's. Find the maximum number of pieces that can be formed, with each piece having a length of at least 1. The input consists of multiple test cases, each containing the length of the string and the string itself. \n\nInput: The input consists of multiple test cases, with the number of test cases given in the first line. Each test case contains an integer n (1 \u2264 n \u2264 5 \u22c5 10^5) representing the length of the string, followed by a string s of length n consisting of 'D's and 'K's. The input is read from standard input.\n\nOutput: The output should consist of t lines, where t is the number of test cases. Each line should contain n space-separated integers representing the maximum number of pieces that can be formed for each prefix of the corresponding string. \n\nConstraints: There will be at most 1000 test cases, and the sum of n over all test cases does not exceed 5 \u22c5 10^5.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Data structures', 'String algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1536/C", "sample_test_cases": [{"input": "20\n5\nDKDKD\n4\nKDKD\n2\nKD\n2\nKD\n1\nD\n3\nKDK\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nKDKD\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nKD\n2\nKD\n2\nKD\n", "output": "1 1 1 2 1 \n1 1 1 2 \n1 1 \n1 1 \n1 \n1 1 1 \n1 1 1 \n1 1 1 2 \n1 1 1 \n1 1 \n1 \n1 1 1 2 \n1 \n1 1 \n1 1 1 \n1 1 1 \n1 \n1 1 \n1 1 \n1 1 \n"}, {"input": "10\n9\nDDDDDDKDD\n10\nKKDDDDKKDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDDKDKKDDKKD\n3\nKKK\n", "output": "1 2 3 4 5 6 1 1 1 \n1 2 1 1 1 1 1 2 1 3 \n1 2 1 1 1 2 1 \n1 2 3 1 1 1 1 1 1 2 1 1 1 \n1 1 1 1 1 2 1 2 3 1 1 4 1 1 \n1 2 1 1 1 2 1 3 1 \n1 1 1 2 1 1 1 1 2 2 1 1 1 1 \n1 1 1 1 1 2 1 2 1 1 \n1 2 1 1 1 1 1 1 1 2 1 \n1 2 3 \n"}, {"input": "20\n5\nDKDKD\n4\nKDKD\n2\nKD\n2\nKD\n1\nD\n3\nKDK\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nKDKD\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nKD\n2\nDK\n2\nKD\n", "output": "1 1 1 2 1\n1 1 1 2\n1 1\n1 1\n1\n1 1 1\n1 1 1\n1 1 1 2\n1 1 1\n1 1\n1\n1 1 1 2\n1\n1 1\n1 1 1\n1 1 1\n1\n1 1\n1 1\n1 1\n"}, {"input": "10\n9\nDDDDDDKDD\n10\nKKDKDDKDDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDDKDKKDDKKD\n3\nKKK\n", "output": "1 2 3 4 5 6 1 1 1\n1 2 1 1 1 1 1 2 1 3\n1 2 1 1 1 2 1\n1 2 3 1 1 1 1 1 1 2 1 1 1\n1 1 1 1 1 2 1 2 3 1 1 4 1 1\n1 2 1 1 1 2 1 3 1\n1 1 1 2 1 1 1 1 2 2 1 1 1 1\n1 1 1 1 1 2 1 2 1 1\n1 2 1 1 1 1 1 1 1 2 1\n1 2 3\n"}, {"input": "10\n9\nDDKDDDDDD\n10\nKKDKDDKDDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDDKDKKDDKKD\n3\nKKK\n", "output": "1 2 1 1 1 1 1 1 1\n1 2 1 1 1 1 1 2 1 3\n1 2 1 1 1 2 1\n1 2 3 1 1 1 1 1 1 2 1 1 1\n1 1 1 1 1 2 1 2 3 1 1 4 1 1\n1 2 1 1 1 2 1 3 1\n1 1 1 2 1 1 1 1 2 2 1 1 1 1\n1 1 1 1 1 2 1 2 1 1\n1 2 1 1 1 1 1 1 1 2 1\n1 2 3\n"}, {"input": "20\n5\nDKDKD\n4\nKDKD\n2\nKD\n2\nKD\n1\nD\n3\nKKD\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nKDKD\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nKD\n2\nKD\n2\nKD\n", "output": "1 1 1 2 1\n1 1 1 2\n1 1\n1 1\n1\n1 2 1\n1 1 1\n1 1 1 2\n1 1 1\n1 1\n1\n1 1 1 2\n1\n1 1\n1 1 1\n1 1 1\n1\n1 1\n1 1\n1 1\n"}, {"input": "5\n3\nDDK\n6\nDDDDDD\n4\nKDKD\n1\nD\n9\nDKDKDDDDK\n", "output": "1 2 1\n1 2 3 4 5 6\n1 1 1 2\n1\n1 1 1 2 1 2 1 1 3\n"}, {"input": "20\n5\nDKDKD\n4\nDDKK\n2\nKD\n2\nKD\n1\nD\n3\nKKD\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nDKDK\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nKD\n2\nKD\n2\nKD\n", "output": "1 1 1 2 1\n1 2 1 1\n1 1\n1 1\n1\n1 2 1\n1 1 1\n1 1 1 2\n1 1 1\n1 1\n1\n1 1 1 2\n1\n1 1\n1 1 1\n1 1 1\n1\n1 1\n1 1\n1 1\n"}, {"input": "10\n9\nDDDDDDDDK\n10\nKKDDDDKKDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDDKDKKDDKKD\n3\nKKK\n", "output": "1 2 3 4 5 6 7 8 1\n1 2 1 1 1 1 1 2 1 3\n1 2 1 1 1 2 1\n1 2 3 1 1 1 1 1 1 2 1 1 1\n1 1 1 1 1 2 1 2 3 1 1 4 1 1\n1 2 1 1 1 2 1 3 1\n1 1 1 2 1 1 1 1 2 2 1 1 1 1\n1 1 1 1 1 2 1 2 1 1\n1 2 1 1 1 1 1 1 1 2 1\n1 2 3\n"}, {"input": "5\n3\nDDK\n6\nDDDDDD\n4\nDKDK\n1\nD\n9\nKDDDDKDKD\n", "output": "1 2 1\n1 2 3 4 5 6\n1 1 1 2\n1\n1 1 1 1 1 2 1 1 3\n"}, {"input": "5\n3\nKDD\n6\nDDDDDD\n4\nKDKD\n1\nD\n9\nDKDKDDDDK\n", "output": "1 1 1\n1 2 3 4 5 6\n1 1 1 2\n1\n1 1 1 2 1 2 1 1 3\n"}, {"input": "20\n5\nKKDDD\n4\nKDKD\n2\nKD\n2\nKD\n1\nD\n3\nKKD\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nKDKD\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nDK\n2\nKD\n2\nKD\n", "output": "1 2 1 1 1\n1 1 1 2\n1 1\n1 1\n1\n1 2 1\n1 1 1\n1 1 1 2\n1 1 1\n1 1\n1\n1 1 1 2\n1\n1 1\n1 1 1\n1 1 1\n1\n1 1\n1 1\n1 1\n"}, {"input": "10\n9\nDDKDDDDDD\n10\nKKDKDKDDDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDDKDKKDDKKD\n3\nKKK\n", "output": "1 2 1 1 1 1 1 1 1\n1 2 1 1 1 2 1 1 1 2\n1 2 1 1 1 2 1\n1 2 3 1 1 1 1 1 1 2 1 1 1\n1 1 1 1 1 2 1 2 3 1 1 4 1 1\n1 2 1 1 1 2 1 3 1\n1 1 1 2 1 1 1 1 2 2 1 1 1 1\n1 1 1 1 1 2 1 2 1 1\n1 2 1 1 1 1 1 1 1 2 1\n1 2 3\n"}, {"input": "20\n5\nDKDKD\n4\nKDKD\n2\nKD\n2\nKD\n1\nD\n3\nKKD\n3\nDKD\n4\nKDKD\n3\nDKD\n2\nDK\n1\nK\n4\nKKDD\n1\nD\n2\nKD\n3\nKDK\n3\nDKD\n1\nK\n2\nKD\n2\nKD\n2\nKD\n", "output": "1 1 1 2 1\n1 1 1 2\n1 1\n1 1\n1\n1 2 1\n1 1 1\n1 1 1 2\n1 1 1\n1 1\n1\n1 2 1 1\n1\n1 1\n1 1 1\n1 1 1\n1\n1 1\n1 1\n1 1\n"}, {"input": "10\n9\nDDKDDDDDD\n10\nKKDKDKDDDK\n7\nKKDDKDK\n13\nKKKDDKDDDKKKD\n14\nKDDDDKDDKDKDKK\n9\nKKDDKDDKD\n14\nDKDKKKKKDDDKKK\n10\nKDKKDKKKKD\n11\nDKKDDKKDKDD\n3\nKKK\n", "output": "1 2 1 1 1 1 1 1 1\n1 2 1 1 1 2 1 1 1 2\n1 2 1 1 1 2 1\n1 2 3 1 1 1 1 1 1 2 1 1 1\n1 1 1 1 1 2 1 2 3 1 1 4 1 1\n1 2 1 1 1 2 1 3 1\n1 1 1 2 1 1 1 1 2 2 1 1 1 1\n1 1 1 1 1 2 1 2 1 1\n1 1 1 2 1 3 1 4 1 5 1\n1 2 3\n"}]}
{"statement": "Task: Given two walls A and B with M and N hooks respectively, and K ropes, find the number of different ways to use all the K ropes to connect hooks on wall A with hooks on wall B. Each hook can connect to only one rope, and two ways that use the exact same set of hooks from wall A and wall B are considered to be the same. The output should be returned modulo 10^9+7.\n\nInput: The input consists of three integers M, N, and K, representing the number of hooks on wall A, the number of hooks on wall B, and the number of ropes available, respectively. The input is provided through standard input.\n\nOutput: The output is a single integer representing the number of different ways to use all the K ropes. The output should be returned through the function knots(). \n\nConstraints: 1 \u2264 N, M, K \u2264 1000 and 1 \u2264 K \u2264 min(N, M). The expected time complexity is O(max(N^2, M^2)) and the expected auxiliary space is O(max(N^2, M^2)).", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics']", "difficulties": "MEDIUM", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/little-murph-and-knots0402/1", "sample_test_cases": [{"input": "M = 3, N = 2, K = 2", "output": "3"}, {"input": "M = 2, N = 2, K = 2", "output": "1"}]}
