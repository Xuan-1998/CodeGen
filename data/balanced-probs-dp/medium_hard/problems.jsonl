{"statement": "Task: Given a greenhouse represented as an infinite line, with n plants of m different species numbered from 1 to m, arrange the plants in m sections numbered from 1 to m from left to right with each section housing a single species. Each species thrives at a different temperature, and the goal is to minimize the number of plants that need to be replanted to achieve the desired arrangement. Emuskald is free to place m-1 borders to divide the greenhouse into m sections, but in the end, all of the i-th species plants must reside in i-th section from the left.\n\nInput: The input consists of two integers n and m, representing the number of plants and the number of different species, respectively. This is followed by n lines, each containing an integer s_i and a real number x_i, representing the species and position of the i-th plant. The input is provided through standard input.\n\nOutput: Output a single integer representing the minimum number of plants that need to be replanted to achieve the desired arrangement.\n\nConstraints: 1 \u2264 n, m \u2264 5000, n \u2265 m, 1 \u2264 s_i \u2264 m, 0 \u2264 x_i \u2264 10^9, and each x_i will contain no more than 6 digits after the decimal point. It is also guaranteed that all x_i are different, there is at least one plant of each species, and the plants are given in order \"from left to the right\", that is in the ascending order of their x_i coordinates (x_i < x_i+1, 1 \u2264 i < n).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/269/B", "sample_test_cases": [{"input": "3 2\n2 1\n1 2.0\n1 3.100\n", "output": "1\n"}, {"input": "3 3\n1 5.0\n2 5.5\n3 6.0\n", "output": "0\n"}, {"input": "6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n", "output": "2\n"}, {"input": "1 1\n1 0\n", "output": "0\n"}, {"input": "8 2\n1 0.000000\n1 1.000000\n1 2.000000\n2 2.000001\n1 999999997.000000\n2 999999998.000000\n2 999999999.999999\n2 1000000000.000000\n", "output": "1\n"}, {"input": "15 5\n4 6.039627\n2 7.255149\n2 14.469785\n2 15.108572\n4 22.570081\n5 26.642253\n5 32.129202\n5 44.288220\n5 53.231909\n5 60.548042\n4 62.386581\n2 77.828816\n1 87.998512\n3 96.163559\n2 99.412872\n", "output": "6\n"}, {"input": "10 7\n4 70882.412953\n1 100461.912159\n3 100813.254090\n7 121632.112636\n2 424085.529781\n6 510966.713362\n6 543441.105338\n7 680094.776949\n1 721404.212606\n5 838754.272757\n", "output": "5\n"}, {"input": "5 5\n5 0\n4 1\n3 2\n2 3\n1 4\n", "output": "4\n"}, {"input": "12 5\n2 0\n2 1\n3 2\n3 3\n3 4\n1 5\n5 6\n3 7\n3 8\n3 9\n4 999999999\n4 1000000000\n", "output": "2\n"}, {"input": "3 3\n2 0\n1 1\n3 2\n", "output": "1\n"}, {"input": "3 3\n3 0\n1 1\n2 2\n", "output": "1\n"}, {"input": "4 2\n1 10\n2 20\n1 30\n2 40\n", "output": "1\n"}, {"input": "20 10\n1 0.000000\n2 0.000001\n3 0.000002\n4 0.000003\n5 0.000004\n6 0.000005\n7 0.000006\n8 0.000007\n9 0.000008\n10 0.000009\n1 999999999.999990\n2 999999999.999991\n3 999999999.999992\n4 999999999.999993\n5 999999999.999994\n6 999999999.999995\n7 999999999.999996\n8 999999999.999997\n9 999999999.999998\n10 999999999.999999\n", "output": "9\n"}, {"input": "12 4\n3 0\n3 1\n3 2\n3 3\n3 4\n1 5\n1 6\n2 7\n4 8\n4 9\n2 10\n3 11\n", "output": "5\n"}, {"input": "16 2\n1 0\n1 1\n2 2\n2 3\n2 4\n2 5\n1 6\n1 7\n2 8\n2 9\n1 10\n1 11\n2 12\n2 13\n2 14\n2 15\n", "output": "4\n"}]}
{"statement": "Task: Given n tickets, each with two possible numbers and a probability of being numbered with each number, find the probability of a correct numbering, where all tickets have distinct numbers.\n\nInput: The input consists of T test cases. Each test case starts with an integer n, followed by n lines, each containing three integers: the probability of the first number, the first number, and the second number. The input is provided through standard input.\n\nOutput: The output consists of T lines, where each line contains a single real number representing the probability of correct numbering for the corresponding test case. Rounding errors less than 10^-6 will be ignored.\n\nConstraints: 1 \u2264 T \u2264 10, 1 \u2264 n \u2264 50, 1 \u2264 A_i, B_i \u2264 16, and 0 \u2264 P_i \u2264 100.\n\nMathematical concepts: probability, distinct elements.\n\nComputer science concepts: standard input/output, loops.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Probability']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/LEEXAMS", "sample_test_cases": [{"input": "2\n2\n50 1 2\n50 2 1\n3\n100 1 3\n47 2 1\n74 3 2", "output": "0.500000000\n0.347800000\n"}, {"input": "2\n2\n54 1 2\n50 2 1\n3\n100 1 3\n47 2 1\n74 3 2", "output": "0.5\n0.3478\n"}, {"input": "2\n2\n54 1 2\n50 2 1\n3\n100 1 3\n47 2 1\n5 3 2", "output": "0.5\n0.0235\n"}, {"input": "2\n2\n54 1 2\n50 2 1\n3\n100 1 3\n47 2 0\n5 4 2", "output": "0.5\n0.5535\n"}, {"input": "2\n2\n54 1 2\n52 2 1\n3\n100 1 3\n47 2 0\n5 4 2", "output": "0.5016\n0.5535\n"}, {"input": "2\n2\n84 1 2\n52 2 1\n3\n100 1 3\n47 2 0\n5 4 2", "output": "0.5136\n0.5535\n"}, {"input": "2\n2\n84 1 3\n52 2 1\n3\n100 1 6\n47 2 0\n5 4 2", "output": "0.5968\n0.5535\n"}, {"input": "2\n2\n84 1 3\n52 4 1\n3\n100 1 6\n47 2 0\n5 0 2", "output": "0.5968\n0.527\n"}, {"input": "2\n2\n84 1 3\n52 4 2\n3\n101 1 6\n47 2 0\n5 0 2", "output": "1.0\n0.527\n"}, {"input": "2\n2\n84 2 3\n52 4 2\n3\n111 0 6\n47 2 0\n5 0 2", "output": "0.5968\n-0.05797\n"}, {"input": "2\n2\n84 2 3\n52 4 2\n3\n111 0 2\n47 2 0\n5 0 2", "output": "0.5968\n0\n"}, {"input": "2\n2\n50 1 2\n50 2 1\n3\n100 1 3\n47 4 1\n74 3 2", "output": "0.5\n0.47\n"}, {"input": "2\n2\n54 1 2\n50 2 1\n3\n000 1 3\n47 2 1\n74 3 2", "output": "0.5\n0.1378\n"}, {"input": "2\n2\n54 1 2\n50 2 1\n3\n100 1 3\n37 2 1\n5 3 2", "output": "0.5\n0.0185\n"}, {"input": "2\n2\n54 2 2\n50 2 1\n3\n100 1 3\n19 2 1\n5 3 2", "output": "0.5\n0.0095\n"}]}
{"statement": "Task: Given a list of turtle commands consisting of \"T\" (turn around) and \"F\" (move 1 unit forward), modify exactly n commands from the list (one command can be changed several times) to maximize the distance the turtle can travel from the starting point. Output the maximum distance from the starting point to the ending point of the turtle's path.\n\nInput: The input consists of a string of commands containing only \"T\" and \"F\" and an integer n representing the number of commands that can be modified. The length of the string of commands is between 1 and 100 characters.\n\nOutput: The output should be a single integer representing the maximum distance from the starting point to the ending point of the turtle's path.\n\nConstraints: The integer n is between 1 and 50.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/133/E", "sample_test_cases": [{"input": "FTFTFTFFFFTFTFTTTTTTFFTTTTFFTFFFTFTFTFFTFTFTFFFTTTFTTFTTTTTFFFFTTT\n12\n", "output": "41\n"}, {"input": "FTTFTFFTFTTTFTTFTFFTTFFFFFTFFFFTTFTFFFFFFTFFTTTFTTFTTTFFFTFTFTFFFFTFFTFTTTTTTTTFTTTTTTFFTTFTTT\n35\n", "output": "80\n"}, {"input": "FTTFTTTFTTFFFTFFTTFTFTTTFFFTFTFTFFTTTFFFFFFTFTTFFTFFFFTFTTFFFTFFTTTTTFFTFTTFFFTFFTFFTF\n16\n", "output": "61\n"}, {"input": "FFTFTTFTFTFTFFTTFTFFTFTFTTTT\n1\n", "output": "6\n"}, {"input": "FFTTFTTFFFTFFFFTFTTFFTTFTFFFTFFTFTFTTT\n46\n", "output": "37\n"}, {"input": "TTFFFFTTF\n22\n", "output": "9\n"}, {"input": "FFFFTTTTTTFTFFTFFFTFTFTFTFFTFFTFFTFTTFTTTFFFTF\n48\n", "output": "45\n"}, {"input": "TFFFFFFFFFTTFTTFTFTFFFTFTFTTFTFTFFTFTTFTTFTTFFFTTFTFFFFFTFTFFTFTFFTTTTFTTFT\n13\n", "output": "54\n"}, {"input": "FFFTTTFTFTTTFFTTFTTTTTFFFFFTTFTFTFFFFTFFFFFTTTTFFFTF\n21\n", "output": "47\n"}, {"input": "TFTFFTFTTFFTTTTTTFTFTTFFTTTTTFTFTFTTFFTTFTTTFT\n11\n", "output": "28\n"}, {"input": "TFFFTTTFFFFTFFTTFTTFTTFFTFFFTTTTTTFTTTTTTFFFFFFFTFFFFTTTFTFFTTTTTTFFFFFTTFTFTFFFTFTTFFTTFFFTTFFFTTTT\n1\n", "output": "17\n"}, {"input": "TTFFF\n49\n", "output": "4\n"}, {"input": "TFTTFFTTFFTFTTFFTFFTTFTFTTTTTFFFFTFFTTFTTTFFTFTTFFFFTFTTTTFFFFTTTFTFTFTTFTFTFTFTTFTF\n26\n", "output": "66\n"}, {"input": "TFTTFFFFFFFTTTFTFFFTTTFTFFFTFTFTFFFTFTFTTTFTTFFTFTTFTFFTFTF\n8\n", "output": "34\n"}, {"input": "TTTFTFTTTFTTFFTFFFFTTTFFFFTTFTFTFFFTTTTFFTTTFFTFTFTFFTTTFFTTFFTFT\n27\n", "output": "58\n"}]}
{"statement": "Task: Given an array of positive integers, determine if it is possible to make all elements of the array equal to zero by decrementing a certain number of elements at a time from either the beginning or end of the array.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains a single integer $n$ representing the number of elements in the array. The second line contains $n$ integers $a_1 \\ldots a_n$ representing the elements of the array. Input is read from standard input.\n\nOutput: For each test case, output \"YES\" if it is possible to make all elements of the array equal to zero by applying a certain number of operations, and \"NO\" otherwise. Output is written to standard output.\n\nConstraints: $1 \\le n \\le 30000$, $1 \\le a_i \\le 10^6$, $1 \\le t \\le 30000$, and the sum of $n$ over all test cases does not exceed $30000$.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Constructive algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1442/A", "sample_test_cases": [{"input": "4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n", "output": "YES\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 1\n5\n11 7 9 6 9\n5\n1 3 1 3 1\n4\n5 2 1 10\n", "output": "YES\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 1\n5\n11 7 15 6 9\n5\n1 3 1 3 1\n4\n5 2 1 10\n", "output": "YES\nNO\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n20 9 15 6 9\n5\n1 1 0 1 1\n4\n5 2 1 10\n", "output": "YES\nYES\nYES\nYES\n"}, {"input": "4\n3\n1 2 0\n5\n20 9 15 6 9\n5\n1 1 0 1 1\n4\n5 2 1 10\n", "output": "NO\nYES\nYES\nYES\n"}, {"input": "4\n3\n1 4 0\n5\n40 9 13 6 9\n5\n1 2 0 1 2\n4\n7 2 1 10\n", "output": "NO\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n20 9 17 6 9\n5\n1 1 0 1 1\n4\n5 2 1 10\n", "output": "YES\nNO\nYES\nYES\n"}, {"input": "4\n3\n1 4 0\n5\n40 9 13 0 9\n5\n1 2 0 1 2\n4\n7 2 1 16\n", "output": "NO\nNO\nNO\nYES\n"}, {"input": "4\n3\n1 2 1\n5\n4 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n", "output": "YES\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n11 7 15 6 9\n5\n1 3 1 3 1\n4\n5 2 1 10\n", "output": "YES\nNO\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n11 7 15 6 9\n5\n1 1 1 3 1\n4\n5 2 1 10\n", "output": "YES\nNO\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n11 7 15 6 9\n5\n1 1 0 3 1\n4\n5 2 1 10\n", "output": "YES\nNO\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n11 9 15 6 9\n5\n1 1 0 3 1\n4\n5 2 1 10\n", "output": "YES\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 2\n5\n20 9 15 6 9\n5\n1 1 0 3 1\n4\n5 2 1 10\n", "output": "YES\nYES\nNO\nYES\n"}, {"input": "4\n3\n1 2 0\n5\n40 9 15 6 9\n5\n1 1 0 1 1\n4\n5 2 1 10\n", "output": "NO\nYES\nYES\nYES\n"}]}
{"statement": "Task: Given a sequence of books, each represented by a pair of integers indicating its thickness and height, and a maximum shelf width, place the books onto shelves of a bookcase in order to minimize the total height of the bookcase. Each shelf has a maximum width, and books can only be placed on a shelf if their combined thickness is less than or equal to the shelf width. The height of each shelf is determined by the tallest book placed on it. The order of the books must be maintained throughout the process.\n\nInput: The input consists of a list of books, where each book is represented by a pair of integers indicating its thickness and height. The input also includes the maximum width of each shelf. Input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum possible height of the bookcase after placing the books on shelves in the described manner.\n\nConstraints: There can be at most 1000 books, each book's thickness and height are at most 1000, and the shelf width is at least as large as the thickness of any book and at most 1000.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/filling-bookcase-shelves/", "sample_test_cases": []}
{"statement": "Task: Given an integer $n$, count the number of blocks of each length in a list of integers from $0$ to $10^n - 1$, where each integer is padded with leading zeroes to have length $n$. A block is a consecutive segment of equal digits that cannot be extended to the left or to the right. Output the count of blocks of each length, modulo $998244353$.\n\nInput: A single integer $n$.\n\nOutput: A single line with $n$ integers, separated by spaces, representing the number of blocks of each length, modulo $998244353$.\n\nConstraints: $1 \\le n \\le 2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1327/E", "sample_test_cases": [{"input": "1\n", "output": "10\n"}, {"input": "2\n", "output": "180 10\n"}, {"input": "3\n", "output": "2610 180 10\n"}, {"input": "4\n", "output": "34200 2610 180 10\n"}, {"input": "5\n", "output": "423000 34200 2610 180 10\n"}, {"input": "6\n", "output": "5040000 423000 34200 2610 180 10\n"}, {"input": "7\n", "output": "58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "8\n", "output": "666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "9\n", "output": "482289529 666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "10\n", "output": "943963054 482289529 666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "1448\n", "output": "797996119 506070058 123181381 478767978 663521063 187811194 140733907 205952653 29800748 812478549 721214540 465538759 285544477 282049709 542694230 634787856 820301676 277501779 366735532 699466031 176155625 297762440 307352020 857088262 767290744 84992605 488482903 745705484 54414276 881880831 694919087 599339855 901531819 922996230 405180129 570928240 40256742 2342066 738766667 566992541 96028398 782183906 415020029 494444795 24861654 549062277 488896693 980726190 1589844 689281754 18051130 176401392 334573073 504378116 107512336 335896879 585191316 143626625 741609346 995393303 810574066 261967759 663199310 159967515 724132557 891910101 460631557 452557621 375396071 240255178 912769662 639343783 458144140 195042269 234075883 573934261 821199584 927148726 57428427 621125697 912263894 66434643 782794885 465350380 534452086 301885784 74997523 91840195 926020425 334022336 906051963 98010621 319997354 33072034 582396158 695130236 592394488 31668047 160128761 620673240 491883771 491467763 961847302 97612791 948253777 857498344 651156864 1867067 73721393 204392035 848719119 517085427 524174966 289330566 871184733 191308528 438830043 644869761 34743660 369850445 273271523 500165759 406756186 705243522 955541512 124161206 654153212 349202788 901824282 336591925 996649834 844822877 139033190 109200401 918869666 951330081 1393336 360115777 391447415 164530317 777674854 443380530 260583341 746453910 116737618 515005161 760674929 915633086 704589375 750673043 692123109 839671382 889731423 908250392 282559643 486656940 403961541 475223480 61057750 606405927 819441655 746788440 490548795 889237357 522327507 984010602 580894143 246092932 552514265 547269439 553138704 135102377 899944119 667777533 154503396 233854218 165015132 290208016 96321226 335800358 285810617 113698781 509021383 669666570 238649979 340506636 95662158 934112170 46111603 698652246 249076212 62793607 249646604 638265553 604313934 523760316 478041778 609457816 975601289 308815002 381427624 811898196 837371523 279144645 955857575 837238898 706923598 592204733 570564113 517470960 307419865 255958134 497327387 76941009 200081355 568316368 261399113 405964626 887156860 592634354 708601914 714775764 914499729 455260607 211678890 227449599 742144178 775048282 606780617 253359850 933041638 483548035 546571593 853162103 774095760 655392151 921932955 846656386 110199730 632484881 824166026 527858767 716241592 726933899 178154138 657255431 189564206 899812874 597329561 290151767 621056339 909922789 205721325 161816803 80218365 523530125 153816059 674386740 163286518 624860048 981829288 150187483 778884912 463730857 324535967 948707359 975109151 814428699 223011753 665352006 739769339 560562976 334311103 779992525 661760014 773410907 727046306 926288191 796898674 20345087 774730626 544057972 719975787 577782093 697320829 343317659 391110960 104736346 815631642 182043852 367655534 311289313 637563032 533679898 339938994 122545661 600091467 687792118 321223936 716208139 659116452 953204022 223979414 175018052 611745541 559826443 874495985 478756682 735865206 681437425 148893720 272525458 252665025 906297894 827591758 935085968 837582549 118235876 943638598 906281295 830661146 905752681 592106553 678363065 139733991 670021997 801430776 243427927 160460600 618622009 521417537 826815665 449639820 131572025 421115748 132819647 381720739 464331249 118996373 148927728 238226896 405524069 797458479 285208221 79014390 581950077 614722048 7318030 155035482 330407222 204285299 177307197 63365917 699688715 29497205 547936948 758151247 505518847 283188684 440897846 963802713 807263063 161797029 134093654 354621397 448916197 775025629 40709085 928758809 35608018 327254652 324638382 101584904 356473677 948733917 475672909 375138105 599340399 365677787 97089484 205427546 918569645 1975670 640068267 227818332 628127152 762223633 785039841 359017046 632952292 142965175 661139898 679832722 987845289 330524940 185998301 433192152 454128858 725370236 599725161 831427264 928936353 856279158 970544394 445089619 458645334 716172113 717629694 745293273 920512953 386280972 277682379 690550052 764227129 385518570 997828691 694832729 997460846 721613349 353961819 792294608 184866634 787716089 335378535 188970312 184176930 74875457 312606628 550912304 266775491 327354394 931275711 761963323 811903624 464216841 763530492 317765470 694794175 35956745 748926672 997933467 631324942 705249822 474139795 826476282 509939382 233477323 780296892 263531484 84833102 493488595 437252468 32603390 561164991 12082529 865277443 901653041 81835842 177052178 972941769 851659105 889320781 618557524 284519837 330226811 951637638 855848976 221548080 954135931 388260576 936583343 902169997 680172786 216854849 56534129 737856655 77128885 357432734 919222958 759251989 402201700 202619586 635448512 943623876 821246676 673900160 46708017 401900343 768701592 658825935 762954557 295739305 740306919 394665079 700423889 964680940 315703715 852089416 316997499 174667928 660657553 689401669 540553943 630286279 829405207 788472121 938013411 349419501 529678612 471791938 927586858 440342984 338336260 342772241 863766568 937973743 538325050 407741022 774936001 490312870 260014754 346573128 46749591 365252154 941055522 563891437 43473071 891493174 647038750 699474543 432897827 588689440 702373078 733534333 199577797 841158142 855024454 701645260 311462791 853871588 437185665 38968643 851929572 679100848 167230648 984969700 355040730 61158449 507803459 829667485 190802793 279424972 63959410 249576277 947695579 676183086 155706992 842939937 7311821 881470439 146273639 50387354 38562065 186892523 885500584 484686941 966537413 957108765 391387693 917214151 588809138 577764532 768506088 387502217 229534479 331522736 93956533 933860884 195815055 309332821 9996196 168607451 952006333 657890038 531338129 958178869 515743029 223338583 768228664 660516967 204280655 423566259 831353710 191982410 728853992 44026539 41446542 836391856 905564727 891484961 358907772 631865986 961309376 405556973 790234235 563271462 254488603 384668086 184195610 651903940 827309879 358591807 692339205 324548350 906493978 477526618 146335045 84386404 65326148 491378655 257341566 994886662 615666545 652236393 573500572 118160194 656773419 509505936 923876266 898416128 190409350 787763417 854419637 252848285 331516323 313335870 967754372 290241951 886896103 643651647 828614859 548601753 929977015 190491829 977130731 722590735 404272815 23716438 350086083 329323584 571468476 989455490 112316865 312042124 510495215 178838170 579697076 613273210 36998123 500389069 409163582 6951721 536350659 77253284 439332222 566251201 448259998 54042157 864815975 861211377 113681898 902561740 838216802 158617743 163095590 340488690 365940088 169607566 589278950 335773472 760032952 587876371 549202460 173838833 29275742 812694686 900947001 391676211 837973924 433203998 956716091 446554710 548918627 5493743 384924860 386385784 672374520 410119465 474597889 540028342 432680326 819836603 379254275 576757109 261295532 775209913 392007672 479929620 331644492 660476214 168708572 606118677 558764165 195533638 882026786 234344682 856609038 907679182 831811019 496688492 520264660 737962433 142389840 630027399 324230452 88493147 54386099 399307586 508562728 516982098 657327630 785136978 50629684 661115840 411225290 874229382 669855800 65334205 6368283 649479144 638936766 201152110 253454812 947099359 626112839 544996646 332334402 80981801 951222708 159487393 182104348 643755051 885595675 839505301 508430627 462641483 476759288 883451 554425935 779700069 499781278 621228762 578440342 848176602 503253997 631220984 11404778 75828294 673892884 513353148 175791249 589041556 46173294 921729048 962514672 542653611 937430832 251936735 480240554 442914267 463113302 677157686 70905743 426672200 394081132 274198375 490126379 245019945 473347797 940727060 672551667 524400804 886767683 651266818 31543695 59690732 361008233 311183384 68609038 90469522 676249087 74450461 397442899 847392227 195451347 819229386 750855532 960539182 823475667 294843951 40751590 674025595 433870909 629068320 650544462 722764821 277801729 18385367 130670822 614914479 261430397 675030877 821180475 247327778 590288145 375127883 518332654 609019872 495953502 532328017 640558019 412279186 904593070 795707321 649217710 690885750 830456020 658304523 323005215 966420359 140141802 247960358 187944863 693950642 47068688 940823923 946359806 688968342 347943828 2804421 356449413 440612249 693487011 64414175 874420552 124327751 455348860 758650211 945772036 650742751 839426764 231255030 916311769 680071980 855569656 363962082 782972654 492357990 270325855 348614897 616054115 608864407 864295605 356436904 312205513 538034023 114467193 726266589 353739960 193257092 434411760 723826167 539718857 689669678 621676480 376982131 268828532 519170731 141075635 292549395 7186905 148248540 878085539 373783493 495220915 903884274 125912428 395476497 37906401 93468507 387665048 66615881 768112234 322657828 635832168 682956693 489600984 300721944 734054539 24014366 227058529 664083061 659615534 893930428 751171655 899960735 521865954 444759107 463066016 876778651 490163263 558439712 16944318 836329723 27342292 106912040 659985371 530225695 169322390 178298874 732737598 524097385 756333374 994533401 371027330 233961672 342555367 505398972 686618409 771146078 476783668 147539934 983054729 374819530 993500607 494425232 478265338 330287460 520467241 899386056 743671820 658827567 723275407 727030974 727137609 118192325 545436596 956413096 105968705 331067803 714012703 448947612 791402886 792667487 969179838 774873461 205177555 402637187 627510056 510790937 814619021 48009016 171157153 552838404 518136294 177958423 809040917 269835478 734665290 403778235 372882300 20626460 396469 598819641 449180600 53900593 804883795 969015679 734788692 766161524 185814192 309009642 898469043 116709051 922759481 452910781 450704972 55664556 845151118 487911771 747972116 813539022 75368535 745639138 897057407 830796363 147206255 729886778 294241946 910039665 997625883 40688127 307617116 250782969 166869745 759584497 511549 880943939 904902050 801064913 450637268 92099248 373281444 632752134 3028290 772908732 653673640 562233156 505207636 215208518 956374432 448666333 319748167 868040896 160428254 742141176 925454548 896405432 529394508 336493492 621021591 360418028 335399365 822141401 809933116 922413361 495821534 858588325 945390045 430053214 126468960 400326114 677747145 510879022 943906033 722724367 943683739 970122543 613832743 222872202 547540733 247033634 53913763 587294141 426375440 49454816 404924950 799226376 255620461 562218892 678886855 769031568 296754098 411028471 338781685 133523157 672175644 222941889 916321652 510455548 731804279 700273138 362332786 125358487 840008739 356414590 691776773 234615644 848583287 846176661 550064797 670550474 18802568 376387863 434457514 192934503 213926309 949258278 517133029 752775296 674453236 47503346 721492071 563086009 574577127 838002943 551170115 411309743 426135771 989516418 63870160 62773529 610862616 650614295 842750167 511429414 882471420 550712844 899913337 853281699 850445810 990099158 688637550 986316662 889148004 108071773 491880164 905873241 655413136 691023176 850386438 881902990 627069136 16770362 316521574 3241950 576464899 15436125 825865389 813877546 883235233 787419770 757580657 243466369 130959459 153528994 458641276 669174690 49388977 502308225 189809747 482148826 683495836 151842566 742269489 765846971 874465077 436760521 767396057 917759758 665017724 383369479 549181008 335598708 221347028 200632515 796578741 307046076 622442709 440856274 12069723 377338236 584451570 232906254 340210041 844343541 734465889 507800153 24338267 209420966 31658367 423500092 673347603 569662035 616303551 666598484 197033766 911195799 799180321 579969178 477352443 149565458 134946446 484686037 115552630 307754528 958815297 148755740 509302728 699319600 893436601 770640736 913841933 95202431 219533381 911427239 349791654 90791389 593642086 846538881 382985113 637130915 333227646 210010873 657581397 738345226 230935223 258417350 957776479 89146687 637145515 915150675 725693074 285723761 229571805 412407534 329746877 41860413 893512088 188266257 188437227 924242257 971577118 674212734 584319178 689103433 191872156 241114711 166093543 699631278 248072199 701459400 966353971 785202812 416902998 914053828 637834138 677443127 787951557 939428919 269848260 274171564 651082442 207334321 773656861 322359569 825383497 91975999 898578839 408392209 102639984 944811323 267795413 752864460 357526252 463274347 129009381 610133301 490086977 461266473 975789899 878888 619311821 682870413 499731375 302748885 804235728 407380745 832099500 811204922 353568860 801302544 755671432 821927421 196758544 1185104 876724466 454841461 900761417 744603150 30106137 697346243 229010179 747582064 975769124 467186423 962134624 497210810 169680364 128788400 902515907 378864168 56765231 167283501 901361635 348301032 210383243 278172283 163337503 938288139 96182261 239449772 615927413 160720759 634913933 953918392 993012465 827939695 205570032 382220133 313966971 268602507 320106807 450650634 675893227 110707252 803995557 199621813 521024140 311839924 256806614 527400213 282595960 260876504 648295953 606207715 124741027 767569393 541581766 509920844 715479850 617154051 216100447 905521136 767907391 863262201 234850471 806985624 628223466 796380997 572256593 395978371 482753293 961063462 197367603 369265966 181686396 851204989 887160068 99042859 969251550 222807212 733639974 583727438 488741942 750752387 484666138 678389872 789672586 989675875 808949948 700927625 291815122 500563707 37299929 591418517 247682470 932059783 882706179 676325258 356034191 523635988 370692831 627919044 790700597 830667089 48419533 929744484 195447145 309300403 509115568 408185859 36616242 232837591 784902177 823475776 845634737 280681512 536819688 943082379 542616246 129039756 439644417 805374420 46871561 1320568 169496938 393254149 935446004 911875037 53231225 291018357 506881318 587605813 970942493 198294884 239580866 924388255 402095600 420560761 679037808 301303494 812136029 538747025 29750940 250123806 449024993 905864130 985260502 487466765 427043828 929041798 740554759 198715195 62284822 359855336 410751299 597638770 943963054 482289529 666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "100\n", "output": "628223466 796380997 572256593 395978371 482753293 961063462 197367603 369265966 181686396 851204989 887160068 99042859 969251550 222807212 733639974 583727438 488741942 750752387 484666138 678389872 789672586 989675875 808949948 700927625 291815122 500563707 37299929 591418517 247682470 932059783 882706179 676325258 356034191 523635988 370692831 627919044 790700597 830667089 48419533 929744484 195447145 309300403 509115568 408185859 36616242 232837591 784902177 823475776 845634737 280681512 536819688 943082379 542616246 129039756 439644417 805374420 46871561 1320568 169496938 393254149 935446004 911875037 53231225 291018357 506881318 587605813 970942493 198294884 239580866 924388255 402095600 420560761 679037808 301303494 812136029 538747025 29750940 250123806 449024993 905864130 985260502 487466765 427043828 929041798 740554759 198715195 62284822 359855336 410751299 597638770 943963054 482289529 666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "4\n", "output": "34200 2610 180 10\n"}, {"input": "8\n", "output": "666000000 58500000 5040000 423000 34200 2610 180 10\n"}, {"input": "10\n", "output": "943963054 482289529 666000000 58500000 5040000 423000 34200 2610 180 10\n"}]}
{"statement": "Task: Given a string of length n, determine the minimum number of cuts required to partition the string into palindromic substrings.\n\nInput: The input consists of a single string of length n, provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of cuts needed for palindrome partitioning of the given string.\n\nConstraints: The input string has a length between 1 and 500, inclusive.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/palindromic-patitioning4845/1", "sample_test_cases": [{"input": "str = \"ababbbabbababa\"", "output": "3"}, {"input": "str = \"aaabba\"", "output": "1"}]}
{"statement": "Task: Given a string S, find all possible palindromic partitions of the given string.\n\nInput: The input is a string S of length N, received from standard input.\n\nOutput: The output should be a list of lists, where each inner list represents a palindromic partition of the input string.\n\nConstraints: 1 \u2264 N \u2264 20. \n\nExplanation: A palindromic partition of a string is a partitioning of the string into non-empty substrings, such that each substring is a palindrome. A palindrome is a string that reads the same forwards and backwards. The task is to find all possible palindromic partitions of the given string S. The input string S has a length between 1 and 20, inclusive. The output should be a list of lists, where each inner list represents a palindromic partition of the input string.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures', 'Complete search']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/find-all-possible-palindromic-partitions-of-a-string/1", "sample_test_cases": [{"input": "S = \"geeks\"", "output": "g e e k s\ng ee k s"}, {"input": "S = \"madam\"", "output": "m a d a m\nm ada m\nmadam"}]}
{"statement": "Task: Given a picture represented as a graph with n vertices and m edges, color some edges to form a hedgehog. A hedgehog consists of a tail and some spines. The tail is a simple path in the graph, i.e., a sequence of vertices such that every two neighboring vertices are connected by a colored edge, and the vertices are in strictly increasing order. The length of the tail is the number of vertices in it. The beauty of a hedgehog is the product of the length of the tail and the number of spines, where a spine is an edge that has one endpoint in the tail and the other endpoint not in the tail. Find the maximum possible beauty of a hedgehog.\n\nInput: The input consists of two integers n and m, followed by m lines, each containing two integers u_{i} and v_{i} representing the endpoints of the i-th edge. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the maximum possible value of the hedgehog's beauty.\n\nConstraints: 2 \u2264 n \u2264 100,000, 1 \u2264 m \u2264 200,000, 1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/615/B", "sample_test_cases": [{"input": "8 6\n4 5\n3 5\n2 5\n1 2\n2 8\n6 7\n", "output": "9\n"}, {"input": "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n", "output": "12\n"}, {"input": "5 7\n1 3\n2 4\n4 5\n5 3\n2 1\n1 4\n3 2\n", "output": "9\n"}, {"input": "5 9\n1 3\n2 4\n4 5\n5 3\n2 1\n1 4\n3 2\n1 5\n2 5\n", "output": "16\n"}, {"input": "10 10\n6 3\n2 9\n9 4\n4 5\n10 3\n8 3\n10 5\n7 6\n1 4\n6 8\n", "output": "8\n"}, {"input": "100 50\n66 3\n92 79\n9 44\n84 45\n30 63\n30 20\n33 86\n8 83\n40 75\n7 36\n91 4\n76 88\n77 76\n28 27\n6 52\n41 57\n8 23\n34 75\n50 15\n86 68\n36 98\n30 84\n37 62\n22 4\n6 45\n72 80\n98 74\n78 84\n1 54\n99 27\n84 91\n78 7\n80 61\n67 48\n51 52\n36 72\n97 87\n25 17\n20 80\n20 39\n72 5\n21 77\n48 1\n63 21\n92 45\n34 93\n28 84\n3 91\n56 99\n7 53\n", "output": "15\n"}, {"input": "5 8\n1 3\n2 4\n4 5\n5 3\n2 1\n1 4\n3 2\n1 5\n", "output": "12\n"}, {"input": "2 1\n1 2\n", "output": "2\n"}, {"input": "10 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n", "output": "9\n"}, {"input": "5 4\n1 2\n1 3\n1 4\n1 5\n", "output": "4\n"}, {"input": "6 5\n1 2\n1 3\n1 4\n1 5\n1 6\n", "output": "5\n"}, {"input": "6 5\n1 2\n1 3\n1 4\n1 5\n1 6\n", "output": "5"}, {"input": "5 9\n1 3\n2 4\n4 5\n5 3\n2 1\n1 4\n3 2\n1 5\n2 5\n", "output": "16"}, {"input": "2 1\n1 2\n", "output": "2"}, {"input": "5 8\n1 3\n2 4\n4 5\n5 3\n2 1\n1 4\n3 2\n1 5\n", "output": "12"}]}
{"statement": "Task: Given the moods of n knights sitting at a round table, determine whether a regular polygon can be formed with knights in a good mood sitting at its vertices.\n\nInput: The input consists of two lines. The first line contains a single integer n (3 \u2264 n \u2264 105) representing the number of knights. The second line contains n space-separated integers, either 0 or 1, representing the moods of the knights in order as they are seated around the table. Input is provided through standard input.\n\nOutput: Output a single line containing either \"YES\" or \"NO\" indicating whether a regular polygon can be formed with knights in a good mood sitting at its vertices.\n\nConstraints: There must be at least 3 knights and at most 105 knights.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/71/C", "sample_test_cases": [{"input": "6\n0 1 0 0 0 0\n", "output": "NO\n"}, {"input": "7\n1 1 1 1 1 1 1\n", "output": "YES\n"}, {"input": "10\n1 0 1 1 1 0 1 0 1 0\n", "output": "YES\n"}, {"input": "7\n0 0 1 0 0 0 1\n", "output": "NO\n"}, {"input": "30\n1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0\n", "output": "YES\n"}, {"input": "113\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "YES\n"}, {"input": "15\n0 0 1 0 0 1 0 0 1 0 0 1 0 0 1\n", "output": "YES\n"}, {"input": "29\n0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 1 1 1 1 0 1 1 0 1 0 0 1 1 1\n", "output": "NO\n"}, {"input": "15\n0 0 0 1 0 1 1 0 1 0 0 1 0 1 0\n", "output": "YES\n"}, {"input": "77\n0 1 0 1 0 0 1 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1\n", "output": "YES\n"}, {"input": "4\n1 1 0 0\n", "output": "NO\n"}, {"input": "3\n0 0 1\n", "output": "NO\n"}, {"input": "5\n1 1 1 1 1\n", "output": "YES\n"}, {"input": "4\n0 1 0 1\n", "output": "NO\n"}, {"input": "100\n1 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 1 1 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 1 0 0\n", "output": "YES\n"}]}
{"statement": "Task: Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.\n\nInput: The input is a m x n grid filled with non-negative integers, provided through standard input. The grid can have a maximum size of 200 x 200.\n\nOutput: The output is a single integer representing the minimum sum of all numbers along the path from the top left corner to the bottom right corner of the grid.\n\nConstraints: All numbers in the grid are non-negative integers not exceeding 1000.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/minimum-path-sum/", "sample_test_cases": [{"input": [[[1, 3, 1], [1, 5, 1], [4, 2, 1]]], "output": 7}, {"input": [[[1, 2, 3], [4, 5, 6]]], "output": 12}]}
{"statement": "Task: Given a tree with $n$ nodes, label each of its $n-1$ edges with a positive integer such that the product of all $n-1$ numbers equals a given number $k$ which is the product of $m$ prime factors. The number of $1$s among all $n-1$ integers must be minimum possible. Let $f(u,v)$ be the sum of the numbers on the simple path from node $u$ to node $v$. Find the maximum possible distribution index of the tree, i.e., $\\sum\\limits_{i=1}^{n-1} \\sum\\limits_{j=i+1}^n f(i,j)$, and print it modulo $10^9 + 7$.\n\nInput: The input consists of multiple test cases, where each test case starts with an integer $n$ representing the number of nodes in the tree, followed by $n-1$ lines, each containing two integers $u_i$ and $v_i$ representing an edge between nodes $u_i$ and $v_i$. The next line contains an integer $m$ representing the number of prime factors of a given number $k$. The last line of each test case contains $m$ prime numbers $p_1, p_2, \\ldots, p_m$ such that $k = p_1 \\cdot p_2 \\cdot \\ldots \\cdot p_m$. The input is read from standard input.\n\nOutput: The output should consist of $T$ lines, where $T$ is the number of test cases. Each line should contain a single integer giving the maximum possible distribution index for the corresponding test case. The output should be printed modulo $10^9 + 7$.\n\nConstraints: $1 \\leq T \\leq 100$, $2 \\leq n \\leq 10^5$, $1 \\leq m \\leq 6 \\cdot 10^4$, $2 \\leq p_i < 6 \\cdot 10^4$, the sum of $n$ over all test cases doesn't exceed $10^5$, the sum of $m$ over all test cases doesn't exceed $6 \\cdot 10^4$, and the given edges for each test case form a tree.", "editorial": "", "tag": "['Graph traversal', 'Sorting', 'Implementation', 'Greedy algorithms', 'Number theory', 'Tree algorithms', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1401/D", "sample_test_cases": [{"input": "3\n4\n1 2\n2 3\n3 4\n2\n2 2\n4\n3 4\n1 3\n3 2\n2\n3 2\n7\n6 1\n2 3\n4 6\n7 3\n5 1\n3 6\n4\n7 5 13 3\n", "output": "17\n18\n286\n"}, {"input": "4\n3\n3 1\n2 1\n4\n22861 20707 59627 9293\n3\n3 1\n1 2\n6\n15767 40973 20807 24419 46439 33757\n3\n3 2\n1 2\n6\n16493 54493 10799 37529 59743 30529\n3\n3 1\n2 1\n1\n42961\n", "output": "783349080\n330291712\n563526719\n85924\n"}, {"input": "4\n3\n3 1\n2 1\n4\n22861 20707 59627 9293\n3\n3 1\n1 2\n6\n15767 40973 20807 24419 46439 33757\n3\n3 2\n1 2\n6\n16493 54493 10799 37529 59743 30529\n3\n3 1\n2 1\n1\n42961\n", "output": "783349080\n330291712\n563526719\n85924\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n2 2 2 2 2 3 3 7 109 109 167\n", "output": "16\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n2 2 2 2 2 3 3 7 109 109 123\n", "output": "946107806\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n2 2 2 2 3 3 3 7 109 109 123\n", "output": "419161696\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n4 2 2 2 3 3 3 7 109 109 123\n", "output": "838323380\n"}, {"input": "4\n3\n3 1\n2 1\n4\n22861 20707 59627 9293\n3\n3 1\n1 2\n6\n15767 40973 20807 24419 46439 62816\n3\n3 2\n1 2\n6\n16493 54493 10799 37529 59743 30529\n3\n3 1\n2 1\n1\n42961\n", "output": "783349080\n372565328\n563526719\n85924\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n4 2 2 2 3 3 3 7 10 109 123\n", "output": "810855372\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n4 2 2 2 3 3 6 7 10 109 123\n", "output": "621710725\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n4 2 3 2 3 3 6 7 10 109 123\n", "output": "432566078\n"}, {"input": "4\n3\n3 1\n2 1\n4\n22861 20707 59627 9293\n3\n3 1\n1 2\n6\n15767 40973 20807 24419 46439 33757\n3\n3 2\n1 2\n6\n16493 34019 10799 37529 59743 30529\n3\n3 1\n2 1\n1\n42961\n", "output": "783349080\n330291712\n783294328\n85924\n"}, {"input": "3\n4\n1 2\n2 3\n3 4\n2\n2 2\n4\n3 4\n1 3\n3 2\n2\n3 2\n7\n6 1\n2 3\n4 2\n7 3\n5 1\n3 6\n4\n7 5 13 3\n", "output": "17\n18\n306\n"}, {"input": "1\n4\n1 2\n2 3\n3 4\n11\n2 2 2 2 3 3 3 2 109 109 123\n", "output": "262617637\n"}, {"input": "4\n3\n3 1\n2 1\n4\n22861 20707 59627 9293\n3\n3 1\n1 2\n6\n15767 40973 20807 24419 46439 62816\n3\n3 2\n1 2\n6\n31575 54493 10799 37529 59743 30529\n3\n3 1\n2 1\n1\n42961\n", "output": "783349080\n372565328\n603348715\n85924\n"}]}
{"statement": "Task: Given a rectangular table R consisting of N rows and M columns, find the number of different steady tables of size N x M modulo 1 000 000 000. A steady table is defined as a rectangular table R where each element of R is a non-negative integer and the sum of elements in the ith row is not less than the sum of elements in the (i-1)th row for each i where 2 \u2264 i \u2264 N and the sum of elements in the Nth row is less than or equal to M.\n\nInput: The input consists of T test cases, where each test case contains two space-separated integers N and M denoting the number of rows and columns respectively. The input is read from standard input.\n\nOutput: For each test case, output a single integer corresponding to the number of different steady tables of size N x M modulo 1 000 000 000.\n\nConstraints: 1 \u2264 T \u2264 10, 1 \u2264 N, M \u2264 2000.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/STDYTAB", "sample_test_cases": [{"input": ["3", "1 1", "2 2", "2 3"], "output": ["2", "25", "273"]}]}
{"statement": "Task: Given a text $t$ and a set of $n$ strings $s_1, s_2, \\dots, s_n$, the task is to color all the letters of the text in red using the strings in the set. In one step, any occurrence of any string $s_i$ in the text $t$ can be chosen and the corresponding characters of the text can be colored in red. The minimum number of steps needed to color all letters $t$ in red and how to do it needs to be determined. If it is impossible to color all letters of the text $t$ in red, output -1. \n\nInput: The input consists of multiple test cases. For each test case, the first line contains a string $t$ of length $|t|$. The second line contains an integer $n$ which represents the number of strings in the set. This is followed by $n$ lines, each containing a string $s_i$ of length $|s_i|$. The input arrives from standard input.\n\nOutput: For each test case, the output should be printed on a separate line. If it is impossible to color all the letters of the text in red, print a single line containing the number -1. Otherwise, on the first line, print the number $m$ which is the minimum number of steps it will take to turn all the letters $t$ red. Then in the next $m$ lines print pairs of indices: $w_j$ and $p_j$ ($1 \\le j \\le m$), which denote that the string with index $w_j$ was used as a substring to cover the occurrences starting in the text $t$ from position $p_j$. The pairs can be output in any order.\n\nConstraints: $1 \\le q \\le 100$, $1 \\le |t| \\le 100$, $1 \\le n \\le 10$, $1 \\le |s_i| \\le 10$.", "editorial": "", "tag": "['String algorithms', 'Greedy algorithms', 'Complete search', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1714/D", "sample_test_cases": [{"input": "6\nbababa\n2\nba\naba\ncaba\n2\nbac\nacab\nabacabaca\n3\naba\nbac\naca\nbaca\n3\na\nc\nb\ncodeforces\n4\ndef\ncode\nefo\nforces\naaaabbbbcccceeee\n4\neeee\ncccc\naaaa\nbbbb\n", "output": "3\n1 1\n2 2\n2 4\n-1\n4\n1 1\n3 3\n2 6\n3 7\n4\n3 1\n1 2\n2 3\n1 4\n2\n2 1\n4 5\n4\n3 1\n4 5\n2 9\n1 13\n"}, {"input": "1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n10\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaaaaaa\naaaaaaaa\naaaaaaaaa\naaaaaaaaaa\n", "output": "-1\n"}, {"input": "1\nabcdefgh\n3\nabcde\ndefg\ncdefgh\n", "output": "2\n1 1\n3 3\n"}, {"input": "1\nabcabcab\n3\nabcab\nca\nb\n", "output": "2\n1 1\n1 4\n"}, {"input": "1\nabcdefabcde\n4\nabcde\ndefa\nbcde\nabcdef\n", "output": "2\n4 1\n1 7\n"}, {"input": "1\nabcde\n4\nabc\ncd\ne\nbcde\n", "output": "2\n1 1\n4 2\n"}, {"input": "1\nababacabababa\n3\nababa\nac\nbacabababa\n", "output": "2\n1 1\n3 4\n"}, {"input": "1\nabcdefghij\n6\nabcd\nef\ngh\nij\ncdefgh\nhij\n", "output": "3\n1 1\n5 3\n6 8\n"}, {"input": "1\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccd\n10\nc\nc\nc\nc\nc\nc\nc\nc\nc\nc\n", "output": "-1\n"}, {"input": "1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n10\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaaaaaa\naaaaaaaa\naaaaaaaaa\naaaaaaaaaa\n", "output": "10\n10 1\n10 11\n10 21\n10 31\n10 41\n10 51\n10 61\n10 71\n10 81\n10 88\n"}, {"input": "1\nabc\n3\nabc\nab\nc\n", "output": "1\n1 1\n"}, {"input": "1\nbbbbaabaabbbbbaabaabaabbaaaaabaabababaaabbbaaabbbbbbbbbaababbbbbbaaabaaaaaaaba\n9\nbaa\naaa\nbbb\nbab\naaa\nabb\nbbb\nbab\naaa\n", "output": "-1\n"}, {"input": "1\nabcdef\n4\nabc\nde\nef\nbcdef\n", "output": "2\n1 1\n4 2\n"}, {"input": "1\nabcdefgabcde\n5\nabcde\ndefa\nbcdeg\nabcdef\ndefg\n", "output": "3\n4 1\n5 4\n1 8\n"}, {"input": "1\nabcdefabcde\n6\nabcd\ndefa\nbcde\nbcdef\ncdefab\nefab\n", "output": "3\n1 1\n5 3\n3 8\n"}]}
{"statement": "Task: Given an array of non-negative integers, determine if it is possible to reach the last index of the array where each element in the array represents the maximum jump length at that position.\n\nInput: The input is a single array of non-negative integers, which arrives from standard input.\n\nOutput: The output is a boolean value indicating whether or not it is possible to reach the last index.\n\nConstraints: The input array has a length between 1 and 10^4 and each element in the array is between 0 and 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/jump-game/", "sample_test_cases": [{"input": [[2, 3, 1, 1, 4]], "output": true}]}
{"statement": "Task: Given a directed tree with n vertices, choose a capital city such that the minimum number of edges need to be reversed in order to reach any other city from the capital is minimized.\n\nInput: The input consists of an integer n, representing the number of cities in Treeland. Next n-1 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers si, ti (1 \u2264 si, ti \u2264 n; si \u2260 ti) \u2014 the numbers of cities, connected by that road. The i-th road is oriented from city si to city ti. The input is provided through standard input.\n\nOutput: In the first line print the minimum number of roads to be inversed if the capital is chosen optimally. In the second line print all possible ways to choose the capital \u2014 a sequence of indexes of cities in the increasing order.\n\nConstraints: 2 \u2264 n \u2264 2\u00b710^5, and si and ti are between 1 and n, where si is not equal to ti.", "editorial": "", "tag": "['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/219/D", "sample_test_cases": [{"input": "15\n15 6\n2 15\n14 15\n15 12\n1 2\n10 15\n7 4\n13 7\n11 2\n5 2\n7 2\n3 2\n7 8\n9 15\n", "output": "7\n13\n"}, {"input": "2\n1 2\n", "output": "0\n1\n"}, {"input": "12\n10 7\n6 10\n8 10\n4 12\n10 4\n3 12\n1 2\n2 7\n4 5\n11 5\n11 9\n", "output": "5\n1 6 8\n"}, {"input": "13\n7 13\n5 4\n5 1\n11 12\n8 3\n13 4\n10 7\n11 5\n8 13\n2 8\n10 6\n4 9\n", "output": "4\n2 10\n"}, {"input": "10\n9 3\n3 8\n4 3\n3 5\n7 8\n10 3\n2 3\n6 2\n3 1\n", "output": "4\n6\n"}, {"input": "8\n1 2\n3 2\n4 3\n4 5\n6 5\n6 7\n8 7\n", "output": "3\n4 6 8\n"}, {"input": "10\n2 3\n1 8\n9 5\n5 4\n6 10\n4 8\n5 6\n7 6\n5 3\n", "output": "3\n9\n"}, {"input": "10\n5 4\n6 5\n10 1\n2 5\n9 8\n1 3\n7 10\n2 3\n5 9\n", "output": "2\n7\n"}, {"input": "14\n13 10\n5 14\n9 4\n8 12\n10 1\n5 2\n3 6\n11 2\n13 2\n13 7\n8 2\n4 5\n1 3\n", "output": "3\n9\n"}, {"input": "11\n3 10\n4 7\n11 7\n8 2\n6 9\n9 3\n5 9\n1 3\n3 8\n7 3\n", "output": "5\n4 5 6 11\n"}, {"input": "15\n15 6\n2 15\n14 15\n15 12\n1 2\n10 15\n7 4\n13 7\n11 1\n5 2\n7 2\n3 2\n7 8\n9 15\n", "output": "7\n11 13\n"}, {"input": "10\n9 3\n3 8\n4 3\n3 5\n7 8\n10 3\n2 5\n6 2\n3 1\n", "output": "5\n4 6 9 10\n"}, {"input": "8\n1 4\n3 2\n4 3\n4 5\n6 5\n6 7\n8 7\n", "output": "2\n1\n"}, {"input": "10\n5 4\n6 5\n10 1\n2 5\n9 8\n1 3\n7 5\n2 3\n5 9\n", "output": "3\n10\n"}, {"input": "14\n13 10\n4 14\n9 4\n8 12\n10 1\n5 2\n3 6\n11 2\n13 2\n13 7\n8 2\n4 5\n1 3\n", "output": "3\n9\n"}]}
{"statement": "Task: Given a binary string $s$ of length $n$, choose two non-empty substrings of $s$ and calculate the bitwise OR of their integer values. Output the maximum possible value in binary representation without leading zeroes.\n\nInput: The input consists of an integer $n$ and a binary string $s$ of length $n$, both read from standard input.\n\nOutput: Output the maximum possible value in binary representation without leading zeroes.\n\nConstraints: $1 \\leq n \\leq 10^6$, $s$ consists of only 0's and 1's.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Complete search', 'Probability']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1743/D", "sample_test_cases": [{"input": "5\n11010\n", "output": "11111\n"}, {"input": "7\n1110010\n", "output": "1111110\n"}, {"input": "4\n0000\n", "output": "0\n"}, {"input": "5\n10110\n", "output": "11111\n"}, {"input": "5\n10111\n", "output": "11111\n"}, {"input": "5\n11011\n", "output": "11111\n"}, {"input": "5\n11000\n", "output": "11110\n"}, {"input": "5\n10000\n", "output": "11000\n"}, {"input": "5\n10110\n", "output": "11111\n"}, {"input": "5\n10111\n", "output": "11111\n"}]}
{"statement": "Task: Given an alien language with an alphabet of size n and each word having m characters, find the number of possible words in the language. The language has specific rules for the placement of letters in a word based on the index of the letter in the alphabet. The output should be the number of possible words modulo $10^8+7$. \n\nInput: The input consists of t test cases, where each test case contains two integers n and m. The input is provided through standard input.\n\nOutput: For each test case, output the number of possible words modulo $10^8+7$.\n\nConstraints: $1\\leq t\\leq5$, $1\\leq n\\leq10^5$, and $1\\leq m\\leq5\\cdot10^5$.\n\nThe alien language can be represented as a sequence of m characters, where each character can be any of the n letters in the alphabet. The placement of letters in a word is determined by the index of the letter in the alphabet. If the index of the letter is i, then the letter can be placed at any position in the word, but if 2i>n, it can also be the last letter of the word or immediately followed by any letter, including itself. If 2i\u2264n, the letter can only be immediately followed by a letter with an index greater than or equal to 2i and cannot be the last letter of the word. The task is to find the number of possible words that can be formed in the language with these rules. \n\nThe input consists of t test cases, where each test case contains two integers n and m. The first integer n represents the size of the alphabet, and the second integer m represents the length of each word. The output for each test case should be a single integer representing the number of possible words that can be formed in the language modulo $10^8+7$. The constraints for the input are $1\\leq t\\leq5$, $1\\leq n\\leq10^5$, and $1\\leq m\\leq5\\cdot10^5$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/alien-languages/problem", "sample_test_cases": [{"input": "3\n1 3\n2 3\n3 2\n", "output": "1\n3\n6\n"}]}
{"statement": "Task: Given an array of n positive integers a[1], a[2], ..., a[n] and a set of m bad prime numbers b1, b2, ..., bm, improve the array by performing a sequence of operations. Each operation involves choosing a subset of the array and replacing each element with its greatest common divisor with the rest of the subset. The beauty of the array is determined by the function f(s), which is defined as follows:\n\n  * f(1) = 0; \n  * Let p be the minimum prime divisor of s. If p is a good prime, then f(s) = f(s/p) + s, otherwise f(s) = f(s/p) - s.\n\nA prime number that is not in the set b is considered good. The goal is to maximize the beauty of the array by choosing the optimal sequence of operations.\n\nInput: The input consists of three lines. The first line contains two integers n and m, representing the length of the array and the number of bad prime numbers, respectively. The second line contains n space-separated positive integers representing the array. The third line contains m space-separated positive integers representing the bad prime numbers. Input is provided through standard input.\n\nOutput: The output is a single integer representing the maximum beauty of the array after performing an arbitrary number of operations.\n\nConstraints: 1 \u2264 n, m \u2264 5000, 2 \u2264 b1 < b2 < ... < bm \u2264 109, and 1 \u2264 a[i] \u2264 109.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/403/B", "sample_test_cases": [{"input": "3 2\n2 6 8\n2 3\n", "output": "-3"}, {"input": "21 1\n4608 864 2592 2304 144 13824 1296 432 576 6912 20736 648 288 72 1728 3456 5184 216 41472 1152 10368\n3\n", "output": "63"}, {"input": "4 2\n30 30 5 5\n2 3\n", "output": "2"}, {"input": "35 1\n20736 2304 73728 1296 1728 216 864 3456 110592 10368 147456 288 9216 2592 331776 663552 1152 144 27648 576 6912 648 82944 4608 36864 72 5184 13824 221184 55296 41472 18432 165888 432 442368\n3\n", "output": "188"}, {"input": "32 1\n2916 108 216 1458 34992 54 18 648 5832 6 36 324 432 104976 11664 17496 13122 4374 1296 72 972 1944 24 52488 486 144 48 12 26244 8748 3888 162\n3\n", "output": "-47"}, {"input": "1 1\n2\n3\n", "output": "1"}, {"input": "5 1\n1 1 1 1 1\n3\n", "output": "0"}, {"input": "1 1\n1\n2\n", "output": "0"}, {"input": "20 1\n13824 256 10368 576 3456 1728 6912 1152 192 64 2304 41472 4608 1536 768 128 384 5184 512 20736\n3\n", "output": "110"}, {"input": "15 1\n931170240 465585120 232792560 116396280 58198140 29099070 14549535 4849845 1616615 323323 46189 4199 323 19 1\n23\n", "output": "105"}, {"input": "1 1\n1\n3\n", "output": "0"}, {"input": "1 1\n2\n2\n", "output": "0"}, {"input": "35 1\n147456 288 165888 55296 442368 864 3456 576 41472 663552 13824 10368 72 6912 5184 1296 4608 73728 82944 1728 27648 110592 144 432 221184 20736 648 331776 2304 2592 9216 36864 216 18432 1152\n3\n", "output": "188"}, {"input": "35 1\n5184 10368 20736 3456 2592 73728 6912 27648 165888 147456 221184 36864 663552 18432 442368 41472 9216 1728 72 55296 331776 4608 1152 216 82944 2304 576 144 864 288 13824 432 1296 110592 648\n3\n", "output": "188"}, {"input": "2 1\n18 2\n2\n", "output": "2"}]}
{"statement": "Task: Given a permutation p of length 2n, determine if there exist two arrays a and b, each of length n and with no elements in common, so that p=merge(a,b), where merge is a recursive function that takes two arrays and returns a new array of length n+m, defined as follows:\n\n  * If one of the arrays is empty, the result is the other array. That is, merge(\u2205,b)=b and merge(a,\u2205)=a. In particular, merge(\u2205,\u2205)=\u2205. \n  * If both arrays are non-empty, and a_1<b_1, then merge(a,b)=[a_1]+merge([a_2,\u2026,a_n],b). That is, we delete the first element a_1 of a, merge the remaining arrays, then add a_1 to the beginning of the result. \n  * If both arrays are non-empty, and a_1>b_1, then merge(a,b)=[b_1]+merge(a,[b_2,\u2026,b_m]). That is, we delete the first element b_1 of b, merge the remaining arrays, then add b_1 to the beginning of the result. \n\nInput: The input consists of multiple test cases. The first line of each test case contains a single integer n, the length of the arrays. The second line contains 2n integers, the permutation p. The input is read from standard input.\n\nOutput: For each test case, output \"YES\" if there exist arrays a and b, each of length n and with no common elements, so that p=merge(a,b). Otherwise, output \"NO\". The output should be written to standard output.\n\nConstraints: 1 \u2264 n \u2264 2000, 1 \u2264 t \u2264 1000, 1 \u2264 pi \u2264 2n, where pi is the i-th element of the permutation. The sum of n across all test cases does not exceed 2000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1382/D", "sample_test_cases": [{"input": "1\n9\n2 1 4 3 7 6 5 10 9 8 13 12 11 18 17 16 15 14\n", "output": "YES\n"}, {"input": "1\n16\n27 1 28 2 29 3 4 5 6 7 30 8 9 10 11 12 13 31 14 15 16 17 18 19 32 20 21 22 23 24 25 26\n", "output": "YES\n"}, {"input": "6\n2\n2 3 1 4\n2\n3 1 2 4\n4\n3 2 6 1 5 7 8 4\n3\n1 2 3 4 5 6\n4\n6 1 3 7 4 5 8 2\n6\n4 3 2 5 1 11 9 12 8 6 10 7\n", "output": "YES\nNO\nYES\nYES\nNO\nNO\n"}]}
{"statement": "Task: Given an array of N positive integers, find the minimum number of operations required to modify the array such that array elements are in strictly increasing order (A[i] < A[i+1]). Changing a number to greater or lesser than the original number is counted as one operation.\n\nInput: The input consists of a single line containing an integer N, followed by N space-separated integers representing the elements of the array. The input arrives from standard input.\n\nOutput: The output should consist of a single integer representing the minimum number of operations needed to make the array strictly increasing.\n\nConstraints: The input array has a length between 1 and 1000, and each element is a positive integer between 1 and 1000000. The expected time complexity is O(n^2) and the expected space complexity is O(n).", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/convert-to-strictly-increasing-array3351/1", "sample_test_cases": [{"input": "nums[] = [1, 2, 3, 6, 5, 4]", "output": "2"}, {"input": "nums[] = [1, 2, 3, 4]", "output": "0"}]}
{"statement": "Task: Given an unsorted array of integers, find the number of longest increasing subsequences.\n\nInput: The input consists of a single line containing the unsorted array of integers. The input arrives from standard input.\n\nOutput: The output is a single integer representing the number of longest increasing subsequences in the given array.\n\nConstraints: The length of the given array will not exceed 2000 and the output is guaranteed to fit in a 32-bit signed integer. \n\nMathematical concepts: array, integer, subsequence, increasing subsequence.\n\nComputer science concepts: input/output, constraints.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Range queries', 'Segment trees revisited']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/number-of-longest-increasing-subsequence/", "sample_test_cases": []}
{"statement": "Task: Given a Cartesian coordinate system with n stars, each with coordinates (x_i, y_i), a maximum brightness c, and an initial brightness s_i, determine the total brightness of stars in a given rectangular view at a given time.\n\nInput: The input consists of three integers: n, q, and c, followed by n lines describing the stars and q lines describing the views. Each star is described by its coordinates and initial brightness, and each view is described by the time, coordinates of the lower left and upper right corners of the rectangle. The input arrives from standard input.\n\nOutput: The output should consist of q lines, each line containing the total brightness of the stars in the corresponding view.\n\nConstraints: 1 \u2264 n, q \u2264 10^5, 1 \u2264 c \u2264 10, 1 \u2264 x_i, y_i \u2264 100, 0 \u2264 s_i \u2264 c \u2264 10, and 0 \u2264 t_i \u2264 10^9. The coordinates of the viewed rectangle should satisfy 1 \u2264 x_1i < x_2i \u2264 100 and 1 \u2264 y_1i < y_2i \u2264 100.\n\nMathematical concepts: Cartesian coordinate system, coordinates, brightness, rectangle, view, time.\n\nComputer science concepts: Input/output, integers, arrays, loops, conditional statements.", "editorial": "", "tag": "['Dynamic programming', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/835/C", "sample_test_cases": [{"input": "2 3 3\n1 1 1\n3 2 0\n2 1 1 2 2\n0 2 1 4 5\n5 1 1 5 5\n", "output": "3\n0\n3\n"}, {"input": "3 4 5\n1 1 2\n2 3 0\n3 3 1\n0 1 1 100 100\n1 2 2 4 4\n2 2 1 4 7\n1 50 50 51 51\n", "output": "3\n3\n5\n0\n"}, {"input": "2 3 3\n1 1 1\n3 2 0\n2 1 1 1 2\n0 2 1 4 5\n5 1 1 5 5\n", "output": "3\n0\n3\n"}, {"input": "3 4 5\n1 1 2\n2 3 0\n3 3 1\n0 1 1 100 100\n1 2 2 4 4\n2 2 1 4 7\n1 60 50 51 51\n", "output": "3\n3\n5\n0\n"}, {"input": "2 3 3\n1 2 1\n3 2 0\n2 1 1 2 2\n0 2 1 7 5\n5 1 1 5 1\n", "output": "3\n0\n0\n"}, {"input": "2 3 3\n1 2 1\n3 2 0\n0 1 1 2 2\n0 2 1 7 5\n5 1 1 5 5\n", "output": "1\n0\n3\n"}, {"input": "2 3 3\n1 2 1\n3 2 0\n0 1 1 2 2\n1 2 1 7 5\n5 1 1 5 5\n", "output": "1\n1\n3\n"}, {"input": "2 3 3\n1 1 1\n3 2 1\n2 1 1 1 2\n0 2 1 7 5\n7 1 1 5 5\n", "output": "3\n1\n0\n"}, {"input": "2 3 3\n1 2 1\n3 2 0\n0 1 1 1 2\n1 2 1 7 2\n8 1 1 5 5\n", "output": "1\n1\n1\n"}, {"input": "3 4 5\n1 1 2\n2 3 0\n3 3 1\n0 1 1 100 100\n0 2 2 4 4\n2 2 1 4 7\n1 50 50 51 51\n", "output": "3\n1\n5\n0\n"}, {"input": "2 3 6\n1 1 1\n3 2 0\n2 1 1 2 2\n0 2 1 4 5\n5 1 1 5 5\n", "output": "3\n0\n11\n"}, {"input": "2 3 3\n1 1 1\n3 2 0\n2 1 1 4 2\n0 2 1 7 5\n5 1 1 5 5\n", "output": "5\n0\n3\n"}, {"input": "2 3 3\n1 1 1\n3 2 0\n1 1 1 1 2\n0 2 1 4 8\n5 1 1 5 5\n", "output": "2\n0\n3\n"}, {"input": "3 4 5\n1 1 2\n2 3 0\n3 3 1\n0 1 1 100 100\n1 2 2 4 4\n3 2 1 4 7\n1 23 50 51 51\n", "output": "3\n3\n7\n0\n"}, {"input": "2 3 6\n1 1 1\n3 2 0\n2 2 1 2 2\n0 2 1 4 5\n5 1 1 5 5\n", "output": "0\n0\n11\n"}]}
{"statement": "Task: Given a fixed integer M and X, find the winner for each number of players from 1 to X in a game where N people stand in a circle, and a coin is passed around until only one person remains. The coin is passed M-1 times clockwise before the person holding it is removed from the circle.\n\nInput: The first line of input contains T, the number of test cases. Each test case contains two space-separated integers M and X. The input is read from standard input.\n\nOutput: For each test case, output X integers A_{1}, A_{2}, ..., A_{X}, where A_{i} is the index of the winner if i people are playing this game.\n\nConstraints: 1 \u2264 T \u2264 1000, 1 \u2264 M \u2264 10^9, 1 \u2264 X \u2264 10000, and the sum of X over all test cases is not more than 5 * 10^5.", "editorial": "", "tag": "['Number theory', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/CIRCLEGAME", "sample_test_cases": [{"input": "1\n2 3\n", "output": "1 1 1"}]}
{"statement": "Task: Given the number of days n and the number of marks strictly above the water on each day, find the minimum possible sum of the number of marks strictly below the water level among all days.\n\nInput: The input consists of two lines. The first line contains a single positive integer n (1 \u2264 n \u2264 10^5) representing the number of days. The second line contains n space-separated integers m_1, m_2, ..., m_{n} (0 \u2264 m_{i} < i) representing the number of marks strictly above the water on each day.\n\nOutput: Output one single integer representing the minimum possible sum of the number of marks strictly below the water level among all days.\n\nConstraints: The number of days should be between 1 and 10^5, and the number of marks strictly above the water on each day should be between 0 and i-1. The input is provided through standard input.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/924/C", "sample_test_cases": [{"input": "6\n0 1 0 3 0 2\n", "output": "6\n"}, {"input": "5\n0 1 2 1 2\n", "output": "1\n"}, {"input": "5\n0 1 1 2 2\n", "output": "0\n"}, {"input": "1\n0\n", "output": "0\n"}, {"input": "100\n0 1 2 2 3 0 1 5 6 6 0 0 8 7 1 9 9 4 10 11 12 2 12 12 12 12 9 13 14 8 15 15 15 19 15 7 17 17 18 19 9 10 21 0 22 9 2 24 24 4 24 7 25 14 5 8 28 29 30 31 31 31 0 3 15 31 8 33 6 35 35 35 36 36 37 37 38 39 28 0 2 23 41 9 9 0 6 25 41 41 12 42 43 43 36 44 51 45 43 4\n", "output": "761\n"}, {"input": "2\n0 1\n", "output": "0\n"}, {"input": "2\n0 0\n", "output": "0\n"}, {"input": "3\n0 1 0\n", "output": "1\n"}, {"input": "3\n0 0 1\n", "output": "0\n"}, {"input": "3\n0 1 1\n", "output": "0\n"}, {"input": "3\n0 1 2\n", "output": "0\n"}, {"input": "3\n0 0 0\n", "output": "0\n"}, {"input": "4\n0 0 1 2\n", "output": "0\n"}, {"input": "4\n0 1 0 3\n", "output": "2\n"}, {"input": "4\n0 1 1 0\n", "output": "1\n"}]}
{"statement": "Task: Given N upper hemispheres and M lower hemispheres, each with a radius between 1 and C, find the number of different X-sequences that can be built. An X-sequence is a sequence of nested concentric spheres, and the number of different X-sequences is determined by the number of spheres of different radii available.\n\nInput: The input consists of T test cases. Each test case starts with a line containing three integers: N, M, and C. The second line contains N space-separated integers U_1, U_2, ..., U_N denoting the radii of the upper hemispheres, and the third line contains M space-separated integers L_1, L_2, ..., L_M denoting the radii of the lower hemispheres. The input is provided through standard input.\n\nOutput: For each test case, output a single line containing C space-separated integers, where the i-th integer represents the number of ways there are to build an i-sequence in modulo 10^9+7.\n\nConstraints: 1 \u2264 N \u2264 10^5, 1 \u2264 M \u2264 10^5, 1 \u2264 C \u2264 10^3, 1 \u2264 U_i \u2264 C, 1 \u2264 L_i \u2264 C, 1 \u2264 T \u2264 20.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/KSPHERES", "sample_test_cases": [{"input": "3 4 3\n1 2 3\n1 1 3 2", "output": "5 2 0"}]}
{"statement": "Task: Given a list of non-negative integers representing the positions of stones in ascending order, determine if a frog can cross a river by jumping on the stones. The frog can only jump forward and the distance of each jump must be either k - 1, k, or k + 1 units, where k is the distance of the previous jump. The frog starts on the first stone and must reach the last stone without jumping into the water.\n\nInput: The input consists of a list of non-negative integers representing the positions of stones in ascending order. The input is read from standard input.\n\nOutput: The output is a boolean value indicating whether or not the frog can reach the last stone without jumping into the water.\n\nConstraints: The input list will have at least 2 and at most 1,100 stones. Each stone's position will be a non-negative integer less than 2^31. The first stone's position is always 0.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/frog-jump/", "sample_test_cases": [{"input": [[0, 1, 3, 4, 5, 7, 9, 10, 12]], "output": true}]}
{"statement": "Task: Given n strings, each with a cost associated with it, the task is to sort the strings in lexicographical order using only the operation of reversing a string. Find the minimum total cost required to sort the strings in lexicographical order. If it is impossible to sort the strings in lexicographical order, output -1.\n\nInput: The input consists of an integer n, followed by n integers representing the cost of reversing each string, and then n strings. The input is read from standard input.\n\nOutput: The output should be an integer representing the minimum total cost required to sort the strings in lexicographical order. If it is impossible to sort the strings in lexicographical order, output -1.\n\nConstraints: 2 \u2264 n \u2264 100,000, 0 \u2264 c_{i} \u2264 10^9, and the total length of the strings does not exceed 100,000. For the purpose of this problem, two equal strings nearby do not break the condition of sequence being sorted lexicographically. String A is lexicographically smaller than string B if it is shorter than B (|A| < |B|) and is its prefix, or if none of them is a prefix of the other and at the first position where they differ character in A is smaller than the character in B.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/706/C", "sample_test_cases": [{"input": "2\n1 2\nba\nac\n", "output": "1\n"}, {"input": "3\n1 3 1\naa\nba\nac\n", "output": "1\n"}, {"input": "2\n5 5\nbbb\naaa\n", "output": "-1\n"}, {"input": "2\n3 3\naaa\naa\n", "output": "-1\n"}, {"input": "4\n0 0 8 6\nbi\nqp\nbt\nya\n", "output": "8\n"}, {"input": "5\n8 0 4 8 2\nac\ncl\ngg\ngm\nfs\n", "output": "2\n"}, {"input": "10\n7 7 0 0 0 1 6 6 7 3\ndv\ngb\nvg\nxg\nkt\nml\nqm\nnq\nrt\nxn\n", "output": "6\n"}, {"input": "3\n999999999 999999999 999999999\nxosbqqnmxq\nsdbvjhvytx\naydpuidgvy\n", "output": "1999999998\n"}, {"input": "3\n228 1488 228\nkek\nlol\nmda\n", "output": "0\n"}, {"input": "2\n1 1\naa\naa\n", "output": "0\n"}, {"input": "2\n1000000000 1000000000\nba\nac\n", "output": "1000000000\n"}, {"input": "5\n1000000000 1000000000 1000000000 1000000000 1000000000\nea\ndb\ncc\nbd\nae\n", "output": "4000000000\n"}, {"input": "3\n1000000000 1000000000 1000000000\nca\nda\nab\n", "output": "3000000000\n"}, {"input": "2\n1000000000 1000000000\naba\naab\n", "output": "1000000000\n"}, {"input": "3\n1000000000 1000000000 1000000000\nza\nyb\nxc\n", "output": "2000000000\n"}]}
{"statement": "Task: Given $n$ non-negative integers, each less than $2^k$, count the number of arrays for which the result of the bitwise AND operation on all elements is greater than or equal to the result of the bitwise XOR operation on all elements. The output should be the count modulo $10^9+7$.\n\nInput: The input consists of $t$ test cases. Each test case contains two integers $n$ and $k$, followed by a single line containing $n$ non-negative integers, each less than $2^k$. The sum of $n$ and $k$ over all test cases is at most $2\\cdot 10^5$. The input is read from standard input.\n\nOutput: For each test case, print a single integer representing the number of arrays that satisfy the condition, modulo $10^9+7$. The output is printed to standard output.\n\nConstraints: $1 \\leq t \\leq 5$, $1 \\leq n \\leq 2\\cdot 10^5$, $0 \\leq k \\leq 2\\cdot 10^5$, and all elements in the array are non-negative integers less than $2^k$.", "editorial": "", "tag": "['Bit manipulation', 'Combinatorics', 'Dynamic programming', 'Mathematics', 'Matrices']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1557/C", "sample_test_cases": [{"input": "3\n3 1\n2 1\n4 0\n", "output": "5\n2\n1\n"}, {"input": "5\n200000 200000\n24567 23423\n1 200000\n200000 1\n200000 0\n", "output": "226490044\n470587519\n175895282\n87947641\n1\n"}, {"input": "5\n2 200000\n199991 200000\n100000 1024\n1024 0\n200000 2048\n", "output": "4428492\n573667126\n741012999\n1\n386630993\n"}, {"input": "5\n199991 200000\n199992 200000\n199992 200000\n199992 200000\n199996 200000\n", "output": "573667126\n913020909\n913020909\n913020909\n41788052\n"}, {"input": "5\n200000 200000\n200000 200000\n200000 200000\n200000 200000\n200000 200000\n", "output": "226490044\n226490044\n226490044\n226490044\n226490044\n"}, {"input": "5\n60522 167713\n36426 133836\n48772 148202\n133447 125228\n103497 63591\n", "output": "418576030\n232137381\n395057418\n5669223\n765611330\n"}, {"input": "5\n60522 200000\n36426 200000\n48772 200000\n133447 200000\n103497 200000\n", "output": "88692754\n877803650\n810867890\n817679867\n55853432\n"}, {"input": "5\n22 167713\n26 133836\n72 148202\n47 125228\n97 63591\n", "output": "304668051\n8504791\n826876273\n876327971\n867434228\n"}, {"input": "5\n22 59\n26 60\n72 72\n47 3\n97 16\n", "output": "719147166\n712743436\n592556526\n300790496\n472187775\n"}, {"input": "5\n22 578\n26 604\n72 839\n47 857\n97 400\n", "output": "31027543\n136918279\n784949490\n553888953\n423365820\n"}, {"input": "5\n522 1981\n426 1890\n772 1010\n1447 1859\n1497 1362\n", "output": "128766123\n527181212\n212725943\n540481455\n161044419\n"}, {"input": "5\n522 3161\n426 3209\n772 2238\n1447 1372\n3497 3893\n", "output": "270381413\n22435266\n915213608\n465693385\n486274412\n"}, {"input": "5\n2522 4467\n426 3791\n772 4195\n1447 2006\n5497 2673\n", "output": "387599759\n635311356\n552472895\n752772609\n931791909\n"}, {"input": "5\n4522 2314\n4426 2886\n772 5081\n5447 5120\n7497 7239\n", "output": "583234568\n559552720\n122646970\n48480085\n917539288\n"}, {"input": "5\n522 1278\n6426 4981\n8772 2685\n3447 3137\n3497 8752\n", "output": "501733812\n294571525\n722429686\n914702675\n280411108\n"}]}
{"statement": "Task: Given a positive integer n, find the least number of perfect square numbers which sum to n.\n\nInput: The input is a single positive integer n, which represents the number to be decomposed into the sum of perfect squares. The input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of perfect squares that add up to n. The output is provided to standard output.\n\nConstraints: The input integer n is between 1 and 10^4, inclusive.", "editorial": "", "tag": "['Dynamic programming', 'Graph traversal', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/perfect-squares/", "sample_test_cases": [{"input": [12], "output": 3}]}
{"statement": "Task: Given the appearance time and health of $n$ monsters, a wizard apprentice can cast a spell with varying damage at positive integer amounts of seconds after the start of the level to kill the monsters. The damage of the spell is calculated based on the previous second's damage and uses mana. The apprentice has to cast the spell at the exact moment a monster appears, and the damage must be greater than or equal to the monster's health. Find the least amount of mana required to kill all monsters.\n\nInput: The input consists of multiple test cases, where each test case contains the number of monsters $n$, the appearance time of each monster $k_i$, and the health of each monster $h_i$. The input is read from standard input. The first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of monsters in the level. The second line of the testcase contains $n$ integers $k_1 < k_2 < \\dots < k_n$ ($1 \\le k_i \\le 10^9$) \u2014 the number of seconds from the start the $i$-th monster appears at. All $k_i$ are different, $k_i$ are provided in the increasing order. The third line of the testcase contains $n$ integers $h_1, h_2, \\dots, h_n$ ($1 \\le h_i \\le k_i \\le 10^9$) \u2014 the health of the $i$-th monster.\n\nOutput: The output should be printed to standard output. For each testcase, print a single integer \u2014 the least amount of mana required for the wizard apprentice to kill all monsters.\n\nConstraints: The number of test cases $t$ is $1 \\le t \\le 10^4$, the appearance time of each monster $k_i$ is $1 \\le k_i \\le 10^9$, and the health of each monster $h_i$ is $1 \\le h_i \\le k_i \\le 10^9$. The sum of $n$ over all test cases doesn't exceed $10^4$. The damage of the spell is calculated as follows: if the wizard apprentice didn't cast the spell at the previous second, the damage is $1$. Otherwise, let the damage at the previous second be $x$. Then the apprentice can choose the damage to be either $x + 1$ or $1$. A spell uses mana: casting a spell with damage $x$ uses $x$ mana. Mana doesn't regenerate. The apprentice can cast the spell even when there is no monster at the current second. The apprentice has to cast the spell at the exact moment a monster appears, and the damage must be greater than or equal to the monster's health.", "editorial": "", "tag": "['Sorting', 'Amortized analysis', 'Implementation', 'Greedy algorithms', 'Dynamic programming', 'Mathematics', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1626/C", "sample_test_cases": [{"input": "3\n1\n6\n4\n2\n4 5\n2 2\n3\n5 7 9\n2 1 2\n", "output": "10\n6\n7\n"}]}
{"statement": "Task: Given a string $s$, find the lexicographically smallest string of length exactly $k$ that can be obtained by either deleting the last character of the string or duplicating the string.\n\nInput: The input consists of two integers $n$ and $k$ ($1 \\leq n, k \\leq 5000$) representing the length of the original string $s$ and the length of the desired string, respectively. The second line contains the string $s$ consisting of $n$ lowercase English letters. The input is provided through standard input.\n\nOutput: The output should be the lexicographically smallest string of length $k$ that can be obtained by doing the operations on string $s$.\n\nConstraints: $n$ and $k$ are integers between $1$ and $5000$, inclusive. The lexicographically smallest string of length $k$ can be obtained by either deleting the last character of the string or duplicating the string.", "editorial": "", "tag": "['String algorithms', 'Sorting', 'Amortized analysis', 'Implementation', 'Complete search', 'Greedy algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1537/E1", "sample_test_cases": [{"input": "8 16\ndbcadabc\n", "output": "dbcadabcdbcadabc\n"}, {"input": "4 5\nabcd\n", "output": "aaaaa\n"}, {"input": "5 10\ndcdcd\n", "output": "dcdcdcdcdc\n"}, {"input": "5 10\ncbcbc\n", "output": "cbcbcbcbcb\n"}, {"input": "4 11\nddcd\n", "output": "ddcddcddcdd\n"}, {"input": "8 20\nccaccaca\n", "output": "ccaccacaccaccacaccac\n"}, {"input": "4 11\nzzaz\n", "output": "zzazzazzazz\n"}, {"input": "5 10\nbbabb\n", "output": "bbabbabbab\n"}]}
{"statement": "Task: Given an array $M$ of $n$ distinct integers in the range $[1,n]$, find the number of different ways to create a collection $V$ of arrays such that merging $V$ into a sorted array using a specific algorithm results in $M$. The output is the number of different ways to create $V$ modulo $10^9+7$.\n\nInput: The first line of input contains an integer $n$, the size of array $M$. The second line contains $n$ space-separated integers describing the respective values of $m_0,m_1,\\ldots,m_{n-1}$. The input is provided through standard input.\n\nOutput: The output should consist of a single integer, giving the number of different ways to create collection $V$ modulo $10^9+7$.\n\nConstraints: $1\\leq n\\leq 1200$ and $1\\leq m_i\\leq n$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "hackerrank", "url": "https://www.hackerrank.com/challenges/sherlocks-array-merging-algorithm/problem", "sample_test_cases": [{"input": "3\n1 2 3\n", "output": "4\n"}, {"input": "2\n2 1\n", "output": "1\n"}]}
{"statement": "Task: Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. A string can be represented as a binary tree by recursively partitioning it into two non-empty substrings. To scramble a string, we can swap the children of any non-leaf node.\n\nInput: The input consists of two strings s1 and s2 of the same length, which arrive from standard input.\n\nOutput: The output should be a boolean value indicating whether s2 is a scrambled string of s1.\n\nConstraints: The input strings have a length of at most 30.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/scramble-string/", "sample_test_cases": [{"input": ["\"great\"", "\"rgeat\""], "output": true}]}
{"statement": "Task: Given the number of players on a basketball team, the number of departments in a university, the department of interest, and the number of basketball players in each department, calculate the probability that a randomly formed team will have at least one player from the department of interest.\n\nInput: The input consists of a single line containing three integers n, m, and h, where n represents the number of players on the team, m represents the number of departments in the university, and h represents the department of interest. The second line contains m integers s1, s2, ..., sm, where si represents the number of basketball players in the i-th department.\n\nOutput: The output consists of a single line containing a single floating-point number, representing the probability that a randomly formed team will have at least one player from the department of interest. If there are not enough basketball players in the university to form a team, output -1 instead. The answer will be accepted if it has absolute or relative error not exceeding 10^-6.\n\nConstraints: 1 \u2264 n \u2264 100, 1 \u2264 m \u2264 1000, 1 \u2264 h \u2264 m, 1 \u2264 si \u2264 100.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics', 'Probability']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/108/D", "sample_test_cases": [{"input": "42 71 67\n2 1 4 1 10 5 1 8 8 5 2 1 1 7 2 2 8 10 8 2 10 8 2 2 9 6 5 10 7 1 7 2 10 3 5 6 10 10 4 6 10 5 6 6 9 4 1 6 1 8 10 6 1 5 3 2 4 1 8 5 10 10 9 3 10 7 5 9 1 9 3\n", "output": "0.3622396242\n"}, {"input": "67 108 14\n33 40 13 10 26 31 27 24 48 1 42 28 38 29 9 28 48 41 12 19 27 50 6 45 46 7 34 47 8 18 40 27 42 4 33 3 10 25 10 29 39 3 5 39 1 17 40 10 6 8 41 50 27 43 40 42 43 25 18 34 6 15 5 9 11 37 13 4 16 25 49 33 14 40 13 16 50 24 4 43 45 12 31 38 40 36 3 4 4 19 18 12 20 44 4 44 8 50 21 5 44 34 9 9 6 39 43 21\n", "output": "0.5045577611\n"}, {"input": "74 146 112\n10 31 40 32 9 17 31 26 32 7 20 18 50 10 15 28 6 41 21 27 11 5 14 36 48 45 10 42 45 40 4 11 41 23 47 31 34 4 42 49 48 9 37 34 25 27 30 27 44 33 30 25 22 13 25 41 8 34 32 22 11 12 32 9 37 9 42 7 37 13 20 40 28 26 2 6 2 49 41 46 11 9 32 18 43 28 39 48 45 36 18 10 28 35 26 5 20 12 16 2 34 28 31 13 18 39 40 1 39 12 33 31 1 31 46 1 47 38 39 49 32 12 2 8 16 27 48 41 16 27 38 42 21 27 26 8 31 41 20 43 47 5 39 25 47 34\n", "output": "0.4371110171\n"}, {"input": "17 5 1\n10 4 9 6 2\n", "output": "0.9998600700\n"}, {"input": "21 67 49\n4 4 3 5 7 5 10 2 8 5 2 2 6 3 6 2 8 6 2 6 2 9 3 3 4 1 9 9 3 3 6 3 6 7 8 9 10 6 10 5 1 5 2 3 3 9 10 5 10 7 1 6 4 5 4 7 8 5 4 2 9 3 3 5 7 1 10\n", "output": "0.4148600545\n"}, {"input": "1 1 1\n100\n", "output": "0.0000000000\n"}, {"input": "63 25 24\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 2 9 5 4 9 5 7\n", "output": "0.8915600093\n"}, {"input": "14 8 4\n6 2 10 6 2 8 4 2\n", "output": "0.8857504121\n"}, {"input": "14 8 4\n6 2 10 6 2 8 4 2\n", "output": "0.8857504121\n"}, {"input": "65 173 136\n26 18 8 11 1 22 44 6 15 22 13 49 30 36 37 41 25 27 9 36 36 1 45 20 7 47 28 30 30 21 33 32 9 11 16 5 19 12 44 40 25 40 32 36 15 34 4 43 28 19 29 33 7 11 18 13 40 18 10 26 1 48 20 38 1 20 34 8 46 8 32 35 16 49 26 36 11 16 4 29 35 44 14 21 22 42 10 1 3 12 35 30 14 45 2 24 32 15 2 28 35 17 48 31 7 26 44 43 37 4 14 26 25 41 18 40 15 32 16 7 40 22 43 8 25 21 35 21 47 45 7 21 50 38 23 13 4 49 10 27 31 38 43 40 10 24 39 35 31 33 9 6 15 18 2 14 20 14 12 12 29 47 9 49 25 17 41 35 9 40 19 50 34\n", "output": "0.1657312956\n"}, {"input": "14 9 9\n9 4 7 2 1 2 4 3 9\n", "output": "0.9711321228\n"}, {"input": "63 25 24\n6 7 7 1 2 5 5 9 9 1 9 8 1 2 10 10 5 10 2 9 5 4 9 5 7\n", "output": "0.8915600093\n"}, {"input": "1 1 1\n1\n", "output": "0.0000000000\n"}, {"input": "3 2 1\n1 2\n", "output": "0.0000000000\n"}, {"input": "82 135 73\n22 18 8 45 35 8 19 46 40 6 30 40 10 41 43 38 41 40 1 43 19 23 5 13 29 16 30 9 4 42 42 3 24 16 21 26 5 4 24 24 31 30 1 10 45 50 33 21 21 47 42 37 47 15 30 23 4 2 28 15 38 33 45 30 31 32 6 14 6 4 39 12 50 29 26 45 19 12 40 4 33 9 16 12 44 36 47 42 43 17 18 12 12 42 45 38 6 10 19 10 14 31 6 21 2 15 21 26 5 3 3 6 6 22 44 48 9 11 33 31 34 43 39 40 48 26 1 29 48 11 22 38 23 11 20\n", "output": "0.7067680293\n"}]}
{"statement": "Task: Given an array of positive integers and a set of bad prime numbers, find the maximum beauty of the array. The beauty of the array is determined by a function that uses the minimum prime divisor of a number and whether it is a good or bad prime. You can improve the array by performing a sequence of actions on a subset of the array. \n\nInput: The input consists of three lines. The first line contains two integers n and m, the size of the array and the number of bad prime numbers. The second line contains n space-separated integers, the elements of the array. The third line contains m space-separated integers, the bad prime numbers. Input is read from standard input.\n\nOutput: Output a single integer, the maximum beauty of the array.\n\nConstraints: The array size and the elements of the array are positive integers. The bad prime numbers are also positive integers greater than or equal to 2. The array elements and the bad prime numbers are at most 10^9.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/402/D", "sample_test_cases": [{"input": "21 1\n4608 864 2592 2304 144 13824 1296 432 576 6912 20736 648 288 72 1728 3456 5184 216 41472 1152 10368\n3\n", "output": "63"}, {"input": "5 1\n1 1 1 1 1\n3\n", "output": "0"}, {"input": "3 1\n2 4 8\n2\n", "output": "-3"}, {"input": "35 1\n20736 2304 73728 1296 1728 216 864 3456 110592 10368 147456 288 9216 2592 331776 663552 1152 144 27648 576 6912 648 82944 4608 36864 72 5184 13824 221184 55296 41472 18432 165888 432 442368\n3\n", "output": "188"}, {"input": "29 1\n55296 10368 6912 165888 20736 331776 36864 41472 1152 221184 1728 2304 18432 82944 73728 147456 576 13824 442368 864 288 5184 663552 110592 4608 3456 2592 27648 9216\n3\n", "output": "185"}, {"input": "3 2\n2 6 8\n2 3\n", "output": "-3"}, {"input": "3 1\n8 4 2\n2\n", "output": "0"}, {"input": "20 1\n13824 256 10368 576 3456 1728 6912 1152 192 64 2304 41472 4608 1536 768 128 384 5184 512 20736\n3\n", "output": "110"}, {"input": "35 1\n5184 10368 20736 3456 2592 73728 6912 27648 165888 147456 221184 36864 663552 18432 442368 41472 9216 1728 72 55296 331776 4608 1152 216 82944 2304 576 144 864 288 13824 432 1296 110592 648\n3\n", "output": "188"}, {"input": "1 1\n2\n3\n", "output": "1"}, {"input": "35 1\n147456 288 165888 55296 442368 864 3456 576 41472 663552 13824 10368 72 6912 5184 1296 4608 73728 82944 1728 27648 110592 144 432 221184 20736 648 331776 2304 2592 9216 36864 216 18432 1152\n3\n", "output": "188"}, {"input": "21 1\n1152 13824 41472 5184 3456 10368 432 6912 864 288 216 4608 1728 648 1296 72 2304 2592 144 20736 576\n3\n", "output": "63"}, {"input": "1 1\n1\n2\n", "output": "0"}, {"input": "1 1\n1\n3\n", "output": "0"}, {"input": "32 1\n2916 108 216 1458 34992 54 18 648 5832 6 36 324 432 104976 11664 17496 13122 4374 1296 72 972 1944 24 52488 486 144 48 12 26244 8748 3888 162\n3\n", "output": "-47"}]}
{"statement": "Task: Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.\n\nInput: The input is a single positive integer n, which represents the upper limit of the range of non-negative integers to consider. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the count of non-negative integers less than or equal to n, that do not have consecutive ones in their binary representation.\n\nConstraints: The input integer n is positive and does not exceed 10^9. \n\nMathematical Concepts: Binary representation, non-negative integers, consecutive ones.\n\nComputer Science Concepts: Standard input, integer data type, conditional statements, loops.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/", "sample_test_cases": [{"input": [1], "output": 2}]}
{"statement": "Task: Given two non-negative integers A and B, each containing at most N digits in base 10 representation, find the expected number of non-zero carries when adding A and B.\n\nInput: The first line of input contains an integer T denoting the number of test cases. Each test case has a single line containing an integer N, denoting the maximum number of digits in A and B. The input is provided through standard input.\n\nOutput: For each test case, output a single line containing a floating-point number, denoting the expected number of non-zero carries when adding A and B. The output is provided through standard output.\n\nConstraints: 1 \u2264 T \u2264 100,000 and 1 \u2264 N \u2264 100,000.\n\nNote that the expected value is calculated by adding up the number of carries in all possible pairs of A and B, and dividing by the total number of pairs. A carry occurs when adding two digits in the same column results in a sum greater than or equal to 10. The expected value is a measure of the average number of carries that occur when adding two N-digit numbers in base 10 representation.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/TAAPLUSB", "sample_test_cases": [{"input": "3\n1\n2\n3", "output": "0.45\n0.945\n1.4445"}, {"input": "3\n1\n2\n5", "output": "0.45\n0.945\n2.444445\n"}, {"input": "3\n1\n2\n6", "output": "0.45\n0.945\n2.9444445\n"}, {"input": "3\n1\n1\n6", "output": "0.45\n0.45\n2.9444445\n"}, {"input": "3\n1\n2\n11", "output": "0.45\n0.945\n5.44444444445\n"}, {"input": "3\n1\n1\n11", "output": "0.45\n0.45\n5.44444444445\n"}, {"input": "3\n1\n0\n11", "output": "0.45\n0.0\n5.44444444445\n"}, {"input": "3\n1\n0\n9", "output": "0.45\n0.0\n4.4444444445\n"}, {"input": "3\n1\n0\n16", "output": "0.45\n0.0\n7.94444444444\n"}, {"input": "3\n0\n0\n16", "output": "0.0\n0.0\n7.94444444444\n"}, {"input": "3\n0\n0\n32", "output": "0.0\n0.0\n15.9444444444\n"}, {"input": "3\n1\n2\n4", "output": "0.45\n0.945\n1.94445\n"}, {"input": "3\n1\n2\n0", "output": "0.45\n0.945\n0.0\n"}, {"input": "3\n1\n2\n7", "output": "0.45\n0.945\n3.44444445\n"}, {"input": "3\n0\n1\n6", "output": "0.0\n0.45\n2.9444445\n"}]}
{"statement": "Task: Given a table of integers with n rows and m columns, and a set of k tasks consisting of subtable indices, determine if the subtable is sorted in non-decreasing order in at least one column.\n\nInput: The input consists of a table of integers, the number of rows and columns, and a set of tasks consisting of subtable indices. The table is given as n rows of m integers. The number of rows and columns are positive integers, and the product of these two integers is at most 100,000. The number of tasks is a positive integer k, and each task consists of two integers l and r, where 1 \u2264 l \u2264 r \u2264 n. Input is received from standard input.\n\nOutput: The output is \"Yes\" if the subtable is sorted in non-decreasing order in at least one column, and \"No\" otherwise. The output is printed to standard output.\n\nConstraints: The number of rows and columns are positive integers, and the product of these two integers is at most 100,000. The number of tasks is a positive integer k, and each task consists of two integers l and r, where 1 \u2264 l \u2264 r \u2264 n. The integers in the table are positive integers and are at most 10^9.", "editorial": "", "tag": "['Sorting', 'Amortized analysis', 'Implementation', 'Greedy algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/777/C", "sample_test_cases": [{"input": "5 4\n1 2 3 5\n3 1 3 2\n4 5 2 3\n5 5 3 2\n4 4 3 4\n6\n1 1\n2 5\n4 5\n3 5\n1 3\n1 5\n", "output": "Yes\nNo\nYes\nYes\nYes\nNo\n"}, {"input": "1 1\n1\n1\n1 1\n", "output": "Yes\n"}, {"input": "10 1\n523130301\n127101624\n15573616\n703140639\n628818570\n957494759\n161270109\n386865653\n67832626\n53360557\n17\n4 5\n4 7\n8 8\n9 9\n3 9\n8 10\n8 9\n7 9\n4 5\n2 9\n4 6\n2 4\n2 6\n4 6\n7 9\n2 4\n8 10\n", "output": "No\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"}, {"input": "15 1\n556231456\n573340933\n626155933\n397229387\n10255952\n376567394\n906742013\n269437009\n31298788\n712285290\n620239975\n379221898\n229140718\n95080095\n997123854\n18\n5 15\n1 12\n4 10\n2 15\n12 15\n15 15\n2 2\n15 15\n15 15\n13 13\n10 14\n3 6\n14 15\n3 6\n4 4\n14 15\n12 14\n1 9\n", "output": "No\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\n"}, {"input": "11 1\n501465490\n366941771\n415080944\n385243536\n445132523\n697044413\n894369800\n812743722\n23684788\n466526046\n953916313\n45\n2 4\n8 9\n7 7\n4 9\n2 9\n2 11\n4 4\n5 7\n1 2\n5 10\n4 6\n1 7\n4 4\n1 6\n4 7\n10 11\n1 8\n6 11\n8 8\n8 10\n1 1\n5 10\n9 10\n6 9\n6 11\n1 1\n9 9\n5 11\n1 2\n9 11\n2 6\n3 7\n11 11\n6 7\n11 11\n7 8\n5 8\n11 11\n5 6\n4 5\n2 6\n5 10\n9 9\n1 1\n1 1\n", "output": "No\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\n"}, {"input": "10 1\n523130301\n127101624\n15573616\n703140639\n628818570\n957494759\n161270109\n386865653\n67832626\n53360557\n17\n4 5\n4 7\n8 8\n9 9\n3 9\n8 10\n8 9\n7 9\n4 5\n2 9\n4 6\n2 4\n2 6\n4 6\n7 9\n2 4\n8 10\n", "output": "No\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"}, {"input": "11 1\n501465490\n366941771\n415080944\n385243536\n445132523\n697044413\n894369800\n812743722\n23684788\n466526046\n953916313\n45\n2 4\n8 9\n7 7\n4 9\n2 9\n2 11\n4 4\n5 7\n1 2\n5 10\n4 6\n1 7\n4 4\n1 6\n4 7\n10 11\n1 8\n6 11\n8 8\n8 10\n1 1\n5 10\n9 10\n6 9\n6 11\n1 1\n9 9\n5 11\n1 2\n9 11\n2 6\n3 7\n11 11\n6 7\n11 11\n7 8\n5 8\n11 11\n5 6\n4 5\n2 6\n5 10\n9 9\n1 1\n1 1\n", "output": "No\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\n"}, {"input": "1 1\n1\n1\n1 1\n", "output": "Yes\n"}, {"input": "15 1\n556231456\n573340933\n626155933\n397229387\n10255952\n376567394\n906742013\n269437009\n31298788\n712285290\n620239975\n379221898\n229140718\n95080095\n997123854\n18\n5 15\n1 12\n4 10\n2 15\n12 15\n15 15\n2 2\n15 15\n15 15\n13 13\n10 14\n3 6\n14 15\n3 6\n4 4\n14 15\n12 14\n1 9\n", "output": "No\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\n"}, {"input": "10 1\n870535974\n127101624\n15573616\n703140639\n628818570\n957494759\n161270109\n386865653\n67832626\n53360557\n17\n4 5\n4 7\n8 8\n9 9\n3 9\n8 10\n8 9\n7 9\n4 5\n2 9\n4 6\n2 4\n2 6\n4 6\n7 9\n2 4\n8 10\n", "output": "No\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"}, {"input": "11 1\n501465490\n366941771\n415080944\n385243536\n445132523\n697044413\n894369800\n812743722\n23684788\n466526046\n953916313\n45\n2 4\n8 9\n7 7\n4 9\n2 9\n2 11\n4 4\n5 7\n1 2\n5 10\n5 6\n1 7\n4 4\n1 6\n4 7\n10 11\n1 8\n6 11\n8 8\n8 10\n1 1\n5 10\n9 10\n6 9\n6 11\n1 1\n9 9\n5 11\n1 2\n9 11\n2 6\n3 7\n11 11\n6 7\n11 11\n7 8\n5 8\n11 11\n5 6\n4 5\n2 6\n5 10\n9 9\n1 1\n1 1\n", "output": "No\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\n"}, {"input": "15 1\n556231456\n573340933\n626155933\n397229387\n10255952\n376567394\n906742013\n269437009\n31298788\n970882498\n620239975\n379221898\n229140718\n95080095\n997123854\n18\n5 15\n1 12\n4 10\n2 15\n12 15\n15 15\n2 2\n15 15\n15 15\n13 13\n10 14\n3 6\n14 15\n3 6\n4 4\n14 15\n12 14\n1 9\n", "output": "No\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\n"}, {"input": "5 4\n1 2 3 5\n3 1 3 2\n4 5 2 3\n5 5 3 2\n4 4 4 4\n6\n1 1\n2 5\n4 5\n3 5\n1 3\n1 5\n", "output": "Yes\nNo\nYes\nYes\nYes\nNo\n"}, {"input": "11 1\n501465490\n366941771\n415080944\n385243536\n445132523\n697044413\n894369800\n812743722\n23684788\n466526046\n953916313\n45\n2 4\n8 9\n7 7\n4 9\n2 9\n2 11\n4 4\n5 7\n1 2\n5 10\n5 6\n1 7\n4 4\n1 6\n4 7\n10 11\n1 8\n6 11\n8 8\n8 10\n1 1\n5 10\n9 10\n6 9\n6 11\n1 1\n9 9\n5 11\n1 2\n9 11\n2 6\n4 7\n11 11\n6 7\n11 11\n7 8\n5 8\n11 11\n5 6\n4 5\n2 6\n5 10\n9 9\n1 1\n1 1\n", "output": "No\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\n"}, {"input": "11 1\n501465490\n366941771\n415080944\n385243536\n445132523\n697044413\n894369800\n812743722\n23684788\n466526046\n953916313\n45\n2 4\n8 9\n7 7\n4 9\n2 9\n2 11\n4 4\n5 7\n1 2\n5 10\n5 6\n1 7\n4 4\n1 6\n2 7\n10 11\n1 8\n6 11\n8 8\n8 10\n1 1\n5 10\n9 10\n6 9\n6 11\n1 1\n9 9\n5 11\n1 2\n9 11\n2 6\n4 7\n11 11\n6 7\n11 11\n7 8\n5 8\n11 11\n5 6\n4 5\n2 6\n5 10\n9 9\n1 1\n1 1\n", "output": "No\nNo\nYes\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nNo\nNo\nYes\nNo\nYes\nNo\nYes\nNo\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\n"}]}
{"statement": "Task: Given a directed acyclic graph with n vertices and m edges, find the maximum number of vertices that can be visited starting from vertex 1 and ending at vertex n within a time limit of T. Each edge has a non-negative integer weight representing the time required to traverse it. \n\nInput: The input consists of three integers n, m, and T, followed by m lines that describe the edges of the graph. Each line contains three integers u, v, and t, meaning that there is a directed edge from vertex u to vertex v with weight t. The input arrives from standard input.\n\nOutput: The output should consist of two lines. The first line should contain a single integer k, which is the maximum number of vertices that can be visited starting from vertex 1 and ending at vertex n within a time limit of T. The second line should contain k distinct integers, which are the indices of vertices that can be visited on the route from vertex 1 to vertex n, in the order of encountering them.\n\nConstraints: 2 \u2264 n \u2264 5000, 1 \u2264 m \u2264 5000, 1 \u2264 T \u2264 10^9, 1 \u2264 u, v \u2264 n, u \u2260 v, and 1 \u2264 t \u2264 10^9. It is guaranteed that there is at most one edge between each pair of vertices, and that there is a directed path from vertex 1 to vertex n that can be traversed within T time units.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/721/C", "sample_test_cases": [{"input": "4 3 13\n1 2 5\n2 3 7\n2 4 8\n", "output": "3\n1 2 4 \n"}, {"input": "6 6 7\n1 2 2\n1 3 3\n3 6 3\n2 4 2\n4 6 2\n6 5 1\n", "output": "4\n1 2 4 6 \n"}, {"input": "5 5 6\n1 3 3\n3 5 3\n1 2 2\n2 4 3\n4 5 2\n", "output": "3\n1 3 5 \n"}, {"input": "10 10 100\n1 4 1\n6 4 1\n9 3 2\n2 7 2\n5 8 11\n1 2 8\n4 10 10\n8 9 2\n7 5 8\n3 6 4\n", "output": "10\n1 2 7 5 8 9 3 6 4 10 \n"}, {"input": "10 10 56\n4 8 5\n9 3 11\n2 5 5\n5 9 9\n3 6 1\n1 4 9\n8 7 7\n6 10 1\n1 6 12\n7 2 9\n", "output": "3\n1 6 10 \n"}, {"input": "4 4 3\n1 2 1\n2 3 1\n3 4 1\n1 3 1\n", "output": "4\n1 2 3 4 \n"}, {"input": "4 4 2\n1 2 1\n2 3 1\n3 4 1\n1 3 1\n", "output": "3\n1 3 4 \n"}, {"input": "10 45 8\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n2 3 1\n2 4 1\n2 5 1\n2 6 1\n2 7 1\n2 8 1\n2 9 1\n2 10 1\n3 4 1\n3 5 1\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n4 5 1\n4 6 1\n4 7 1\n4 8 1\n4 9 1\n4 10 1\n5 6 1\n5 7 1\n5 8 1\n5 9 1\n5 10 1\n6 7 1\n6 8 1\n6 9 1\n6 10 1\n7 8 1\n7 9 1\n7 10 1\n8 9 1\n8 10 1\n9 10 1\n", "output": "9\n1 2 3 4 5 6 7 8 10 \n"}, {"input": "2 1 1\n1 2 1\n", "output": "2\n1 2 \n"}, {"input": "12 12 8\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 3\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "output": "6\n1 9 10 11 8 12 \n"}, {"input": "12 12 5\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 3\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "output": "6\n1 9 10 11 8 12 \n"}, {"input": "12 12 4\n1 2 2\n2 3 5\n3 12 1\n4 5 1000000000\n1 7 1\n7 6 2\n6 12 1\n1 9 1\n9 10 1\n10 11 1\n11 8 1\n8 12 1\n", "output": "4\n1 7 6 12 \n"}, {"input": "11 11 9\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "output": "8\n1 4 5 6 3 7 8 11 \n"}, {"input": "11 11 7\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "output": "8\n1 4 5 6 3 7 8 11 \n"}, {"input": "11 11 6\n1 2 1\n2 3 1\n1 4 1\n4 5 1\n5 6 1\n6 3 1\n3 7 1\n7 8 1\n8 11 1\n11 10 1\n10 9 1\n", "output": "6\n1 2 3 7 8 11 \n"}]}
{"statement": "Task: Given a grid of size N (1-indexed) consisting of N \u00d7 N rooms, where each room contains diamonds equal to the absolute difference between the sum of even digits and sum of odd digits in its room number, find the total number of diamonds present in the grid.\n\nInput: The input consists of T test cases, where each test case contains a single integer N representing the size of the grid.\n\nOutput: For each test case, print the total number of diamonds present in the grid on a separate line.\n\nConstraints: 1 \u2264 T \u2264 10^5, 1 \u2264 N \u2264 10^6.\n\nExplanation: A room number is equal to the sum of its row and column numbers. The number of diamonds present in a room is equal to the absolute difference between the sum of even digits and sum of odd digits in its room number. The task is to find the total number of diamonds present in the grid. The input is received from standard input. The output should contain the total number of diamonds present in the grid for each test case, printed on a separate line. The constraints are 1 \u2264 T \u2264 10^5 and 1 \u2264 N \u2264 10^6.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/VK18", "sample_test_cases": [{"input": "3\n1\n2\n3", "output": "2\n12\n36"}]}
{"statement": "Task: Given a row of balls on a table and a set of balls in hand, find the minimum number of balls that need to be inserted into the row to remove all the balls. Balls can be inserted at any position and if there are three or more balls of the same color touching, they are removed. If it is not possible to remove all the balls, output -1.\n\nInput: The input consists of two strings: \"board\" representing the initial row of balls on the table and \"hand\" representing the balls in hand. The strings contain characters 'R','Y','B','G','W'. The input is provided through standard input.\n\nOutput: The output is an integer representing the minimal number of balls that need to be inserted to remove all the balls on the table. If it is not possible to remove all the balls, the output is -1.\n\nConstraints: The length of the \"board\" string is at most 20 and the length of the \"hand\" string is at most 5. The initial row of balls on the table won't have any 3 or more consecutive balls with the same color.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/zuma-game/", "sample_test_cases": [{"input": ["\"WRRBBW\"", "\"RB\""], "output": -1}]}
{"statement": "Task: Given a string $s$ of length $n$ consisting of characters 'R', 'G', and 'B', and an integer $k$, find the minimum number of characters that need to be changed in $s$ so that a substring of length $k$ can be found in $s$ and also in an infinite string of \"RGBRGBRGB...\".\n\nInput: The input consists of multiple queries. The first line of each query contains two integers, $n$ and $k$. The second line of each query contains a string $s$ of length $n$ consisting of characters 'R', 'G', and 'B'. The sum of $n$ over all queries does not exceed $2 \\cdot 10^5$. Input is read from standard input.\n\nOutput: For each query, output a single integer representing the minimum number of characters that need to be changed in $s$ so that a substring of length $k$ can be found in $s$ and also in an infinite string of \"RGBRGBRGB...\". Output is written to standard output.\n\nConstraints: $1 \\leq q \\leq 2 \\cdot 10^5$, $1 \\leq k \\leq n \\leq 2 \\cdot 10^5$, $\\sum n \\leq 2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Amortized analysis', 'Data structures', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1196/D2", "sample_test_cases": [{"input": "3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n", "output": "1\n0\n3\n"}, {"input": "3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBRBR\n", "output": "1\n0\n2\n"}, {"input": "3\n5 3\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n", "output": "1\n0\n3\n"}, {"input": "3\n5 2\nBGGGG\n5 4\nRBRGR\n5 5\nBBRBR\n", "output": "1\n1\n2\n"}, {"input": "3\n5 3\nBGGGG\n5 3\nRBRGR\n5 2\nBBBRR\n", "output": "1\n0\n0\n"}, {"input": "3\n5 2\nBGGGG\n5 4\nRBRGR\n5 5\nBRBRB\n", "output": "1\n1\n3\n"}, {"input": "3\n5 1\nBGGGG\n5 2\nRBRGR\n5 5\nBBRBR\n", "output": "0\n0\n2\n"}, {"input": "3\n5 1\nBGGGG\n5 4\nRBRGR\n5 5\nBBRBR\n", "output": "0\n1\n2\n"}, {"input": "3\n5 3\nBGGGG\n5 5\nRBRGR\n5 5\nBBBRR\n", "output": "1\n2\n3\n"}, {"input": "3\n5 4\nBGGGG\n5 3\nRBRGR\n5 5\nBRBRB\n", "output": "2\n0\n3\n"}, {"input": "3\n5 4\nBGGGG\n5 1\nRBRGR\n5 2\nBBBRR\n", "output": "2\n0\n0\n"}, {"input": "3\n5 2\nGGGGB\n5 4\nRGRBR\n5 5\nBRBRB\n", "output": "0\n2\n3\n"}, {"input": "3\n5 2\nBGGGG\n5 4\nRGRBR\n5 5\nRBRBB\n", "output": "1\n2\n2\n"}, {"input": "3\n5 2\nGGGGB\n5 5\nRGRBR\n5 5\nBRBRB\n", "output": "0\n3\n3\n"}, {"input": "3\n5 4\nBGGGG\n5 4\nRBRGR\n5 5\nBBRBR\n", "output": "2\n1\n2\n"}]}
{"statement": "Task: Given a string s of length n and an array a of length 26, where a[i] represents the maximum number of times the i-th letter of the English alphabet can appear consecutively in any substring of s, find the number of ways to split s into non-overlapping substrings such that each substring satisfies the given condition, the sum of their lengths is n, and they don't overlap. Also, find the length of the longest substring over all the ways and the minimum number of substrings over all the ways. Output the results modulo 10^9 + 7.\n\nInput: The input consists of three lines. The first line contains an integer n, the length of the message. The second line contains the message s of length n. The third line contains 26 integers, a[1] to a[26], which represent the maximum number of times each character in the English alphabet can appear consecutively in any substring of s.\n\nOutput: The output should be printed in three lines. The first line should contain the number of ways to split the message into substrings that fulfill the conditions mentioned in the problem, modulo 10^9 + 7. The second line should contain the length of the longest substring over all the ways. The third line should contain the minimum number of substrings over all the ways.\n\nConstraints: 1 \u2264 n \u2264 10^3, 1 \u2264 a[i] \u2264 10^3, where 1 \u2264 i \u2264 26.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Complete search', 'String algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/766/C", "sample_test_cases": [{"input": "3\naab\n2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "3\n2\n2\n"}, {"input": "10\nabcdeabcde\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "401\n4\n3\n"}, {"input": "10\naaaaaaaaaa\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "1\n1\n10\n"}, {"input": "55\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n", "output": "383381198\n55\n1\n"}, {"input": "99\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n96 12 22 33 50 96 95 25 34 40 61 37 54 12 46 84 62 17 35 38 76 47 85 85 9 61\n", "output": "494092815\n96\n2\n"}, {"input": "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 3 3 3\n", "output": "750728890\n4\n27\n"}, {"input": "8\naaaaaaab\n8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "64\n7\n2\n"}, {"input": "10\naabaaaaaba\n10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "32\n5\n5\n"}, {"input": "10\naabaabaaba\n3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "8\n2\n7\n"}, {"input": "10\naabaabaaba\n10 9 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "511\n9\n2\n"}, {"input": "100\nygdbmqpyofbcoqomztbjkutjwkkxkkmoyjrqteikqxrkcgqcfrbujupiegumelsmqkdadtcfvyoywuhqthqlioxcveskifuormfo\n94 20 86 40 16 38 63 32 36 95 7 32 68 21 68 67 70 23 24 78 45 80 30 35 9 4\n", "output": "962845356\n16\n13\n"}, {"input": "99\nnupctndqkhgouriwrrbhxwynnkclwtfrraontjuvjdumzigxyandxrsrmosvtbtropggtlkqjmrffgnacsafbulvbuxthjqhtxj\n61 1 47 67 64 66 44 39 55 23 68 94 47 2 50 26 92 31 93 6 92 67 41 12 15 91\n", "output": "61873945\n12\n25\n"}, {"input": "1\na\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "1\n1\n1\n"}, {"input": "7\nzzzxxyy\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2\n", "output": "21\n2\n4\n"}, {"input": "7\nbaaaccc\n6 4 6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "60\n6\n2\n"}]}
{"statement": "Task: Given a number line with n beacons, each with a position and power level, activate the beacons one by one from right to left. When a beacon is activated, it destroys all beacons to its left within its power range. A new beacon can be added to the right of all existing beacons with any position and power level, such that the least possible number of beacons are destroyed. Find the minimum number of beacons that could be destroyed.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 100,000) representing the initial number of beacons, followed by n lines each containing two integers a_i and b_i (0 \u2264 a_i \u2264 1,000,000, 1 \u2264 b_i \u2264 1,000,000) representing the position and power level of the i-th beacon respectively. Input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of beacons that could be destroyed if exactly one beacon is added.\n\nConstraints: No two beacons will have the same position, so a_i \u2260 a_j if i \u2260 j.", "editorial": "", "tag": "['Dynamic programming', 'Sorting']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/607/A", "sample_test_cases": [{"input": "4\n1 9\n3 1\n6 1\n7 4\n", "output": "1\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n", "output": "3\n"}, {"input": "1\n0 1\n", "output": "0\n"}, {"input": "1\n0 1000000\n", "output": "0\n"}, {"input": "1\n1000000 1000000\n", "output": "0\n"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7\n", "output": "4\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 10\n", "output": "2\n"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 10\n", "output": "2"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4"}, {"input": "1\n0 1000000\n", "output": "0"}, {"input": "1\n1000000 1000000\n", "output": "0"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7\n", "output": "4"}, {"input": "1\n0 1\n", "output": "0"}, {"input": "11\n110 61\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}]}
{"statement": "Task: Given an array of n integers and m queries, each query consisting of two integers l and r, determine if the subsegment of the array defined by l and r is a ladder. A ladder is a sequence of integers that first doesn't decrease, then doesn't increase.\n\nInput: The input consists of two lines. The first line contains two integers n and m, and the second line contains the sequence of n integers. The following m lines contain the description of the queries, each consisting of two integers l and r. The input is provided through standard input.\n\nOutput: The output consists of m lines. For each query, print \"Yes\" if the corresponding subsegment is a ladder, and \"No\" otherwise.\n\nConstraints: The integers n and m are both between 1 and 10^5, and each element of the array is between 1 and 10^9. The integers l and r in each query are such that 1 \u2264 l \u2264 r \u2264 n.\n\nMathematical Concepts: Array, Subsegment, Ladder, Non-decreasing sequence, Non-increasing sequence, Integers.\n\nComputer Science Concepts: Input/Output, Standard Input, Constraints, Loops, If-else statements.", "editorial": "", "tag": "['Dynamic programming', 'Amortized analysis', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/279/C", "sample_test_cases": [{"input": "8 6\n1 2 1 3 3 5 2 1\n1 3\n2 3\n2 4\n8 8\n1 4\n5 8\n", "output": "Yes\nYes\nNo\nYes\nNo\nYes\n"}, {"input": "1 1\n6\n1 1\n", "output": "Yes\n"}, {"input": "2 5\n1 1\n1 2\n2 2\n2 2\n1 2\n1 2\n", "output": "Yes\nYes\nYes\nYes\nYes\n"}, {"input": "10 10\n4 7 2 6 4 8 1 2 1 9\n6 10\n1 9\n9 9\n2 8\n9 9\n1 1\n8 8\n4 8\n8 8\n7 7\n", "output": "No\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nYes\n"}, {"input": "7 5\n13 13 16 12 16 3 19\n2 7\n3 4\n7 7\n1 2\n4 7\n", "output": "No\nYes\nYes\nYes\nNo\n"}, {"input": "13 6\n2 6 1 3 5 2 2 1 6 4 2 5 2\n10 13\n4 10\n4 11\n3 5\n9 13\n3 13\n", "output": "No\nNo\nNo\nYes\nNo\nNo\n"}, {"input": "20 20\n17 11 7 4 1 17 7 20 12 12 15 14 7 12 5 13 9 16 7 19\n9 16\n11 11\n18 19\n1 10\n14 19\n6 13\n5 16\n1 17\n5 15\n5 5\n1 13\n20 20\n20 20\n3 18\n16 20\n16 18\n17 18\n14 20\n13 14\n14 15\n", "output": "No\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nNo\nYes\nYes\n"}, {"input": "100 10\n53 72 2 58 6 29 65 7 43 9 77 10 58 25 49 95 88 11 7 36 51 25 78 20 15 2 69 76 1 66 17 4 91 66 50 66 69 94 74 31 19 96 35 84 83 15 33 73 39 73 29 53 9 47 3 19 4 16 85 6 49 6 57 70 96 19 66 63 86 61 27 21 33 82 13 98 59 48 85 1 13 65 28 34 93 16 88 32 60 50 33 37 36 57 97 28 18 23 30 70\n25 43\n20 70\n13 51\n64 66\n1 60\n17 86\n100 100\n94 98\n51 66\n18 92\n", "output": "No\nNo\nNo\nYes\nNo\nNo\nYes\nNo\nNo\nNo\n"}, {"input": "7 5\n13 13 16 12 16 3 19\n2 7\n3 4\n7 7\n1 2\n4 7\n", "output": "No\nYes\nYes\nYes\nNo\n"}, {"input": "1 1\n6\n1 1\n", "output": "Yes\n"}, {"input": "10 10\n4 7 2 6 4 8 1 2 1 9\n6 10\n1 9\n9 9\n2 8\n9 9\n1 1\n8 8\n4 8\n8 8\n7 7\n", "output": "No\nNo\nYes\nNo\nYes\nYes\nYes\nNo\nYes\nYes\n"}, {"input": "13 6\n2 6 1 3 5 2 2 1 6 4 2 5 2\n10 13\n4 10\n4 11\n3 5\n9 13\n3 13\n", "output": "No\nNo\nNo\nYes\nNo\nNo\n"}, {"input": "20 20\n17 11 7 4 1 17 7 20 12 12 15 14 7 12 5 13 9 16 7 19\n9 16\n11 11\n18 19\n1 10\n14 19\n6 13\n5 16\n1 17\n5 15\n5 5\n1 13\n20 20\n20 20\n3 18\n16 20\n16 18\n17 18\n14 20\n13 14\n14 15\n", "output": "No\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nNo\nYes\nNo\nYes\nYes\n"}, {"input": "2 5\n1 1\n1 2\n2 2\n2 2\n1 2\n1 2\n", "output": "Yes\nYes\nYes\nYes\nYes\n"}, {"input": "100 10\n53 72 2 58 6 29 65 7 43 9 77 10 58 25 49 95 88 11 7 36 51 25 78 20 15 2 69 76 1 66 17 4 91 66 50 66 69 94 74 31 19 96 35 84 83 15 33 73 39 73 29 53 9 47 3 19 4 16 85 6 49 6 57 70 96 19 66 63 86 61 27 21 33 82 13 98 59 48 85 1 13 65 28 34 93 16 88 32 60 50 33 37 36 57 97 28 18 23 30 70\n25 43\n20 70\n13 51\n64 66\n1 60\n17 86\n100 100\n94 98\n51 66\n18 92\n", "output": "No\nNo\nNo\nYes\nNo\nNo\nYes\nNo\nNo\nNo\n"}]}
{"statement": "Task: Given an integer N, count the number of Positive Invertible Integer Matrices that have a trace of N and a positive determinant. \n\nInput: The first line of the input contains an integer T denoting the number of test cases. Each test case consists of a single integer N, representing the trace of the matrix. The input is read from standard input.\n\nOutput: For each test case, output a single line containing the number of Positive Invertible Integer Matrices that have a trace of N and a positive determinant.\n\nConstraints: 1 \u2264 T \u2264 50 and 3 \u2264 N \u2264 2500. \n\nMathematical Concepts: Positive Invertible Integer Matrices, trace of a matrix, determinant of a matrix, invertible matrices, 2x2 matrices, positive integers.\n\nComputer Science Concepts: Standard input, input constraints.", "editorial": "", "tag": "['Number theory', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/CNPIIM", "sample_test_cases": [{"input": "1\n3", "output": "2"}]}
{"statement": "Task: Given two strings A and B, find the maximal similarity score over all pairs of substrings. The similarity score is defined as 4 times the length of the longest common subsequence of two strings minus the sum of the lengths of the two strings.\n\nInput: The input consists of two strings A and B, each of length n and m respectively. The length of strings A and B is at most 5000. The input is provided through standard input.\n\nOutput: The output is a single integer representing the maximal similarity score over all pairs of substrings.\n\nConstraints: $1 \\leq n, m \\leq 5000$.\n\nDefinitions:\n- A string is a sequence of characters.\n- A substring of a string is a contiguous sequence of characters within that string.\n- The longest common subsequence (LCS) of two strings is the longest subsequence that is present in both strings.\n- The similarity score of two strings C and D is defined as 4 times the length of their LCS minus the sum of their lengths.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1446/B", "sample_test_cases": [{"input": "11 18\naaaagaaxaxa\naiaiiaaaaiaaiaaaaa\n", "output": "11"}, {"input": "12 17\nqqqqqqgqqgqq\nqqqgqqqggqqqlqqqq\n", "output": "18"}, {"input": "6 9\nvvvkvv\nvgkkvvvgg\n", "output": "6"}, {"input": "153 205\nssasssszzessssseazzssssassaskasassesssseszzazzaassassslsasasszszeaeeaaszassaszseaaasasezaezeaskzkakzksasssssgsszszzsasazssssasezzseesssssszzezsasaeaassak\nkzstnaszaasasaksaszssssseasssaaesassaazassakessassszzsegsszazzzszsslezazazasszasszsaseaazkssszzazzezszsassasessasozzsaeaksasesssssssaaszsesaaszzakzsasasssssaskssszesalsszsgssaazszakasazsaksssasszaazssgssas\n", "output": "104"}, {"input": "9 19\nyqyvovyqy\nvvyvvyyyvyyyyyqjvvy\n", "output": "8"}, {"input": "15 8\ntdgteddbgtbtgdg\ndtgggdgg\n", "output": "6"}, {"input": "18 10\npcgucpcccuccccuccc\ncccucupccp\n", "output": "12"}, {"input": "13 6\nooveooooovooo\nooovso\n", "output": "9"}, {"input": "7 17\nxggtxtl\nzatlltrgxltrxtxqa\n", "output": "5"}, {"input": "175 190\nqnnnnnnnnnnrnnnnrnrnnnnnrnnnnrqnnnnnnannnnnnnrnrrnrnnnnnrnnrnnnnnnrnrnnnnnrnnnannnrrnnnnrnnnnnnnnnnnrnannnnnrnnnnrnnnnrnnnnnnrnarnnnnnnnnanrnnnnnnnrnnrrnrnrrnnnnnrnnnnnrnnnnnn\nnnnnnrnnnnrnnnnnrnnnnnnrnnqnnnnnnrnnnnnnnrnnrnnnnrnqnannnnnnnannnnnnnrnrnnnrnnnnrnnnnnnnrrnqnnnnnnnnnnnrnrnnrannnnrnnnnrnrnnnnnnnnrnnannnnannnnnrnrnanrrrnnnnnrnnnrrrnnnnnnnrqnnnnnrnnnnnnnnrn\n", "output": "257"}, {"input": "18 12\nyjyjjyeiqjiiqqjjie\njjjjjjjjjqjj\n", "output": "6"}, {"input": "12 18\nlollloolollo\nlolllalallloallaoa\n", "output": "12"}, {"input": "7 11\nssqsqqq\nsqvqqqqssrr\n", "output": "8"}, {"input": "20 8\ncgggccgglcgggccccccy\nggccglcl\n", "output": "13"}, {"input": "18 6\nwwjwwwwjwwwjwwwojw\nwwwoww\n", "output": "9"}]}
{"statement": "Task: Given a restaurant with k tables and n booking requests, each request consisting of a group size and a total amount of money they will spend, determine which requests to accept and which to decline to maximize the total amount of money earned while ensuring that each group can be seated at a table with enough capacity.\n\nInput: The input consists of n booking requests, each containing two integers: the size of the group and the total amount of money they will spend, followed by the number of tables k and the maximum capacity of each table.\n\nOutput: The output should contain two integers: the number of accepted requests and the total amount of money earned from these requests. This should be followed by m lines, each containing two space-separated integers: the number of the accepted request and the number of the table to seat the group.\n\nConstraints: 1 \u2264 n \u2264 1000, 1 \u2264 ci, pi \u2264 1000, 1 \u2264 k \u2264 1000, 1 \u2264 ri \u2264 1000.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Implementation', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/416/C", "sample_test_cases": [{"input": "3\n10 50\n2 100\n5 30\n3\n4 6 9\n", "output": "2 130\n2 1\n3 2\n"}, {"input": "1\n1 1\n1\n1\n", "output": "1 1\n1 1\n"}, {"input": "1\n2 1\n1\n1\n", "output": "0 0\n"}, {"input": "2\n10 10\n5 5\n1\n5\n", "output": "1 5\n2 1\n"}, {"input": "2\n10 10\n5 5\n1\n10\n", "output": "1 10\n1 1\n"}, {"input": "2\n2 100\n10 10\n1\n10\n", "output": "1 100\n1 1\n"}, {"input": "2\n10 100\n5 90\n2\n15 20\n", "output": "2 190\n1 1\n2 2\n"}, {"input": "3\n10 10\n3 5\n5 8\n3\n3 4 10\n", "output": "2 15\n1 3\n2 1\n"}, {"input": "10\n739 307\n523 658\n700 143\n373 577\n120 433\n353 833\n665 516\n988 101\n817 604\n800 551\n10\n431 425 227 147 153 170 954 757 222 759\n", "output": "6 3621\n6 2\n2 8\n9 7\n4 1\n7 10\n5 4\n"}, {"input": "9\n216 860\n299 720\n688 831\n555 733\n863 873\n594 923\n583 839\n738 824\n57 327\n10\n492 578 452 808 492 163 670 31 267 627\n", "output": "7 5233\n6 10\n1 9\n7 7\n3 4\n4 2\n2 3\n9 6\n"}, {"input": "3\n694 606\n76 973\n676 110\n5\n592 737 313 903 13\n", "output": "3 1689\n2 3\n1 2\n3 4\n"}, {"input": "7\n172 864\n853 523\n368 989\n920 452\n351 456\n269 104\n313 677\n9\n165 47 259 51 693 941 471 871 206\n", "output": "5 3509\n3 7\n1 9\n7 5\n2 8\n5 6\n"}, {"input": "1\n545 609\n4\n584 822 973 652\n", "output": "1 609\n1 1\n"}, {"input": "9\n23 163\n895 838\n344 444\n284 763\n942 39\n431 92\n147 515\n59 505\n940 999\n8\n382 497 297 125 624 212 851 859\n", "output": "6 2482\n4 3\n7 6\n8 4\n3 1\n1 2\n6 5\n"}, {"input": "3\n500 613\n671 899\n628 131\n10\n622 467 479 982 886 968 326 64 228 321\n", "output": "3 1643\n2 5\n1 1\n3 6\n"}]}
{"statement": "Task: Given n grams of dough and m different stuffing types, each with a certain amount of stuffing ai, amount of stuffing bi required to cook a bun, amount of dough ci required to cook a bun with the i-th stuffing, and price di at which the bun can be sold, find the maximum profit Lavrenty can earn by making buns with different stuffings or without any stuffing, given that Lavrenty can make any number of buns with different stuffings or without it unless he runs out of dough and the stuffings.\n\nInput: The input consists of five lines. The first line contains four integers n, m, c0, and d0. The following m lines contain four integers each, representing the amount of ai grams left of the i-th stuffing, the amount of bi grams of stuffing i required to cook a bun, the amount of ci grams of dough required to cook a bun with the i-th stuffing, and the price di at which the bun can be sold. The input is provided through standard input.\n\nOutput: The output is a single integer representing the maximum number of tugriks Lavrenty can earn.\n\nConstraints: 1 \u2264 n \u2264 1000, 1 \u2264 m \u2264 10, 1 \u2264 c0, d0 \u2264 100, and 1 \u2264 ai, bi, ci, di \u2264 100.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/106/C", "sample_test_cases": [{"input": "2 1 2 1\n1 2 1 1\n", "output": "1"}, {"input": "100 5 8 80\n25 8 2 70\n27 6 7 30\n26 1 6 5\n7 1 1 86\n18 8 4 54\n", "output": "1670"}, {"input": "1000 3 67 88\n90 86 66 17\n97 38 63 17\n55 78 39 51\n", "output": "1232"}, {"input": "1000 10 1 87\n100 1 1 38\n100 1 1 45\n100 1 1 73\n100 1 1 89\n100 1 1 38\n100 1 1 13\n100 1 1 93\n100 1 1 89\n100 1 1 71\n100 1 1 29\n", "output": "88000"}, {"input": "1000 10 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n100 1 1 1\n", "output": "1000"}, {"input": "1000 10 51 56\n2 62 82 65\n37 90 87 97\n11 94 47 95\n49 24 97 24\n33 38 40 31\n27 15 17 66\n91 80 34 71\n60 93 42 94\n9 35 73 68\n93 65 83 58\n", "output": "1145"}, {"input": "1000 10 1 53\n63 1 1 58\n58 1 2 28\n100 1 1 25\n61 1 1 90\n96 2 2 50\n19 2 1 90\n7 2 1 30\n90 1 2 5\n34 2 1 12\n3 2 1 96\n", "output": "55948"}, {"input": "1000 2 95 56\n58 54 66 61\n61 14 67 65\n", "output": "713"}, {"input": "300 4 100 2\n10 1 24 5\n10 1 25 6\n10 1 26 7\n10 1 27 8\n", "output": "87"}, {"input": "1000 10 67 55\n10 21 31 19\n95 29 53 1\n55 53 19 18\n26 88 19 94\n31 1 45 50\n70 38 33 93\n2 12 7 95\n54 37 81 31\n65 32 63 16\n93 66 98 38\n", "output": "1161"}, {"input": "10 2 5 1\n100 1 2 5\n100 1 3 8\n", "output": "26"}, {"input": "8 2 10 10\n5 5 5 15\n50 5 4 8\n", "output": "16"}, {"input": "1000 10 37 38\n65 27 78 14\n16 70 78 66\n93 86 91 43\n95 6 72 86\n72 59 94 36\n66 58 96 40\n41 72 64 4\n26 47 69 13\n85 2 52 15\n34 62 16 79\n", "output": "1156"}, {"input": "1000 10 1 65\n77 1 1 36\n74 1 1 41\n96 1 1 38\n48 1 1 35\n1 1 1 54\n42 1 1 67\n26 1 1 23\n43 1 1 89\n82 1 1 7\n45 1 1 63\n", "output": "66116"}, {"input": "1000 9 55 28\n38 74 22 49\n9 74 83 85\n63 66 79 19\n25 32 17 20\n73 62 20 47\n19 27 53 58\n71 80 94 7\n56 69 62 98\n49 7 65 76\n", "output": "831"}]}
{"statement": "Task: Given an N x N grid with some cells empty and some cells containing rocks, find the number of empty cells where a mirror can be placed at 45 degrees to see what is happening on the East side without any rocks blocking the line of sight.\n\nInput: The input consists of T test cases, where each test case starts with an integer N, followed by N lines, each containing N characters representing empty cells (denoted by '.') or rocks (denoted by '#'). Input is provided through standard input.\n\nOutput: For each test case, print the number of possible options where the mirror can be placed to see on the East side.\n\nConstraints: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 1000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/GRID", "sample_test_cases": [{"input": "2\n3\n#..\n#..\n#..\n3\n#.#\n#.#\n#.#", "output": "6\n0"}, {"input": "2\n3\n#..\n..#\n#..\n3\n#.#\n#.#\n#.#", "output": "3\n0\n"}, {"input": "2\n3\n#..\n\"..\n#..\n3\n#.#\n#.#\n#.#", "output": "6\n0\n"}, {"input": "2\n3\n$..\n..#\n#..\n3\n\"-#\n#.#\n\"#.", "output": "3\n1\n"}, {"input": "2\n3\n$..\n.#.\n#..\n3\n\"-#\n#.#\n\".#", "output": "4\n0\n"}, {"input": "2\n3\n#..\n..#\n..#\n3\n#.#\n#.#\n#.#", "output": "1\n0\n"}, {"input": "2\n3\n#..\n#..\n..#\n3\n#.#\n#.#\n#.#", "output": "2\n0\n"}, {"input": "2\n3\n\"..\n#..\n#..\n3\n##.\n##.\n##.", "output": "6\n3\n"}, {"input": "2\n3\n.#.\n\"..\n#..\n3\n#.#\n.##\n.##", "output": "5\n0\n"}, {"input": "2\n3\n..#\n$..\n#..\n3\n#.#\n#.#\n##.", "output": "4\n1\n"}, {"input": "2\n3\n.#.\n.#.\n..#\n1\n#*#\n##.\n$#-", "output": "0\n0\n"}, {"input": "2\n3\n\"..\n#..\n..#\n3\n##.\n##.\n##.", "output": "2\n3\n"}, {"input": "2\n3\n#..\n$..\n#..\n3\n#.#\n#.#\n##.", "output": "6\n1\n"}, {"input": "2\n3\n$..\n..#\n#..\n3\n#.#\n#.#\n#.#", "output": "3\n0\n"}, {"input": "2\n3\n#..\n\"..\n#..\n3\n.##\n#.#\n#.#", "output": "6\n0\n"}]}
{"statement": "Task: Given an integer n and m, apply m operations to n where in each operation, every digit d of the number is replaced with the decimal representation of integer d + 1. Find the length of n after applying m operations and print it modulo 10^9+7.\n\nInput: The input consists of t test cases, where each test case contains two integers n and m. The first line of input contains a single integer t (1 \u2264 t \u2264 2 \u22c5 10^5) \u2014 the number of test cases. The only line of each test case contains two integers n (1 \u2264 n \u2264 10^9) and m (1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the initial number and the number of operations. Input is received from standard input.\n\nOutput: For each test case output the length of the resulting number modulo 10^9+7.\n\nConstraints: The constraints for the input integers are 1 \u2264 n \u2264 10^9 and 1 \u2264 m \u2264 2 \u22c5 10^5, while the number of test cases t is 1 \u2264 t \u2264 2 \u22c5 10^5. The problem can be seen as a sequence of operations applied to an integer n. Each operation consists of replacing each digit d of the number with the decimal representation of integer d + 1. The length of the resulting number is the number of digits in the sequence after applying m operations. The output should be the length of the resulting number modulo 10^9+7.", "editorial": "", "tag": "['Matrices', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1513/C", "sample_test_cases": [{"input": "5\n90 94\n26 25\n64 84\n14 6\n20 96\n", "output": "1842\n12\n1015\n3\n1908\n"}, {"input": "5\n90 94\n26 25\n64 84\n18 6\n20 96\n", "output": "1842\n12\n1015\n3\n1908\n"}, {"input": "5\n1912 1\n5 6\n999 1\n88 2\n11 100\n", "output": "5\n2\n6\n4\n2070\n"}, {"input": "5\n90 94\n26 25\n64 84\n22 6\n20 96\n", "output": "1842\n12\n1015\n2\n1908\n"}, {"input": "5\n1912 1\n5 6\n999 1\n88 2\n6 100\n", "output": "5\n2\n6\n4\n1872\n"}, {"input": "5\n90 113\n26 25\n64 84\n22 6\n20 96\n", "output": "7500\n12\n1015\n2\n1908\n"}, {"input": "5\n27 113\n16 25\n64 84\n6 6\n20 96\n", "output": "7709\n12\n1015\n2\n1908\n"}, {"input": "5\n27 113\n16 25\n64 16\n6 6\n20 96\n", "output": "7709\n12\n8\n2\n1908\n"}, {"input": "5\n27 123\n16 25\n64 16\n6 6\n20 96\n", "output": "15968\n12\n8\n2\n1908\n"}, {"input": "5\n27 123\n16 24\n64 16\n6 6\n2 96\n", "output": "15968\n12\n8\n2\n1014\n"}, {"input": "5\n27 123\n16 24\n81 16\n6 6\n2 96\n", "output": "15968\n12\n6\n2\n1014\n"}, {"input": "5\n27 123\n16 24\n81 16\n2 6\n2 96\n", "output": "15968\n12\n6\n1\n1014\n"}, {"input": "5\n27 123\n16 32\n81 16\n3 6\n2 96\n", "output": "15968\n20\n6\n1\n1014\n"}, {"input": "5\n27 123\n26 61\n81 16\n3 6\n2 96\n", "output": "15968\n170\n6\n1\n1014\n"}, {"input": "5\n27 2\n26 61\n81 16\n3 6\n2 96\n", "output": "2\n170\n6\n1\n1014\n"}]}
{"statement": "Task: Given two non-negative integers A and B, find two non-negative integers X and Y such that A = X + Y and B = X xor Y, where xor is bitwise exclusive or. The task is to find the smallest possible value of X that satisfies these conditions.\n\nInput: The input consists of two lines, where the first line contains integer number A and the second line contains integer number B. Input arrives from standard input.\n\nOutput: The output should be a single line containing two integer non-negative numbers X and Y, separated by a space. If there is no solution, print -1.\n\nConstraints: The input integers A and B are non-negative integers that can be as large as 264 - 1.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/76/D", "sample_test_cases": [{"input": "9992164445234764941\n8162963574901971597\n", "output": "914600435166396672 9077564010068368269"}, {"input": "1215996781\n108302929\n", "output": "553846926 662149855"}, {"input": "638\n126\n", "output": "256 382"}, {"input": "12608\n0\n", "output": "6304 6304"}, {"input": "104066\n104066\n", "output": "0 104066"}, {"input": "1367480970723947\n584615739735395\n", "output": "391432615494276 976048355229671"}, {"input": "1639\n1176\n", "output": "-1"}, {"input": "339671107814\n208405902980\n", "output": "65632602417 274038505397"}, {"input": "1870807699\n259801747\n", "output": "805502976 1065304723"}, {"input": "1024996\n990106\n", "output": "17445 1007551"}, {"input": "1639\n410\n", "output": "-1\n"}, {"input": "142\n0\n", "output": "71 71\n"}, {"input": "142\n108\n", "output": "17 125\n"}, {"input": "1639\n71\n", "output": "784 855\n"}, {"input": "142\n110\n", "output": "16 126\n"}]}
{"statement": "Task: Given a rooted tree with $n$ vertices, where each vertex has an associated range of values, adjust the values of the vertices to be within their respective ranges using a minimum number of operations. Each operation consists of selecting a vertex and a non-decreasing array of non-negative integers, and adding each element of the array to the value of the vertex and its ancestors on the path to the root.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $n$ $(2\\le n\\le 2 \\cdot 10^5)$, the number of vertices in the tree. The second line of each test case contains $n-1$ integers, $p_2, p_3, \\ldots, p_n$ $(1 \\leq p_i < i)$, where $p_i$ denotes the parent of the vertex $i$. The $i$-th of the following $n$ lines contains two integers $l_i$ and $r_i$ $(1 \\le l_i \\le r_i \\le 10^9)$, representing the range of values for vertex $i$. Input is read from standard input.\n\nOutput: For each test case, output the minimum number of operations needed to adjust all vertices to their respective ranges. The output should consist of $T$ lines, one for each test case.\n\nConstraints: $1 \\leq T \\leq 1000$, and the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$. Additionally, $1 \\leq p_i < i$ for all $i$, and $1 \\leq l_i \\leq r_i \\leq 10^9$ for all $i$.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1693/B", "sample_test_cases": [{"input": "4\n2\n1\n1 5\n2 9\n3\n1 1\n4 5\n2 4\n6 10\n4\n1 2 1\n6 9\n5 6\n4 5\n2 4\n5\n1 2 3 4\n5 5\n4 4\n3 3\n2 2\n1 1\n", "output": "1\n2\n2\n5\n"}]}
{"statement": "Task: Given an infinite graph called the Infinite Zoo, represented by a set of vertices labeled with integers and directed edges between vertices that satisfy the condition $u\\&v=v$, where $\\&$ denotes the bitwise AND operation, determine whether a path exists between two vertices in the graph. The program should read an integer $q$ and $q$ pairs of integers $(u_i, v_i)$ from standard input, where each pair represents a query to determine whether a path exists between vertex $u_i$ and vertex $v_i$. The program should output \"YES\" if a path exists and \"NO\" otherwise.\n\nInput: The first line of input contains an integer $q$ ($1 \\leq q \\leq 10^5$) representing the number of queries. The $i$-th of the next $q$ lines will contain two integers $u_i$, $v_i$ ($1 \\leq u_i, v_i < 2^{30}$) \u2014 a query made by Zookeeper.\n\nOutput: For each of the $q$ queries, output \"YES\" in a single line if there exists a directed path from vertex $u_i$ to vertex $v_i$ in the Infinite Zoo. Otherwise, output \"NO\". The output can be in any case.\n\nConstraints: The input integers are subject to the constraints $1 \\leq u_i, v_i < 2^{30}$.", "editorial": "", "tag": "['Bit manipulation', 'Constructive algorithms', 'Greedy algorithms', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1491/D", "sample_test_cases": [{"input": "5\n1 4\n3 6\n1 6\n6 2\n5 5\n", "output": "YES\nYES\nNO\nNO\nYES\n"}, {"input": "5\n1 4\n3 7\n1 6\n6 2\n5 5\n", "output": "YES\nNO\nNO\nNO\nYES\n"}, {"input": "5\n1 5\n3 6\n1 6\n6 2\n5 5\n", "output": "NO\nYES\nNO\nNO\nYES\n"}, {"input": "5\n1 5\n3 6\n1 6\n6 2\n4 5\n", "output": "NO\nYES\nNO\nNO\nNO\n"}, {"input": "5\n1 2\n3 7\n2 6\n3 2\n6 5\n", "output": "YES\nNO\nNO\nNO\nNO\n"}, {"input": "5\n1 3\n3 7\n2 6\n3 2\n6 5\n", "output": "NO\nNO\nNO\nNO\nNO\n"}, {"input": "5\n1 3\n3 7\n2 3\n1 2\n6 5\n", "output": "NO\nNO\nNO\nYES\nNO\n"}, {"input": "5\n1 4\n3 6\n1 6\n6 3\n5 5\n", "output": "YES\nYES\nNO\nNO\nYES\n"}, {"input": "5\n2 1\n6 7\n2 6\n6 2\n3 5\n", "output": "NO\nNO\nNO\nNO\nYES\n"}, {"input": "5\n1 4\n3 6\n1 6\n10 3\n5 7\n", "output": "YES\nYES\nNO\nNO\nNO\n"}, {"input": "5\n1 1\n3 14\n1 2\n6 4\n7 5\n", "output": "YES\nNO\nYES\nNO\nNO\n"}, {"input": "5\n1 3\n2 4\n1 2\n10 2\n2 1\n", "output": "NO\nYES\nYES\nNO\nNO\n"}, {"input": "5\n1 1\n6 7\n3 10\n6 2\n3 5\n", "output": "YES\nNO\nYES\nNO\nYES\n"}, {"input": "5\n1 2\n3 7\n2 3\n1 2\n6 5\n", "output": "YES\nNO\nNO\nYES\nNO\n"}, {"input": "5\n2 5\n3 6\n1 1\n6 1\n5 5\n", "output": "NO\nYES\nYES\nNO\nYES\n"}]}
{"statement": "Task: Given an array of $n$ integers, either $1$ or $-1$, find the minimal number of elements that can be removed from a given range of the array so that the sign-variable sum of the remaining elements is zero. There are $q$ queries, each asking for the minimal number of elements that can be removed from a certain range of the array to satisfy the above condition.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains two integers $n$ and $q$, where $n$ is the number of elements in the array and $q$ is the number of queries. The second line contains a string of length $n$ representing the signs of the elements in the array, where \"+\" represents $1$ and \"-\" represents $-1$. Each of the next $q$ lines contains two integers $l_i$ and $r_i$, representing the range of elements in the $i$-th query. Input is provided through standard input.\n\nOutput: The output for each test case is a single integer representing the minimal number of elements that can be removed from the given range of the array to satisfy the condition.\n\nConstraints: $1 \\le t \\le 10^3$, $1 \\le n, q \\le 3 \\cdot 10^5$, and the sum of $n$ and $q$ over all test cases does not exceed $3 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1562/D1", "sample_test_cases": [{"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n1\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n7 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n2\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n-++-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n0\n1\n0\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n6 10\n4 10\n-++-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n0\n1\n1\n2\n1\n0\n1\n0\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n3 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n2\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n7 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n2 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n2\n0\n1\n2\n2\n2\n1\n2\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n1 3\n2 4\n3 3\n3 4\n3 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n2\n1\n1\n1\n1\n2\n2\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n2 3\n3 4\n4 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n2\n1\n2\n1\n2\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n7 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 4\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n2\n0\n1\n2\n1\n2\n1\n1\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 1\n1 3\n1 4\n2 2\n1 3\n2 4\n3 3\n3 4\n3 4\n", "output": "2\n2\n0\n0\n1\n1\n1\n2\n1\n1\n1\n1\n2\n2\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n2 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 4\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n1\n0\n1\n2\n1\n2\n1\n1\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n2 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 4\n2 4\n3 4\n3 4\n4 4\n", "output": "2\n2\n1\n0\n1\n2\n1\n2\n1\n1\n1\n2\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 7\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 3\n2 4\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n0\n0\n1\n2\n1\n1\n1\n2\n1\n1\n2\n1\n"}, {"input": "3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n7 12\n3 10\n4 4\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n", "output": "2\n2\n2\n0\n1\n2\n1\n2\n"}]}
{"statement": "Task: Given a decimal fraction of length n and a time limit t, find the maximum possible grade that can be obtained by rounding the decimal fraction within the given time limit. The student can choose to round the grade at any place after the decimal point or not round at all. The classic rounding rules are used.\n\nInput: The input consists of two integers n and t, representing the length of the decimal fraction and the time limit, respectively. The second line contains the decimal fraction itself. The input is provided through standard input.\n\nOutput: Output the maximum grade that can be obtained in t seconds. Trailing zeroes should not be printed.\n\nConstraints: The length of the decimal fraction n is between 1 and 200,000, the time limit t is between 1 and 10^9, and the decimal fraction is a positive number containing at least one digit after the decimal point, and its representation does not end with 0.", "editorial": "", "tag": "['Mathematics', 'Dynamic programming', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/718/A", "sample_test_cases": [{"input": "6 1\n10.245\n", "output": "10.25\n"}, {"input": "6 2\n10.245\n", "output": "10.3\n"}, {"input": "3 100\n9.2\n", "output": "9.2\n"}, {"input": "12 5\n872.04488525\n", "output": "872.1\n"}, {"input": "35 8\n984227318.2031144444444444494637612\n", "output": "984227318.2031144445\n"}, {"input": "320 142\n2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367\n", "output": "2704701300865535.4322233122334341141300111132201024201313230103441442011243032\n"}, {"input": "5 10\n1.555\n", "output": "2\n"}, {"input": "6 1\n0.9454\n", "output": "1\n"}, {"input": "7 1000000000\n239.923\n", "output": "240\n"}, {"input": "7 235562\n999.999\n", "output": "1000\n"}, {"input": "9 2\n23999.448\n", "output": "23999.5\n"}, {"input": "9 3\n23999.448\n", "output": "24000\n"}, {"input": "13 1\n761.044449428\n", "output": "761.04445\n"}, {"input": "3 1\n0.1\n", "output": "0.1\n"}, {"input": "3 1\n9.9\n", "output": "10\n"}]}
{"statement": "Task: Given a sequence of $n$ integers $a_1,a_2,\\ldots,a_n$ and an integer $s$, find the minimum possible value of a function $F$ that is defined as follows: $$F = a_1 \\cdot x_2+y_2 \\cdot x_3+y_3 \\cdot x_4 + \\ldots + y_{n - 2} \\cdot x_{n-1}+y_{n-1} \\cdot a_n,$$ where $x_i$ and $y_i$ are non-negative integers that satisfy the conditions $x_i+y_i=a_i$ and $(x_i-s) \\cdot (y_i-s) \\geq 0$.\n\nInput: The first line of input contains an integer $t$ ($1 \\le t \\le 10^4$) representing the number of test cases. Each test case consists of two integers $n$ and $s$ ($3 \\le n \\le 2 \\cdot 10^5$; $0 \\le s \\le 2 \\cdot 10^5$) on the first line, followed by a sequence of $n$ integers $a_1,a_2,\\ldots,a_n$ ($0 \\le a_i \\le 2 \\cdot 10^5$) on the second line. The input is read from standard input.\n\nOutput: For each test case, output a single integer representing the minimum possible value of $F$.\n\nConstraints: The sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1787/C", "sample_test_cases": [{"input": "10\n5 0\n2 0 1 3 4\n5 1\n5 3 4 3 5\n7 2\n7 6 5 4 3 2 1\n5 1\n1 2 3 4 5\n5 2\n1 2 3 4 5\n4 0\n0 1 1 1\n5 5\n4 3 5 6 4\n4 1\n0 2 1 0\n3 99999\n200000 200000 200000\n6 8139\n7976 129785 12984 78561 173685 15480\n", "output": "0\n18\n32\n11\n14\n0\n16\n0\n40000000000\n2700826806\n"}]}
{"statement": "Task: Given an array A of N integers and an integer X, find the maximum value of the expression \u2211(A[i-1] XOR A[i]) for i from 2 to N, where XOR denotes the bitwise XOR operation. You can perform the following operation at most once: select a subsequence of A and add X to all the elements of that subsequence.\n\nInput: The input consists of T test cases. The first line of each test case contains two integers N and X. The second line contains N integers A[1], A[2], ..., A[N], representing the array A. The input is provided through standard input.\n\nOutput: For each test case, output a single integer representing the maximum value of the expression \u2211(A[i-1] XOR A[i]) that can be obtained by adding X to at most one subsequence of the array A.\n\nConstraints: 1 \u2264 T \u2264 10^5, 1 \u2264 N \u2264 10^5, 1 \u2264 X \u2264 10^9, 1 \u2264 A[i] \u2264 10^9, and the sum of N over all test cases does not exceed 2 * 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/ADJXOR2", "sample_test_cases": [{"input": "3\n2 1\n1 2\n4 1\n2 2 3 3\n5 2\n5 3 6 2 8\n", "output": "3\n15\n43\n"}]}
{"statement": "Task: Given an array A of N integers, determine whether it is possible to partition the array into multiple partitions, where each partition has at least K elements and the absolute difference between any pair of elements in the same partition does not exceed M.\n\nInput: The input consists of four integers: N, K, and M, followed by an array A of N integers. The input is taken from standard input.\n\nOutput: The output should be a boolean value, true if it is possible to partition the array according to the given rules, and false otherwise.\n\nConstraints: 1 \u2264 N \u2264 2*10^{5}, 1 \u2264 K \u2264 N, 1 \u2264 M \u2264 10^{9}, and 1 \u2264 A[i] \u2264 10^{9}.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Range queries', 'Segment trees revisited']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/array-partition/1", "sample_test_cases": [{"input": "N = 5\r\nK = 2\r\nM = 3\r\nA[] = {8, 3, 9, 1, 2}", "output": "YES"}]}
{"statement": "Task: Given a coordinate line with $n+2$ towns, you need to build radio towers in $n$ towns with probability $\\frac{1}{2}$ each. After building the towers, you need to set signal power on each tower to an integer between $1$ and $n$ such that towns $0$ and $n+1$ don't get any signal from the towers and towns $1$ to $n$ get signal from exactly one tower each. You need to calculate the probability of finding a way to set signal powers to meet all constraints.\n\nInput: The input consists of a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) and arrives from standard input.\n\nOutput: The output is a single integer, the probability that there will be a way to set signal powers so that all constraints are met, taken modulo $998244353$. The probability can be expressed as an irreducible fraction $\\frac{x}{y}$ and the output is the value of $x \\cdot y^{-1} \\mod 998244353$, where $y^{-1}$ is an integer such that $y \\cdot y^{-1} \\mod 998244353 = 1$.\n\nConstraints: The input integer $n$ must satisfy $1 \\leq n \\leq 2 \\cdot 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1452/D", "sample_test_cases": [{"input": "2\n", "output": "748683265\n"}, {"input": "3\n", "output": "748683265\n"}, {"input": "5\n", "output": "842268673\n"}, {"input": "200000\n", "output": "202370013\n"}, {"input": "6\n", "output": "873463809\n"}, {"input": "1\n", "output": "499122177\n"}, {"input": "4\n", "output": "811073537\n"}, {"input": "7\n", "output": "896860161\n"}, {"input": "13\n", "output": "969851905\n"}, {"input": "42\n", "output": "708668919\n"}, {"input": "69\n", "output": "342983896\n"}, {"input": "1337\n", "output": "843775535\n"}, {"input": "199999\n", "output": "503231359\n"}, {"input": "199998\n", "output": "801261687\n"}, {"input": "7\n", "output": "896860161\n"}]}
{"statement": "Task: Given a non-empty binary tree represented as an array, find the maximum sum of a path in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\nInput: The input is a non-empty binary tree represented as an array. The input is provided through standard input.\n\nOutput: The output is an integer representing the maximum sum of a path in the given binary tree.\n\nConstraints: The binary tree can have at most 10^4 nodes and the values of the nodes are between -1000 and 1000.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/binary-tree-maximum-path-sum/", "sample_test_cases": []}
{"statement": "Task: Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n\nInput: The input consists of a single integer n, which represents the upper limit of the range of non-negative integers to consider. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the total number of times the digit 1 appears in all non-negative integers less than or equal to n.\n\nConstraints: The input integer n is constrained to be a positive integer not greater than 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/number-of-digit-one/", "sample_test_cases": [{"input": [13], "output": 6}]}
{"statement": "Task: Given a row of n hares, each with a certain joy value, determine the order in which they should be fed to maximize the total joy. The joy value of each hare depends on whether its adjacent hares have been fed or not.\n\nInput: The input consists of an integer n, followed by three lines, each containing n integers. The first line contains integers a_1 a_2 ... a_{n}, where a_i represents the joy value of hare i if both its adjacent hares are hungry. The second line contains integers b_1, b_2, ..., b_{n}, where b_i represents the joy value of hare i if it has exactly one full adjacent hare. The third line contains integers c_1, c_2, ..., c_{n}, where c_i represents the joy value of hare i if both its adjacent hares are full. The input is received from standard input.\n\nOutput: The output should be a single integer representing the maximum possible total joy of the hares.\n\nConstraints: 1 \u2264 n \u2264 3000 and 0 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^5.", "editorial": "", "tag": "['Dynamic programming', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/358/D", "sample_test_cases": [{"input": "4\n1 2 3 4\n4 3 2 1\n0 1 1 0\n", "output": "13\n"}, {"input": "7\n8 5 7 6 1 8 9\n2 7 9 5 4 3 1\n2 3 3 4 1 1 3\n", "output": "44\n"}, {"input": "3\n1 1 1\n1 2 1\n1 1 1\n", "output": "4\n"}, {"input": "7\n1 3 8 9 3 4 4\n6 0 6 6 1 8 4\n9 6 3 7 8 8 2\n", "output": "42\n"}, {"input": "2\n3 5\n9 8\n4 0\n", "output": "14\n"}, {"input": "7\n3 6 1 5 4 2 0\n9 7 3 7 2 6 0\n1 6 5 7 5 4 1\n", "output": "37\n"}, {"input": "1\n0\n1\n4\n", "output": "0\n"}, {"input": "1\n7\n1\n7\n", "output": "7\n"}, {"input": "8\n7 3 3 5 9 9 8 1\n8 2 6 6 0 3 8 0\n1 2 5 0 9 4 7 8\n", "output": "49\n"}, {"input": "6\n1 2 0 1 6 4\n0 6 1 8 9 8\n4 1 4 3 9 8\n", "output": "33\n"}, {"input": "1\n0\n0\n0\n", "output": "0\n"}, {"input": "1\n100000\n100000\n100000\n", "output": "100000\n"}, {"input": "1\n100000\n100000\n100000\n", "output": "100000\n"}, {"input": "1\n0\n1\n4\n", "output": "0\n"}, {"input": "2\n3 5\n9 8\n4 0\n", "output": "14\n"}]}
{"statement": "Task: Given an upper limit `n_max` and a number of prime permutations `k_perms`, find the number of prime numbers that have exactly `k_perms` prime permutations below `n_max`. A prime permutation is formed by rearranging the digits of a prime number. Return the count of such prime numbers, the smallest and largest prime numbers among them. If no such prime numbers are found, return `[0, 0, 0]`.\n\nInput: The input consists of two integers `n_max` and `k_perms`. The input is read from standard input. `n_max` is an integer less than or equal to 10000 and `k_perms` is an integer less than or equal to 3.\n\nOutput: The output is a list of three integers: the count of prime numbers with `k_perms` prime permutations below `n_max`, the smallest prime number among them and the largest prime number among them.\n\nConstraints: `n_max` is an integer between 1 and 10000, inclusive. `k_perms` is an integer between 1 and 3, inclusive.", "editorial": "", "tag": "['Sorting', 'Combinatorics', 'Dynamic programming', 'Mathematics', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codewars", "url": "https://www.codewars.com/kata/55eec0ee00ae4a8fa0000075", "sample_test_cases": []}
{"statement": "Task: Given a maze consisting of n+1 rooms, numbered from 1 to (n+1), with each room having two one-way portals, find the number of times Vasya needs to use portals to get out of the maze. Vasya starts at room 1 and needs to get to room (n+1). If Vasya is in room i and has already painted a cross on its ceiling, he uses the second portal (leading to room p_{i}) if and only if the ceiling contains an odd number of crosses, otherwise he uses the first portal. \n\nInput: The input consists of two lines. The first line contains an integer n (1 \u2264 n \u2264 10^3) representing the number of rooms. The second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 i) representing the room number that can be reached by using the second portal in the i-th room. Input is provided through standard input.\n\nOutput: Print a single integer representing the number of portal moves Vasya needs to get out of the maze. The output should be printed modulo 1000000007 (10^9 + 7).\n\nConstraints: n is an integer between 1 and 1000, and each p_{i} is an integer between 1 and i.", "editorial": "", "tag": "['Dynamic programming', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/407/B", "sample_test_cases": [{"input": "2\n1 2\n", "output": "4\n"}, {"input": "4\n1 1 2 3\n", "output": "20\n"}, {"input": "5\n1 1 1 1 1\n", "output": "62\n"}, {"input": "7\n1 2 1 3 1 2 1\n", "output": "154\n"}, {"input": "1\n1\n", "output": "2\n"}, {"input": "3\n1 1 3\n", "output": "8\n"}, {"input": "10\n1 1 3 2 2 1 3 4 7 5\n", "output": "858\n"}, {"input": "20\n1 2 2 2 2 1 4 7 8 6 5 3 5 3 8 11 5 10 16 10\n", "output": "433410\n"}, {"input": "32\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "589934534\n"}, {"input": "10\n1 1 3 2 2 1 3 4 7 5\n", "output": "858\n"}, {"input": "30\n1 1 2 2 5 6 4 3 4 7 3 5 12 12 2 15 3 8 3 10 12 3 14 1 10 4 22 11 22 27\n", "output": "132632316\n"}, {"input": "70\n1 1 2 3 4 3 5 2 2 4 8 6 13 6 13 3 5 4 5 10 11 9 11 8 12 24 21 6 9 29 25 31 17 27 3 17 35 5 21 11 27 14 33 7 33 44 22 33 21 11 38 46 53 46 3 22 5 27 55 22 41 25 56 61 27 28 11 66 68 13\n", "output": "707517223\n"}, {"input": "10\n1 1 1 1 1 1 1 1 1 1\n", "output": "2046\n"}, {"input": "20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "2097150\n"}, {"input": "102\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "810970229\n"}]}
{"statement": "Task: Given an array p[] of length n representing the dimensions of a series of matrices, where the dimension of the i'th matrix is p[i] * p[i+1], find the most efficient way to multiply these matrices together. The task is to decide in which order to perform the multiplications such that the minimum number of multiplications are needed. \n\nInput: The input consists of an integer n denoting the number of matrices and an array p[] of length n representing the dimensions of the matrices. The input is taken from standard input.\n\nOutput: The output should be a string with the proper order of parenthesis for n-1 matrices, using uppercase alphabets to denote each matrix. \n\nConstraints: The input constraints are 2 \u2264 n \u2264 26 and 1 \u2264 p[i] \u2264 500. The expected time complexity is O(n^{3}) and the expected auxiliary space is O(n^{2}).\n\nMathematical Concepts: The problem involves matrix multiplication, which is a fundamental concept in linear algebra. The dimensions of the matrices play a crucial role in determining the order in which the matrices should be multiplied. The problem requires finding the most efficient way to multiply a chain of matrices together, which is a classic problem in computer science and mathematics. The solution involves finding the optimal parenthesization of the matrix chain, which can be represented using a binary tree. The problem can be solved using dynamic programming, which involves breaking down the problem into smaller subproblems and storing the solutions to these subproblems in a table.\n\nComputer Science Concepts: The problem involves dynamic programming, which is a fundamental concept in computer science. The solution involves breaking down the problem into smaller subproblems and storing the solutions to these subproblems in a table. The problem can be solved using bottom-up dynamic programming, which involves solving the subproblems in a bottom-up order and using the solutions to the smaller subproblems to solve the larger subproblems. The solution involves constructing a table to store the solutions to the subproblems and using the table to find the optimal parenthesization of the matrix chain. The time complexity of the solution is O(n^{3}), which is optimal for this problem.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/brackets-in-matrix-chain-multiplication1024/1", "sample_test_cases": [{"input": "n = 5\r\np[] = {1, 2, 3, 4, 5}", "output": "(((AB)C)D)"}, {"input": "n = 3\r\np = {3, 3, 3}", "output": "(AB)"}]}
{"statement": "Task: Given an integer $n$ and an integer $x$ with decimal representation $d_1d_2\\ldots d_k$, the task is to find the minimum number of operations required to make the length of decimal representation of $x$ equal to $n$, where each operation involves replacing $x$ by $x \\cdot y$ for some digit $y$ in the decimal representation of $x$. If it is impossible to make the length of decimal representation of $x$ equal to $n$, output $-1$.\n\nInput: The input consists of two integers $n$ and $x$ separated by a space, where $2 \\leq n \\leq 19$ and $1 \\leq x < 10^{n-1}$. The input is read from standard input.\n\nOutput: The output is a single integer, which is the minimum number of operations required to make the length of decimal representation of $x$ equal to $n$, or $-1$ if it is impossible. The output is written to standard output.\n\nConstraints: $2 \\leq n \\leq 19$, $1 \\leq x < 10^{n-1}$.\n\nMathematical Concepts: Integers, decimal representation, multiplication, digits.\n\nComputer Science Concepts: Standard input/output, conditionals, loops.", "editorial": "", "tag": "['Graph traversal', 'Shortest paths', 'String algorithms', 'Complete search', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1681/D", "sample_test_cases": [{"input": "2 1\n", "output": "-1\n"}, {"input": "3 2\n", "output": "4\n"}, {"input": "13 42\n", "output": "12\n"}, {"input": "5 403\n", "output": "2\n"}, {"input": "14 8916\n", "output": "10\n"}, {"input": "14 6615308\n", "output": "7\n"}, {"input": "18 2029\n", "output": "15\n"}, {"input": "19 75804550\n", "output": "11\n"}, {"input": "13 25\n", "output": "13\n"}, {"input": "12 5030245\n", "output": "5\n"}, {"input": "15 59802\n", "output": "10\n"}, {"input": "13 454\n", "output": "11\n"}, {"input": "17 6\n", "output": "17\n"}, {"input": "16 156\n", "output": "14\n"}, {"input": "16 1\n", "output": "-1\n"}]}
{"statement": "Task: Given a sequence $b$ of length $n$, determine whether it can be obtained from another sequence $a$ by splitting $a$ into segments and writing the length of each segment to the left or right of it.\n\nInput: The first line of input data contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Each test case consists of two lines. The first line of the test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the size of the sequence $b$. The second line of test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$) \u2014 the sequence $b$ itself. It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput: For each test case, print YES if sequence $b$ could be sent over the network, that is, if sequence $b$ could be obtained from some sequence $a$ to send $a$ over the network. Otherwise, print NO. You can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as positive response).\n\nConstraints: The sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$, and $n$ and $b_i$ are subject to the constraints $1 \\le n \\le 2 \\cdot 10^5$ and $1 \\le b_i \\le 10^9$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1741/E", "sample_test_cases": [{"input": "7\n9\n1 1 2 3 1 3 2 2 3\n5\n12 1 2 7 5\n6\n5 7 8 9 10 3\n4\n4 8 6 2\n2\n3 1\n10\n4 6 2 1 9 4 9 3 4 2\n1\n1\n", "output": "YES\nYES\nYES\nNO\nYES\nYES\nNO\n"}, {"input": "1\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 8 8\n", "output": "NO\n"}, {"input": "1\n73\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 100 100 100 100\n", "output": "NO\n"}, {"input": "1\n111\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "NO\n"}]}
{"statement": "Task: Given an integer array $a$, find the number of good subsequences in $a$ modulo $10^9 + 7$. A subsequence $b$ of $a$ is good if it is not empty and for every $i$ ($1 \\le i \\le k$) $b_i$ is divisible by $i$.\n\nInput: The input consists of an integer $n$ ($1 \\le n \\le 100\\,000$)\u00a0\u2014 the length of the array $a$ and the array $a$ itself. The input is provided through standard input. The values of $n$ and $a_i$ are constrained by $1 \\le a_i \\le 10^6$.\n\nOutput: The output should be exactly one integer\u00a0\u2014 the number of good subsequences taken modulo $10^9 + 7$.\n\nConstraints: Let $S$ be the sum of $n$ over all test cases. Then, $1 \\le S \\le 10^5$.", "editorial": "", "tag": "['Implementation', 'Number theory', 'Dynamic programming', 'Mathematics', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1061/C", "sample_test_cases": [{"input": "2\n1 2\n", "output": "3"}, {"input": "5\n2 2 1 22 14\n", "output": "13"}, {"input": "1\n519612\n", "output": "1"}, {"input": "15\n513046 683844 914823 764255 815301 790234 184972 93547 388028 211665 554415 713159 183950 200951 842336\n", "output": "161"}, {"input": "50\n170081 797965 40736 224325 102476 20832 954026 923972 391400 247099 95141 927386 79799 749285 104039 200818 623552 872203 355273 838168 352783 850365 389351 930945 847154 608047 727586 549184 520573 608953 338849 536466 345479 589848 882827 771475 874283 787115 992590 128903 97800 74550 674140 282514 510849 106786 267881 163456 753022 925051\n", "output": "20918"}, {"input": "12\n230070 37311 92074 618927 991732 129711 612126 541583 552857 299118 773097 33928\n", "output": "140"}, {"input": "5\n325539 329221 106895 882089 718673\n", "output": "5"}, {"input": "11\n146646 521171 278816 989449 899375 650934 615950 390299 618702 962232 512657\n", "output": "92"}, {"input": "2\n9859 748096\n", "output": "3"}, {"input": "16\n629174 232688 695377 426437 164554 460498 956955 310239 322183 515847 847559 240199 792552 770488 4147 573082\n", "output": "176"}, {"input": "13\n313494 586155 96820 472596 340986 799976 416813 725571 487013 603301 832 626376 583769\n", "output": "142"}, {"input": "13\n313494 586155 96820 472596 340986 799976 416813 725571 487013 603301 832 626376 583769\n", "output": "142\n"}, {"input": "1\n519612\n", "output": "1\n"}, {"input": "5\n325539 329221 106895 882089 718673\n", "output": "5\n"}, {"input": "15\n513046 683844 914823 764255 815301 790234 184972 93547 388028 211665 554415 713159 183950 200951 842336\n", "output": "161\n"}]}
{"statement": "Task: Given an array of positive integers, starting at index 1 with a score equal to the value at that index, perform exactly k moves, with no more than z moves to the left and no two or more moves to the left in a row. A move can either be to the right, adding the value at the next index to the score, or to the left, adding the value at the previous index to the score. Find the maximum score that can be achieved.\n\nInput: The input consists of t test cases. The first line of each test case contains three integers n, k, and z. The second line contains n integers representing the array. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00d7 10^5.\n\nOutput: The output should consist of t lines. Each line should contain a single integer giving the maximum score that can be achieved for the corresponding test case.\n\nConstraints: $1 \\le t \\le 10^4$, $2 \\le n \\le 10^5$, $1 \\le k \\le n - 1$, $0 \\le z \\le \\min(5, k)$, $1 \\le a_i \\le 10^4$.", "editorial": "", "tag": "['Dynamic programming', 'Complete search', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1389/B", "sample_test_cases": [{"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 9 7 4 10 9\n", "output": "15\n19\n150\n56\n"}, {"input": "2\n5 4 1\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n", "output": "19\n19\n"}, {"input": "2\n5 4 1\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n", "output": "19\n19\n"}, {"input": "2\n5 4 1\n1 5 2 3 2\n5 4 1\n1 5 4 3 2\n", "output": "15\n19\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 40 50\n10 3 3\n4 6 8 2 9 9 7 4 10 9\n", "output": "15\n19\n150\n24\n"}, {"input": "2\n5 4 1\n1 5 2 3 2\n5 1 1\n1 5 4 3 2\n", "output": "15\n6\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 40 50\n10 3 3\n4 9 8 2 9 9 7 4 5 9\n", "output": "15\n19\n150\n30\n"}, {"input": "2\n5 4 1\n1 5 4 3 2\n5 4 1\n1 5 4 6 2\n", "output": "19\n20\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 7 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 9 7 4 10 9\n", "output": "15\n25\n150\n56\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 70 50\n10 3 3\n4 9 8 2 9 9 7 4 5 9\n", "output": "15\n19\n180\n30\n"}, {"input": "2\n5 4 1\n1 5 4 3 2\n5 4 1\n1 5 7 6 2\n", "output": "19\n26\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 7 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 12 7 4 10 9\n", "output": "15\n25\n150\n62\n"}, {"input": "2\n5 4 1\n2 5 2 3 2\n5 1 0\n1 5 4 0 2\n", "output": "16\n6\n"}, {"input": "2\n5 4 1\n1 5 2 3 1\n5 1 0\n0 5 4 3 1\n", "output": "15\n5\n"}, {"input": "4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 1 7 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 12 7 4 10 9\n", "output": "15\n19\n150\n62\n"}]}
{"statement": "Task: Given a new public transport ticketing system in Bytesburg, calculate the fare charged after each trip. The system automatically chooses the optimal tickets for each trip to minimize the total cost for the passenger. There are three types of tickets: a ticket for one trip costs 20 byteland rubles, a ticket for 90 minutes costs 50 byteland rubles, and a ticket for one day (1440 minutes) costs 120 byteland rubles. A ticket for x minutes activated at time t can be used for trips started in time range from t to t + x - 1, inclusive. Assume that all trips take exactly one minute.\n\nInput: The first line of input contains an integer n representing the number of trips made by the passenger. Each of the following n lines contains an integer t_i representing the time of trip i (0 \u2264 t_i \u2264 10^9), measured in minutes from the time of starting the system. All t_i are different and given in ascending order, i.e. t_i + 1 > t_i holds for all 1 \u2264 i < n. Input arrives from standard input.\n\nOutput: Output n integers. For each trip, print the sum the passenger is charged after it.\n\nConstraints: There is at least one trip and at most 10^5 trips. The time of each trip is between 0 and 10^9 minutes from the start of the system.", "editorial": "", "tag": "['Dynamic programming', 'Sorting']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/756/B", "sample_test_cases": [{"input": "3\n10\n20\n30\n", "output": "20\n20\n10\n"}, {"input": "10\n13\n45\n46\n60\n103\n115\n126\n150\n256\n516\n", "output": "20\n20\n10\n0\n20\n0\n0\n20\n20\n10\n"}, {"input": "7\n100\n138\n279\n308\n396\n412\n821\n", "output": "20\n20\n20\n20\n20\n20\n0\n"}, {"input": "8\n0\n2\n51\n63\n69\n75\n80\n90\n", "output": "20\n20\n10\n0\n0\n0\n0\n20\n"}, {"input": "8\n0\n3\n5\n6\n7\n8\n9\n10\n", "output": "20\n20\n10\n0\n0\n0\n0\n0\n"}, {"input": "1\n0\n", "output": "20\n"}, {"input": "1\n0\n", "output": "20\n"}, {"input": "8\n0\n2\n51\n63\n69\n75\n80\n90\n", "output": "20\n20\n10\n0\n0\n0\n0\n20\n"}, {"input": "7\n100\n138\n279\n308\n396\n412\n821\n", "output": "20\n20\n20\n20\n20\n20\n0\n"}, {"input": "8\n0\n3\n5\n6\n7\n8\n9\n10\n", "output": "20\n20\n10\n0\n0\n0\n0\n0\n"}, {"input": "7\n000\n138\n279\n308\n396\n412\n821\n", "output": "20\n20\n20\n20\n20\n20\n0\n"}, {"input": "8\n0\n3\n5\n6\n7\n8\n9\n19\n", "output": "20\n20\n10\n0\n0\n0\n0\n0\n"}, {"input": "3\n2\n20\n30\n", "output": "20\n20\n10\n"}, {"input": "1\n1\n", "output": "20\n"}, {"input": "8\n0\n2\n4\n63\n69\n75\n80\n90\n", "output": "20\n20\n10\n0\n0\n0\n0\n20\n"}]}
{"statement": "Task: Given a tree with n nodes, each node having a value assigned to it, determine whether it is possible to delete at least one and at most k-1 edges from the tree so that for every connected component, the bitwise XOR of the values of the nodes in it is the same.\n\nInput: The input consists of multiple test cases. The first line of each test case contains two integers n and k. The second line contains n integers a1, a2, ..., an, representing the values assigned to each node. The next n-1 lines contain two integers ui and vi, representing an edge between nodes ui and vi. Input arrives from standard input.\n\nOutput: For each test case, output a single string \"YES\" if it is possible to delete the edges according to the given conditions, and \"NO\" otherwise.\n\nConstraints: 1 \u2264 t \u2264 5*10^4, 2 \u2264 k \u2264 n \u2264 10^5, 1 \u2264 ai \u2264 10^9, and the sum of n over all test cases doesn't exceed 2*10^5.", "editorial": "", "tag": "['Bit manipulation', 'Graph algorithms', 'Graph traversal', 'Constructive algorithms', 'Tree algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1592/C", "sample_test_cases": [{"input": "5\n2 2\n1 3\n1 2\n5 5\n3 3 3 3 3\n1 2\n2 3\n1 4\n4 5\n5 2\n1 7 2 3 5\n1 2\n2 3\n1 4\n4 5\n5 3\n1 6 4 1 2\n1 2\n2 3\n1 4\n4 5\n3 3\n1 7 4\n1 2\n2 3\n", "output": "NO\nYES\nNO\nYES\nNO\n"}, {"input": "2\n3 2\n1 1 1\n1 2\n1 3\n3 3\n3 3 1\n1 2\n2 3\n", "output": "NO\nNO\n"}, {"input": "1\n7 3\n2 2 3 3 3 3 3\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n", "output": "YES\n"}, {"input": "1\n5 2\n3 3 3 3 3\n1 2\n2 3\n3 4\n4 5\n", "output": "NO\n"}, {"input": "1\n7 6\n3 3 3 3 3 3 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "output": "YES\n"}, {"input": "1\n7 3\n4 1 2 1 1 1 1\n1 2\n1 3\n1 4\n2 5\n3 6\n4 7\n", "output": "NO\n"}, {"input": "1\n5 3\n1 1 1 1 3\n1 2\n2 3\n3 4\n4 5\n", "output": "NO\n"}, {"input": "1\n8 3\n16 16 8 8 1 3 3 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n", "output": "NO\n"}, {"input": "1\n5 5\n2 1 2 3 1\n1 2\n1 3\n2 4\n2 5\n", "output": "NO\n"}, {"input": "1\n5 3\n1 1 1 1 2\n1 2\n2 3\n3 4\n4 5\n", "output": "NO\n"}, {"input": "1\n9 3\n2 2 1 1 3 2 1 1 2\n1 2\n2 3\n2 4\n1 5\n1 6\n6 7\n6 8\n6 9\n", "output": "NO\n"}]}
{"statement": "Task: Given three integers t, l, and r, calculate the value of the expression t0\u00b7f(l) + t1\u00b7f(l + 1) + ... + tr - l\u00b7f(r) modulo 109 + 7, where f(n) is the minimal total number of pairwise comparisons needed to select the most beautiful participant from n girls in a beauty contest, where the participants are divided into groups and the most beautiful girl is selected from each group until there is only one girl left. \n\nInput: The input consists of a single line containing three integers t, l, and r, separated by spaces. The input arrives from standard input. \n\nOutput: The output should be a single integer, which is the value of the expression t0\u00b7f(l) + t1\u00b7f(l + 1) + ... + tr - l\u00b7f(r), calculated modulo 109 + 7. \n\nConstraints: 1 \u2264 t < 109 + 7, 2 \u2264 l \u2264 r \u2264 5\u00b7106.", "editorial": "", "tag": "['Greedy algorithms', 'Complete search', 'Number theory', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/822/D", "sample_test_cases": [{"input": "844079775 8212 4470298\n", "output": "274251678\n"}, {"input": "1 784471 4999165\n", "output": "1000000000\n"}, {"input": "491601604 602162 602166\n", "output": "24135010\n"}, {"input": "4 215 4999653\n", "output": "937577799\n"}, {"input": "1 8100 20381\n", "output": "1\n"}, {"input": "1 1324492 4999959\n", "output": "0\n"}, {"input": "959694842 4587040 4587045\n", "output": "15329026\n"}, {"input": "41295176 2 5000000\n", "output": "141314244\n"}, {"input": "5 3712 4994488\n", "output": "335285903\n"}, {"input": "1 2306415 4999972\n", "output": "1000000000\n"}, {"input": "919453876 2 5000000\n", "output": "206837932\n"}, {"input": "1 117021 4996616\n", "output": "1000000006\n"}, {"input": "837853536 2173078 2173083\n", "output": "36877759\n"}, {"input": "5 431999 611310\n", "output": "160643716\n"}, {"input": "7 2444902 2613424\n", "output": "619309304\n"}]}
{"statement": "Task: Given an unsorted array of integers, find the length of the longest increasing subsequence.\n\nInput: The input consists of a single line containing an unsorted array of integers. The length of the array is not given explicitly, but it is guaranteed to be at most 2500. The input is provided through standard input.\n\nOutput: The output consists of a single integer representing the length of the longest increasing subsequence in the input array.\n\nConstraints: Each integer in the input array is between -10^4 and 10^4, inclusive. The algorithm should run in O(n^2) time complexity, but there is a follow-up question asking if it can be improved to O(n log n) time complexity. There may be more than one longest increasing subsequence, but it is only necessary to return the length.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/longest-increasing-subsequence/", "sample_test_cases": [{"input": [[10, 9, 2, 5, 3, 7, 101, 18]], "output": 4}]}
{"statement": "Task: Given a tree-like road system with $n$ cities, each with a filling station that sells a limited amount of gasoline, find the maximum amount of gasoline that Nut can have at the end of a simple path between two cities. The length of each road decreases the amount of gasoline, and Nut cannot choose a path where he runs out of gasoline.\n\nInput: The input consists of an integer $n$ representing the number of cities, followed by $n$ integers $w_1, w_2, \\ldots, w_n$ representing the maximum amount of gasoline that Nut can buy in each city. The next $n-1$ lines describe the road system, with each line containing three integers $u$, $v$, and $c$ representing two cities connected by a road of length $c$.\n\nOutput: The output should be a single integer representing the maximum amount of gasoline that Nut can have at the end of the path.\n\nConstraints: $1 \\leq n \\leq 3 \\cdot 10^5$, $0 \\leq w_i \\leq 10^9$, $1 \\leq c \\leq 10^9$. The graph of road connectivity is guaranteed to be a tree. The input arrives from standard input.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1083/A", "sample_test_cases": [{"input": "3\n1 3 3\n1 2 2\n1 3 2\n", "output": "3\n"}, {"input": "5\n6 3 2 5 0\n1 2 10\n2 3 3\n2 4 1\n1 5 1\n", "output": "7\n"}, {"input": "1\n42\n", "output": "42\n"}, {"input": "10\n11 43 11 96 18 53 25 89 31 41\n2 4 41\n7 1 88\n3 2 19\n10 3 38\n8 4 97\n7 5 21\n7 2 71\n3 6 69\n9 5 19\n", "output": "98\n"}, {"input": "10\n28 8 0 1 5 2 9 1 2 81\n10 1 9\n6 5 78\n8 4 38\n3 10 74\n8 6 41\n7 2 21\n9 2 54\n2 6 90\n4 1 30\n", "output": "100\n"}, {"input": "10\n67 9 7 2 33 5 1 7 43 55\n2 4 38\n2 5 77\n9 8 91\n9 5 8\n10 5 4\n2 6 49\n9 1 5\n7 5 100\n3 10 13\n", "output": "181\n"}, {"input": "10\n8 63 0 10 86 14 5 49 13 5\n1 9 48\n6 9 5\n3 7 35\n9 5 3\n10 9 43\n2 6 4\n9 4 36\n8 7 10\n7 2 6\n", "output": "202\n"}, {"input": "10\n46 76 45 9 4 58 28 7 40 100\n10 2 8\n3 9 6\n6 1 9\n2 7 10\n4 6 31\n10 1 1\n8 4 29\n5 9 9\n7 5 3\n", "output": "351\n"}, {"input": "10\n81 34 31 38 69 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "output": "187\n"}, {"input": "10\n80 63 78 18 65 77 24 83 79 48\n5 3 67\n1 8 4\n1 2 83\n7 4 16\n6 7 50\n3 9 27\n10 7 74\n2 3 21\n10 2 47\n", "output": "248\n"}, {"input": "10\n96 72 39 45 93 64 13 7 3 28\n9 1 18\n1 7 15\n1 10 52\n4 1 93\n1 6 94\n1 5 23\n1 2 20\n8 1 13\n3 1 34\n", "output": "218\n"}, {"input": "10\n19 48 77 50 74 26 8 10 47 7\n6 9 95\n3 9 94\n9 7 76\n5 9 95\n8 9 4\n2 4 85\n1 2 77\n4 10 29\n1 9 60\n", "output": "77\n"}, {"input": "10\n4 85 87 24 19 100 27 73 89 46\n5 4 63\n8 9 18\n7 9 98\n8 1 61\n7 2 17\n3 9 39\n10 8 57\n1 4 80\n6 1 10\n", "output": "225\n"}, {"input": "4\n10408 544831 53650 494619\n1 4 682017\n4 3 46433\n4 2 98094\n", "output": "948573\n"}, {"input": "10\n81 34 31 38 69 62 54 18 72 29\n4 8 12\n2 9 25\n4 5 17\n5 7 35\n10 1 13\n9 3 53\n7 6 22\n1 6 82\n3 10 42\n", "output": "                                                             187\n"}]}
{"statement": "Task: Given an M x N grid, where each cell has an integer representing points, find the minimum initial points required to reach the bottom-right cell from the top-left cell, following certain rules. The rules are: \n1. Movement is only allowed to the right or down.\n2. Movement is only allowed through cells with positive points.\n3. The final cell must be reached with minimum positive points.\n\nInput: The input consists of three integers: N, M, and a 2D array of size N x M representing the grid. The input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum initial points required to reach the destination cell with minimum positive points.\n\nConstraints: N is between 1 and 1000, each cell in the grid can have a value between -10^9 and 10^9.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/minimum-points-to-reach-destination0540/1", "sample_test_cases": [{"input": "M = 3, N = 3 \n       arr[][] = {{-2,-3,3}, \n                  {-5,-10,1}, \n                  {10,30,-5}};", "output": "7"}, {"input": "M = 3, N = 2\n       arr[][] = {{2,3}, \n                  {5,10}, \n                  {10,30}};", "output": "1"}]}
{"statement": "Task: Given a sequence a_2, a_3, ..., a_{n} of positive integers, simulate a program that operates on the sequence until it terminates. The program has two integer variables, x and y, and performs operations on the sequence as follows: Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates. The program increases both x and y by a value equal to a_{x} simultaneously. The program now increases y by a_{x} while decreasing x by a_{x}. The program executes steps 2 and 3 (first step 2, then step 3) repeatedly until it terminates (it may never terminate). The task is to determine the final value of y for each run of the program on the sequence i, a_2, a_3, ..., a_{n}, or output -1 if the program does not terminate.\n\nInput: The input consists of two lines. The first line contains a single integer, n, representing the length of the sequence (2 \u2264 n \u2264 2\u00b710^5). The second line contains n-1 space-separated integers, a_2, a_3, ..., a_{n}, representing the sequence. The input is provided through standard input.\n\nOutput: The output consists of n-1 lines. On the i-th line, print the requested value when the program is run on the sequence i, a_2, a_3, ..., a_{n}. If the program does not terminate, output -1. The output is written to standard output.\n\nConstraints: 1 \u2264 a_{i} \u2264 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/283/B", "sample_test_cases": [{"input": "4\n2 4 1\n", "output": "3\n6\n8\n"}, {"input": "3\n1 2\n", "output": "-1\n-1\n"}, {"input": "5\n2 2 1 3\n", "output": "3\n-1\n-1\n-1\n"}, {"input": "2\n1\n", "output": "-1\n"}, {"input": "8\n7 6 2 6 2 6 6\n", "output": "8\n8\n12\n10\n-1\n-1\n20\n"}, {"input": "8\n4 5 3 2 3 3 3\n", "output": "5\n7\n-1\n-1\n-1\n-1\n-1\n"}, {"input": "3\n1 1\n", "output": "-1\n-1\n"}, {"input": "5\n3 2 4 2\n", "output": "4\n-1\n7\n-1\n"}, {"input": "10\n6 7 5 3 1 5 2 4 6\n", "output": "7\n9\n8\n-1\n-1\n-1\n-1\n-1\n-1\n"}, {"input": "8\n6 311942309 3 1 3 2 2\n", "output": "7\n311942311\n-1\n311942323\n311942317\n311942321\n12\n"}, {"input": "8\n2 3 1 2 2 3 3\n", "output": "3\n5\n-1\n-1\n-1\n-1\n-1\n"}, {"input": "6\n2 1 2 2 3\n", "output": "3\n-1\n-1\n-1\n-1\n"}, {"input": "23\n20 1 3 3 13 11 9 7 5 3 1 7 2 4 6 8 10 12 14 16 12 5\n", "output": "21\n-1\n-1\n-1\n18\n17\n16\n-1\n26\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n48\n-1\n37\n"}, {"input": "71\n28 11 39 275858941 64 69 66 18 468038892 49 47 45 43 41 39 37 35 33 31 29 27 25 23 21 19 17 15 13 11 9 7 5 3 1 25 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 701366631 51 25 11 11 49 33 67 43 57\n", "output": "29\n13\n42\n275858945\n69\n75\n73\n26\n468038901\n59\n58\n57\n56\n55\n54\n53\n52\n51\n50\n49\n48\n47\n-1\n-1\n113\n468038935\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n701366692\n-1\n-1\n111\n114\n-1\n-1\n-1\n-1\n-1\n"}, {"input": "23\n11 6 21 9 13 11 9 7 5 3 1 8 2 4 6 8 10 12 14 935874687 21 1\n", "output": "12\n8\n24\n13\n18\n17\n16\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n935874707\n-1\n44\n"}]}
{"statement": "Task: Given a long random string S and a dictionary of N words, two players, Teddy and Tracy, take turns erasing a contiguous substring of S that exists in the dictionary. The winner is the player who can't erase any substring in their turn. Determine the winner of the game, assuming both players play optimally.\n\nInput: The input consists of T test cases. Each test case contains a string S of length |S| and a dictionary of N words, where each word w_{i} is a string of length |w_{i}|. The input is read from standard input.\n\nOutput: For each test case, output a single line containing the name of the winner of the game.\n\nConstraints: 1 \u2264 T \u2264 5, 1 \u2264 N \u2264 30, 1 \u2264 |S| \u2264 30, 1 \u2264 |w_{i}| \u2264 30, and S and w_{i} contain only lowercase English letters.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures', 'Game theory']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/ASTRGAME", "sample_test_cases": [{"input": "3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nppi", "output": "Tracy\nTracy\nTeddy"}, {"input": "3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nipp", "output": "Tracy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nipp", "output": "Teddy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nppi", "output": "Teddy\nTracy\nTeddy\n"}, {"input": "3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nli\nipp", "output": "Tracy\nTracy\nTeddy\n"}, {"input": "3\ncodechef\n2\ncdoe\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nppi", "output": "Teddy\nTracy\nTeddy\n"}, {"input": "3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nississ\nmippi\nmi\nipp", "output": "Tracy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\ngoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nipp", "output": "Teddy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncdoe\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nipp", "output": "Teddy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\ngoo\n1\nbar\nmississhppi\n4\nssissi\nmippi\nmi\nipp", "output": "Teddy\nTracy\nTeddy\n"}, {"input": "3\ncodedhef\n2\ncdoe\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nipp", "output": "Tracy\nTracy\nTracy\n"}, {"input": "3\ncodedhef\n2\ncdoe\nchef\nfoo\n1\nbar\nmississippi\n4\nssissh\nmippi\nmi\nipp", "output": "Tracy\nTracy\nTracy\n"}, {"input": "3\ncodedhef\n2\ncdoe\nchee\nfoo\n1\nbar\nmississippi\n4\nssissh\nmippi\nmi\nipp", "output": "Tracy\nTracy\nTracy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\nfoo\n1\nbar\nmisiisssppi\n4\nssissi\nmippi\nmi\nipp", "output": "Teddy\nTracy\nTeddy\n"}, {"input": "3\ncodechef\n2\ncode\ndhef\nfoo\n1\nbar\nmississippi\n2\nssissi\nmippi\nmi\nppi", "output": "Teddy\nTracy\nTeddy\n"}]}
{"statement": "Task: Given a number n, starting with only one 'A' on a notepad, and being able to perform two operations: copy all and paste, find the minimum number of steps required to obtain exactly n 'A's on the notepad.\n\nInput: The input consists of a single integer n, representing the number of 'A's we want to obtain on the notepad. The input is provided through standard input.\n\nOutput: The output should be a single integer, representing the minimum number of steps required to obtain n 'A's on the notepad.\n\nConstraints: The input integer n will be in the range [1, 1000].", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/2-keys-keyboard/", "sample_test_cases": [{"input": [3], "output": 3}]}
{"statement": "Task: Given an array A of non-negative integers, find the minimum number of jumps required to reach the last index of the array, where each element in the array represents the maximum jump length at that position.\n\nInput: The input is received from standard input and consists of a single line containing an array A of non-negative integers. The length of the array is at most 10^4 and each element of the array is at most 10^5.\n\nOutput: The output should consist of a single integer, which represents the minimum number of jumps required to reach the last index of the array.\n\nConstraints: You can assume that you can always reach the last index.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/jump-game-ii/", "sample_test_cases": [{"input": [[2, 3, 1, 1, 4]], "output": 2}]}
{"statement": "Task: Given a list of integers $a_1, a_2, \\ldots,a_n$, find the maximum possible sum of $k$ integers from the list such that each selected integer is greater than a given threshold $m$, and no two selected integers are more than $d$ positions apart in the original list.\n\nInput: The first line of input contains three integers $n$, $d$, and $m$, representing the length of the list, the maximum distance between any two selected integers, and the threshold value, respectively. The second line contains $n$ integers $a_1, a_2, \\ldots,a_n$, representing the list of integers to select from. All input is received from standard input.\n\nOutput: A single integer representing the maximum possible sum of $k$ integers from the list that satisfy the given conditions.\n\nConstraints: $1\\le d\\le n\\le 10^5$, $0\\le m\\le 10^9$, and $0\\le a_i\\le 10^9$.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Amortized analysis', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1394/A", "sample_test_cases": [{"input": "5 2 11\n8 10 15 23 5\n", "output": "48\n"}, {"input": "20 2 16\n20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7\n", "output": "195\n"}, {"input": "1 1 0\n0\n", "output": "0\n"}, {"input": "100 61 71\n11 18 0 47 33 75 91 13 8 21 73 64 50 97 62 50 2 36 68 32 64 74 32 77 81 41 23 44 40 36 45 33 21 68 57 79 75 23 67 37 99 27 30 56 75 62 75 63 46 19 79 42 11 66 21 25 2 12 89 48 75 7 57 85 80 14 82 29 66 47 29 10 1 84 79 39 33 81 73 51 80 67 52 25 38 68 57 53 38 83 83 3 86 29 50 46 3 68 88 10\n", "output": "2765\n"}, {"input": "10 3 10\n17 17 17 8 7 6 5 4 1 1\n", "output": "64\n"}, {"input": "79 14 68\n55 91 81 39 60 85 43 53 41 12 23 70 26 61 51 92 52 23 78 41 20 49 38 57 86 77 59 74 86 12 8 79 32 70 69 43 78 37 88 71 22 0 21 21 30 3 76 87 98 52 83 66 79 60 56 31 19 89 73 81 79 16 76 79 94 23 65 7 53 81 21 63 11 31 35 17 31 65 89\n", "output": "2038\n"}, {"input": "39 37 39\n38 56 198 166 86 51 13 54 101 143 82 138 122 146 86 198 81 177 92 56 107 58 124 82 41 126 79 47 191 41 188 108 38 12 18 57 68 134 79\n", "output": "396\n"}, {"input": "4 4 8\n84 25 75 21\n", "output": "84\n"}, {"input": "5 3 3\n8 5 5 1 14\n", "output": "22\n"}, {"input": "1 1 1\n2\n", "output": "2\n"}, {"input": "10 1 73\n46 83 26 98 96 83 87 42 10 17\n", "output": "493\n"}, {"input": "10 3 10\n17 17 17 8 7 6 5 4 1 1\n", "output": "64\n"}, {"input": "39 37 39\n38 56 198 166 86 51 13 54 101 143 82 138 122 146 86 198 81 177 92 56 107 58 124 82 41 126 79 47 191 41 188 108 38 12 18 57 68 134 79\n", "output": "396\n"}, {"input": "79 14 68\n55 91 81 39 60 85 43 53 41 12 23 70 26 61 51 92 52 23 78 41 20 49 38 57 86 77 59 74 86 12 8 79 32 70 69 43 78 37 88 71 22 0 21 21 30 3 76 87 98 52 83 66 79 60 56 31 19 89 73 81 79 16 76 79 94 23 65 7 53 81 21 63 11 31 35 17 31 65 89\n", "output": "2038\n"}, {"input": "5 3 3\n8 5 5 1 14\n", "output": "22\n"}]}
{"statement": "Task: Given a row of $2n$ jam jars, each containing either strawberry or blueberry jam, Karlsson wants to empty a minimum number of jars such that the number of full strawberry and blueberry jam jars becomes equal. Karlsson can choose to empty the first non-empty jar to his left or right in one minute.\n\nInput: The input consists of $t$ test cases. For each test case, the first line contains an integer $n$ which represents the number of jars on one side of Karlsson. The second line contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ which represent the type of jam in each jar. The input is read from standard input.\n\nOutput: For each test case, output a single integer which represents the minimum number of jars Karlsson needs to empty to achieve an equal number of full strawberry and blueberry jam jars.\n\nConstraints: $1 \\le t \\le 1000$, $1 \\le n \\le 10^5$, $1 \\le a_i \\le 2$, and the sum of $n$ over all test cases does not exceed $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Implementation', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1278/C", "sample_test_cases": [{"input": "4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n", "output": "6\n0\n6\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n", "output": "6\n0\n6\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n2 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n", "output": "6\n2\n6\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n2 2 1 2\n3\n1 1 1 1 2 1\n2\n2 1 1 1\n", "output": "6\n2\n4\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n2 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 2 1\n", "output": "6\n2\n6\n0\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n2 2 1 2\n3\n1 1 1 1 2 1\n2\n2 1 2 1\n", "output": "6\n2\n4\n0\n"}, {"input": "4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 2 1\n2\n2 1 1 1\n", "output": "6\n0\n4\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 2 1\n", "output": "6\n0\n6\n0\n"}, {"input": "4\n6\n1 1 1 2 2 2 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 2 1\n2\n2 1 1 1\n", "output": "0\n0\n4\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 2\n2\n2 2 1 2\n3\n1 1 1 2 2 1\n2\n2 1 2 1\n", "output": "6\n2\n2\n0\n"}, {"input": "4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 2 1\n2\n2 2 1 1\n", "output": "6\n0\n4\n0\n"}, {"input": "4\n6\n1 1 2 1 2 1 2 2 2 1 1 2\n2\n1 2 2 2\n3\n1 1 1 1 1 2\n2\n2 1 1 1\n", "output": "0\n2\n4\n2\n"}, {"input": "4\n6\n1 1 1 2 2 2 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 2 1\n2\n2 2 1 1\n", "output": "0\n0\n4\n0\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 2 1 2\n2\n1 2 2 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n", "output": "4\n2\n6\n2\n"}, {"input": "4\n6\n1 1 1 1 2 1 2 1 2 1 1 1\n2\n2 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 2 1\n", "output": "12\n2\n6\n0\n"}]}
{"statement": "Task: Given an array of n integers, find the maximum value of a function f on all continuous subsegments of the array. The function f takes an array b and returns the first element of b if the length of b is 1, otherwise it returns the result of applying the bitwise XOR operation to each adjacent pair of elements in b and recursively applying f to the resulting array until a single element is left.\n\nInput: The input consists of an integer n representing the length of the array, followed by n integers representing the elements of the array. The input also includes an integer q representing the number of queries, followed by q lines each containing two integers l and r representing a query. All input is provided through standard input.\n\nOutput: The output should consist of q lines, each line containing the maximum value of f on all continuous subsegments of the array specified by the corresponding query.\n\nConstraints: The length of the input array is at most 5000 and each element is at most 2^30 - 1. The number of queries is at most 100,000 and the subsegments specified in each query have lengths between 1 and n.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/984/D", "sample_test_cases": [{"input": "6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 6\n1 2\n", "output": "60\n30\n60\n3\n"}, {"input": "3\n16 4 1\n2\n2 3\n1 2\n", "output": "5\n20\n"}, {"input": "6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 6\n1 3\n", "output": "60\n30\n60\n6\n"}, {"input": "3\n5 4 1\n2\n2 3\n1 2\n", "output": "5\n5\n"}, {"input": "6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 6\n1 1\n", "output": "60\n30\n60\n1\n"}, {"input": "6\n1 2 4 8 16 32\n4\n1 6\n3 5\n3 6\n1 3\n", "output": "60\n24\n60\n6\n"}, {"input": "3\n5 4 0\n2\n2 3\n1 2\n", "output": "4\n5\n"}, {"input": "6\n1 2 1 8 16 32\n4\n1 6\n3 5\n1 6\n1 3\n", "output": "57\n24\n57\n3\n"}, {"input": "3\n2 4 0\n2\n2 3\n1 2\n", "output": "4\n6\n"}, {"input": "6\n1 2 1 8 16 23\n4\n1 6\n3 5\n1 6\n1 2\n", "output": "31\n24\n31\n3\n"}, {"input": "6\n1 2 4 8 16 32\n4\n1 6\n2 5\n2 4\n1 2\n", "output": "60\n30\n12\n3\n"}, {"input": "3\n5 7 1\n2\n2 3\n1 2\n", "output": "7\n7\n"}, {"input": "6\n1 2 4 8 16 20\n4\n1 6\n3 5\n3 6\n1 3\n", "output": "30\n24\n28\n6\n"}, {"input": "6\n1 2 4 8 16 53\n4\n1 6\n3 5\n1 6\n1 3\n", "output": "61\n24\n61\n6\n"}, {"input": "6\n1 2 1 14 16 32\n4\n1 6\n3 5\n1 6\n1 2\n", "output": "63\n30\n63\n3\n"}]}
{"statement": "Task: Given an array of n integers, find three indices delim0, delim1, delim2 (0 \u2264 delim0 \u2264 delim1 \u2264 delim2 \u2264 n) that divide the array into four segments, such that the sum of the first and third segments minus the sum of the second and fourth segments is maximal.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 5000) representing the size of the array, followed by n integers representing the elements of the array. The input is provided through standard input.\n\nOutput: The output should be three integers representing the indices delim0, delim1, delim2 (0 \u2264 delim0 \u2264 delim1 \u2264 delim2 \u2264 n) that divide the array into the four segments, such that the value of res is maximal. If there are multiple answers, print any of them.\n\nConstraints: The elements of the array can be as large as -10^9 and as small as 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Complete search']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/846/C", "sample_test_cases": [{"input": "10\n0 0 0 0 0 0 0 0 0 0\n", "output": "0 0 0\n"}, {"input": "10\n-6 -4 -7 0 7 9 8 3 8 7\n", "output": "0 3 10\n"}, {"input": "1\n0\n", "output": "0 0 0\n"}, {"input": "100\n2 1 -2 -1 -2 0 -1 -2 1 2 0 1 0 -2 -1 -2 0 2 0 1 -2 -2 2 0 -2 2 -2 0 2 0 2 0 -1 0 -2 2 -1 -1 -2 -1 0 -2 2 0 -2 -2 -2 -1 1 0 -2 -1 2 -1 -2 1 -1 1 1 2 -2 1 -2 1 2 2 -2 1 -2 0 -1 -1 -2 -2 1 0 -1 -1 2 0 2 0 -1 2 1 -1 2 0 2 1 1 1 -1 -1 1 -2 0 0 -2 0\n", "output": "2 78 92\n"}, {"input": "1\n10000\n", "output": "0 0 1\n"}, {"input": "1\n-1\n", "output": "0 0 0\n"}, {"input": "100\n-1 -1 0 1 -1 0 0 -1 -1 1 1 0 1 0 -1 1 0 0 -1 0 0 0 1 0 0 1 1 1 1 0 -1 -1 0 0 0 1 1 -1 0 0 1 1 1 0 -1 -1 0 -1 0 -1 -1 0 1 0 1 -1 1 -1 -1 -1 0 0 -1 0 -1 -1 0 -1 1 1 -1 1 0 1 -1 -1 1 1 -1 1 0 -1 1 -1 1 1 1 1 1 -1 0 1 0 0 -1 0 1 1 -1 -1\n", "output": "43 68 98\n"}, {"input": "2\n-3 -1\n", "output": "0 0 0\n"}, {"input": "4\n-1 1 -2 -2\n", "output": "0 1 2\n"}, {"input": "10\n0 0 0 0 0 0 0 -1 0 0\n", "output": "0 0 0\n"}, {"input": "10\n-6 -4 -7 0 5 9 8 3 8 7\n", "output": "0 3 10\n"}, {"input": "1\n1\n", "output": "0 0 1\n"}, {"input": "100\n2 1 -2 -1 -2 0 -1 -2 1 2 0 1 0 -2 -1 -2 0 2 0 1 -2 -2 2 0 -2 2 -2 0 2 0 2 0 -1 0 -2 2 -1 -1 -2 -1 0 -2 2 0 -2 -2 -2 -1 1 0 -2 -1 2 -1 -4 1 -1 1 1 2 -2 1 -2 1 2 2 -2 1 -2 0 -1 -1 -2 -2 1 0 -1 -1 2 0 2 0 -1 2 1 -1 2 0 2 1 1 1 -1 -1 1 -2 0 0 -2 0\n", "output": "2 78 92\n"}, {"input": "100\n-1 -1 0 1 -1 0 0 -1 -1 1 1 0 1 0 -2 1 0 0 -1 0 0 0 1 0 0 1 1 1 1 0 -1 -1 0 0 0 1 1 -1 0 0 1 1 1 0 -1 -1 0 -1 0 -1 -1 0 1 0 1 -1 1 -1 -1 -1 0 0 -1 0 -1 -1 0 -1 1 1 -1 1 0 1 -1 -1 1 1 -1 1 0 -1 1 -1 1 1 1 1 1 -1 0 1 0 0 -1 0 1 1 -1 -1\n", "output": "43 68 98\n"}, {"input": "4\n-1 2 -2 -2\n", "output": "0 1 2\n"}]}
{"statement": "Task: Given two arrays $a$ and $b$ of length $n$, the task is to minimize the total cost of two arrays. The cost of an array is defined as the sum of the squares of the sum of all pairs of its elements. The only allowed operation is to swap the elements of $a$ and $b$ at any index.\n\nInput: The input consists of several test cases. For each test case, the first line contains an integer $t$ ($1 \\leq t \\leq 40$) \u2014 the number of test cases. The following lines describe each test case. The first line of each test case contains an integer $n$ ($1 \\leq n \\leq 100$) \u2014 the length of both arrays. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$) \u2014 elements of the first array. The third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$) \u2014 elements of the second array. Input is provided through standard input.\n\nOutput: For each test case, output the minimum possible total cost of two arrays.\n\nConstraints: The sum of $n$ over all test cases does not exceed $100$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1637/D", "sample_test_cases": [{"input": "3\n1\n3\n6\n4\n3 6 6 6\n2 7 4 1\n4\n6 7 2 4\n2 5 3 5\n", "output": "0\n987\n914\n"}, {"input": "1\n98\n26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n98 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "output": "10548181\n"}, {"input": "1\n98\n26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "output": "9372104\n"}, {"input": "4\n33\n2 1 3 6 5 9 5 7 6 7 2 9 9 9 8 1 3 6 10 7 9 3 8 5 4 7 6 6 1 3 3 4 4\n9 9 6 9 10 8 2 6 4 7 10 6 10 1 8 8 1 4 10 7 5 2 5 6 1 5 8 8 3 10 1 10 3\n21\n5 9 8 5 8 10 10 7 3 8 7 3 5 7 7 10 3 7 8 2 7\n7 7 6 7 7 2 7 7 4 7 6 10 8 8 4 7 7 5 7 4 3\n40\n3 5 4 3 3 4 1 9 6 1 4 4 2 5 2 1 10 5 10 4 8 2 6 8 7 9 2 2 2 9 10 1 5 9 10 2 1 3 6 6\n4 1 9 7 9 10 1 1 9 10 1 5 2 5 2 2 7 7 2 4 10 2 10 10 6 4 10 2 1 9 4 9 2 7 3 10 7 2 9 6\n6\n7 1 5 7 8 9\n9 6 2 6 3 6\n", "output": "156830\n72528\n198479\n4265\n"}, {"input": "1\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n43 50 72 94 20 19 78 17 58 59 43 45 82 70 97 10 37 53 25 67 100 86 67 51 8 37 80 48 10 23 62 51 24 82 82 85 69 45 92 46 60 32 14 84 52 37 9 24 44 23 1 91 75 3 91 14 20 68 10 90 23 49 12 79 41 94 1 60 83 21 8 96 2 42 22 97 75 42 57 51 12 91 2 25 20 4 33 50 81 61 4 57 53 48 83 41 51 80 92 96\n", "output": "45540992\n"}, {"input": "1\n100\n77 18 18 20 58 11 45 18 21 15 44 87 77 65 94 83 68 73 43 84 75 100 66 39 63 44 60 16 100 4 83 53 37 11 95 71 38 57 66 31 40 60 36 37 92 79 30 55 46 25 54 45 85 38 29 82 60 11 11 69 30 1 53 100 62 61 17 75 99 9 31 8 100 53 57 8 11 26 95 72 50 77 90 88 80 84 53 50 23 3 78 27 76 82 4 7 36 13 63 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "48251672\n"}, {"input": "1\n90\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44\n", "output": "25646194\n"}]}
{"statement": "Task: Given a non-empty array containing only positive integers, determine whether the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\nInput: The input consists of a non-empty array of positive integers, which arrives from standard input.\n\nOutput: The output is a boolean value indicating whether the array can be partitioned into two subsets with equal sum.\n\nConstraints: The input array contains only positive integers, each of which will not exceed 100. The size of the array will not exceed 200.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/partition-equal-subset-sum/", "sample_test_cases": [{"input": [[1, 5, 5, 11]], "output": true}]}
{"statement": "Task: Given two non-empty strings s1 and s2, each at most 100 characters long, and two integers n1 and n2, find the maximum number of times s2 can be obtained from s1 repeated n1 times.\n\nInput: The input consists of two non-empty strings s1 and s2, each at most 100 characters long, and two integers 0 \u2264 n1 \u2264 106 and 1 \u2264 n2 \u2264 106. The input is provided through standard input.\n\nOutput: The output is a single integer M, which represents the maximum number of times the string s2 can be obtained from the string s1 repeated n1 times.\n\nConstraints: The length of each string is at most 100 characters, and the integers n1 and n2 are between 0 and 106 and 1 and 106, respectively.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/count-the-repetitions/", "sample_test_cases": [{"input": ["\"acb\"", 4, "\"ab\"", 2], "output": 2}]}
{"statement": "Task: Given m 0s and n 1s, and an array of strings consisting of only 0s and 1s, find the maximum number of strings that can be formed using each 0 and 1 at most once.\n\nInput: The input consists of three integers m, n, and k, where m represents the number of 0s available, n represents the number of 1s available, and k represents the number of strings in the array. This is followed by k lines, each containing a string consisting of only 0s and 1s.\n\nOutput: The output is a single integer representing the maximum number of strings that can be formed using the given number of 0s and 1s, where each 0 and 1 can be used at most once.\n\nConstraints: 0 \u2264 m, n \u2264 100, 1 \u2264 k \u2264 600.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/ones-and-zeroes/", "sample_test_cases": [{"input": [["\"10\"", "\"0001\"", "\"111001\"", "\"1\"", "\"0\""], 5, 3], "output": 4}]}
{"statement": "Task: Given two strings, determine which string is better based on the number of distinct subsequences each string has. If both strings have an equal count of distinct subsequences, then return the first string.\n\nInput: The input consists of two strings, str1 and str2, with lengths n and m, respectively. The strings are received from standard input.\n\nOutput: The output is a single string, which is the better string between the two given strings based on the number of distinct subsequences they have.\n\nConstraints: 1 \u2264 n, m \u2264 30.\n\nNote: A subsequence of a string is a sequence of characters that appears in the same order as they appear in the original string, but not necessarily consecutively. A distinct subsequence is a subsequence that appears only once in a given string. The task is to compare the number of distinct subsequences of two given strings and return the string with the higher count. If both strings have an equal number of distinct subsequences, then return the first string.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures', 'Complete search']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/better-string/1", "sample_test_cases": [{"input": "str1 = \"gfg\", str2 = \"ggg\"", "output": "\"gfg\""}, {"input": "str1 = \"a\", str2 = \"b\"", "output": "\"a\""}]}
{"statement": "Task: Given a sequence of statements, consisting of simple statements and for statements, find the number of ways in which the statements can be indented to form a valid Python program.\n\nInput: The input consists of the number of commands in the program followed by the program itself. The first line contains a single integer N (1 \u2264 N \u2264 5000)\u00a0\u2014 the number of commands in the program. N lines of the program follow, each line describing a single command. Each command is either \"f\" (denoting \"for statement\") or \"s\" (\"simple statement\"). It is guaranteed that the last line is a simple statement. The input arrives from standard input.\n\nOutput: Output one line containing an integer - the number of ways the given sequence of statements can be indented to form a valid Python program. \n\nConstraints: The input consists of the number of commands in the program followed by the program itself, where 1 \u2264 N \u2264 5000 and each command is either \"f\" (denoting \"for statement\") or \"s\" (\"simple statement\"). The last line of the program is guaranteed to be a simple statement.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/909/C", "sample_test_cases": [{"input": "4\ns\nf\nf\ns\n", "output": "1\n"}, {"input": "4\nf\ns\nf\ns\n", "output": "2\n"}, {"input": "156\nf\ns\nf\ns\nf\ns\ns\ns\ns\nf\ns\ns\nf\nf\ns\nf\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\nf\nf\nf\nf\nf\ns\ns\ns\ns\nf\ns\nf\ns\nf\ns\nf\nf\nf\nf\ns\ns\nf\nf\ns\ns\ns\ns\nf\ns\nf\ns\nf\ns\nf\ns\ns\ns\nf\ns\ns\nf\ns\nf\nf\ns\ns\ns\nf\nf\nf\nf\ns\ns\nf\nf\nf\nf\nf\nf\nf\ns\nf\ns\ns\ns\nf\nf\ns\ns\ns\ns\ns\nf\nf\nf\nf\ns\nf\nf\ns\nf\ns\ns\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\ns\nf\nf\nf\ns\nf\nf\ns\ns\nf\ns\nf\nf\ns\ns\ns\ns\nf\ns\nf\nf\ns\ns\nf\nf\nf\ns\ns\nf\nf\nf\ns\nf\ns\nf\nf\ns\n", "output": "666443222\n"}, {"input": "4\nf\nf\ns\ns\n", "output": "3\n"}, {"input": "2\nf\ns\n", "output": "1\n"}, {"input": "1\ns\n", "output": "1\n"}, {"input": "3\nf\nf\ns\n", "output": "1\n"}, {"input": "2\ns\ns\n", "output": "1\n"}, {"input": "156\ns\nf\ns\ns\ns\ns\nf\ns\ns\ns\nf\nf\ns\nf\nf\ns\nf\nf\nf\ns\nf\nf\ns\nf\nf\ns\ns\nf\nf\ns\nf\nf\nf\nf\nf\ns\ns\nf\ns\nf\nf\nf\ns\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\ns\nf\nf\ns\nf\nf\nf\ns\ns\nf\nf\ns\nf\ns\ns\ns\ns\ns\ns\ns\nf\ns\nf\nf\nf\ns\ns\ns\ns\nf\nf\ns\nf\nf\ns\ns\nf\ns\nf\ns\ns\nf\nf\nf\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\nf\ns\ns\ns\nf\ns\ns\ns\ns\nf\nf\ns\nf\nf\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\ns\nf\nf\nf\nf\ns\ns\nf\nf\nf\nf\ns\nf\ns\nf\ns\ns\ns\nf\nf\ns\n", "output": "479461584\n"}, {"input": "66\ns\nf\ns\ns\nf\ns\ns\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\ns\ns\nf\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\ns\nf\nf\ns\n", "output": "392847498\n"}, {"input": "156\nf\ns\nf\ns\nf\ns\ns\ns\ns\nf\ns\ns\nf\nf\ns\nf\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\nf\nf\nf\nf\nf\ns\ns\ns\ns\nf\ns\nf\ns\nf\ns\nf\nf\nf\nf\ns\ns\nf\nf\ns\ns\ns\ns\nf\ns\nf\ns\nf\ns\nf\ns\ns\ns\nf\ns\ns\nf\ns\nf\nf\ns\ns\ns\nf\nf\nf\nf\ns\ns\nf\nf\nf\nf\nf\nf\nf\ns\nf\ns\ns\ns\nf\nf\ns\ns\ns\ns\ns\nf\nf\nf\nf\ns\nf\nf\ns\nf\ns\ns\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\ns\nf\nf\nf\ns\nf\nf\ns\ns\nf\ns\nf\nf\ns\ns\ns\ns\nf\ns\nf\nf\ns\ns\nf\nf\nf\ns\ns\nf\nf\nf\ns\nf\ns\nf\nf\ns\n", "output": "666443222"}, {"input": "2\nf\ns\n", "output": "1"}, {"input": "1\ns\n", "output": "1"}, {"input": "66\ns\nf\ns\ns\nf\ns\ns\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\ns\ns\nf\nf\ns\ns\nf\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\ns\ns\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\ns\nf\nf\ns\n", "output": "392847498"}, {"input": "156\ns\nf\ns\ns\ns\ns\nf\ns\ns\ns\nf\nf\ns\nf\nf\ns\nf\nf\nf\ns\nf\nf\ns\nf\nf\ns\ns\nf\nf\ns\nf\nf\nf\nf\nf\ns\ns\nf\ns\nf\nf\nf\ns\nf\nf\nf\ns\ns\ns\nf\ns\ns\nf\nf\ns\ns\nf\ns\nf\nf\ns\nf\nf\nf\ns\ns\nf\nf\ns\nf\ns\ns\ns\ns\ns\ns\ns\nf\ns\nf\nf\nf\ns\ns\ns\ns\nf\nf\ns\nf\nf\ns\ns\nf\ns\nf\ns\ns\nf\nf\nf\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\nf\ns\ns\ns\nf\ns\ns\ns\ns\nf\nf\ns\nf\nf\nf\nf\ns\nf\ns\ns\nf\nf\ns\nf\ns\nf\nf\nf\nf\ns\ns\nf\nf\nf\nf\ns\nf\ns\nf\ns\ns\ns\nf\nf\ns\n", "output": "479461584"}]}
{"statement": "Task: Given a tree with $n$ vertices, where each vertex $v$ has an associated range of valid values $[l_v, r_v]$, find an assignment of a number $a_v$ to each vertex such that the sum of the absolute differences between the assigned numbers of all edges is maximized.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $n$ denoting the number of vertices in the tree. The next $n$ lines contain two integers $l_i$ and $r_i$ representing the range of valid values for the number assigned to vertex $i$. The next $n-1$ lines contain two integers $u$ and $v$ representing an edge between vertices $u$ and $v$. The input is provided through standard input.\n\nOutput: For each test case, output a single integer representing the maximum possible beauty of the tree.\n\nConstraints: $1 \\le t \\le 250$, $2 \\le n \\le 10^5$, $1 \\le l_i \\le r_i \\le 10^9$, and the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$. The given graph is guaranteed to be a tree.", "editorial": "", "tag": "['Graph traversal', 'Greedy algorithms', 'Tree algorithms', 'Dynamic programming', 'Divide and conquer']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1528/A", "sample_test_cases": [{"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n8\n62\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n8\n61\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n8\n54\n"}, {"input": "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "5\n8\n61\n"}, {"input": "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "5\n8\n54\n"}, {"input": "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "5\n8\n65\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 12\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n12\n54\n"}, {"input": "3\n2\n1 6\n3 2\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "4\n8\n62\n"}, {"input": "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n0 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "5\n8\n70\n"}, {"input": "3\n2\n1 6\n3 6\n1 2\n3\n1 3\n4 6\n7 2\n1 2\n2 3\n6\n4 14\n12 20\n21 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "5\n9\n54\n"}, {"input": "3\n2\n0 6\n3 6\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n21 32\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "6\n8\n65\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n10 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n3 16\n11 17\n3 17\n3 3\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n12\n58\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n5 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n8\n62\n"}, {"input": "3\n2\n1 11\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n4 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 2\n6 5\n1 5\n2 6\n4 6\n", "output": "8\n8\n61\n"}, {"input": "3\n2\n1 6\n3 8\n1 2\n3\n1 3\n4 6\n7 9\n1 2\n2 3\n6\n3 14\n12 20\n12 19\n2 12\n10 17\n3 17\n3 5\n6 5\n1 5\n2 6\n4 6\n", "output": "7\n8\n59\n"}]}
{"statement": "Task: Given an N x N grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance. The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|. If no land or water exists in the grid, return -1.\n\nInput: The input is a 2D array of size N x N containing only 0s and 1s. The input is received from standard input.\n\nOutput: The output is an integer representing the maximum distance of a water cell from its nearest land cell. If there is no land or water in the grid, return -1.\n\nConstraints: The input grid has a size of N x N, where 1 <= N <= 100. Each cell of the grid contains either a 0 or a 1.", "editorial": "", "tag": "['Matrices', 'Dynamic programming', 'Data structures', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/as-far-from-land-as-possible/", "sample_test_cases": [{"input": [[[1, 0, 1], [0, 0, 0], [1, 0, 1], [], []]], "output": 3}]}
{"statement": "Task: Given an integer $n$, find the number of ordered pairs of positive integers $(a,b)$ such that the sum of $a$ and $b$ is equal to $n$ when adding in a non-standard way. In the non-standard way, when adding two digits, if the sum is greater than or equal to $10$, the carry is added to the column two columns to the left instead of the immediate left column.\n\nInput: The input consists of multiple test cases. The first line of input contains an integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of test cases. Each test case consists of a single integer $n$ ($2 \\leq n \\leq 10^9$) \u2014 the number Alice shows Bob. The input is provided through standard input.\n\nOutput: For each test case, output one integer \u2014 the number of ordered pairs of positive integers $(a,b)$ that can be added in a non-standard way to obtain the given number $n$.\n\nConstraints: The input integer $n$ is between $2$ and $10^9$, inclusive. The number of test cases $t$ is between $1$ and $1000$, inclusive.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1567/C", "sample_test_cases": [{"input": "5\n100\n12\n8\n2021\n10000\n", "output": "9\n4\n7\n44\n99\n"}, {"input": "2\n999999999\n1000000000\n", "output": "999999998\n9999\n"}, {"input": "1\n721156322\n", "output": "154725877\n"}, {"input": "1\n721156322\n", "output": "154725877\n"}, {"input": "2\n999999999\n1000000000\n", "output": "999999998\n9999\n"}, {"input": "1\n1156079886\n", "output": "253466911\n"}, {"input": "2\n836671254\n1000000000\n", "output": "313597598\n9999\n"}, {"input": "5\n110\n12\n8\n2021\n10000\n", "output": "20\n4\n7\n44\n99\n"}, {"input": "1\n1668987868\n", "output": "1169528551\n"}, {"input": "2\n817117042\n1000000000\n", "output": "102346023\n9999\n"}, {"input": "5\n110\n2\n8\n2021\n10000\n", "output": "20\n1\n7\n44\n99\n"}, {"input": "1\n888159521\n", "output": "725506534\n"}, {"input": "2\n352942581\n1000000000\n", "output": "192407906\n9999\n"}, {"input": "5\n110\n2\n8\n2021\n10100\n", "output": "20\n1\n7\n44\n109\n"}, {"input": "1\n438619218\n", "output": "177692266\n"}]}
{"statement": "Task: Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nInput: The input consists of a non-empty string s and a list of non-empty words in a dictionary wordDict. The input is provided through standard input.\n\nOutput: The output should be a boolean value indicating whether the given string s can be segmented into a sequence of words from the dictionary wordDict.\n\nConstraints: The length of the string s does not exceed 300 and the length of the dictionary wordDict does not exceed 1000. The length of each word in the dictionary is at most 20.\n\nMathematical and Computer Science Concepts: Given a string s and a dictionary wordDict, we can represent the problem as a graph where each node represents a substring of s and an edge exists between two nodes if the concatenation of the substrings represented by those nodes is a word in the dictionary wordDict. The problem then becomes determining if there exists a path from the starting node (representing the entire string s) to the ending node (representing an empty string) in this graph. This can be done using dynamic programming, where we keep track of whether a substring of s can be segmented into words from the dictionary wordDict. We can then use this information to determine if the entire string s can be segmented into words from the dictionary wordDict.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "leetcode", "url": "https://leetcode.com/problems/word-break/", "sample_test_cases": [{"input": ["\"leetcode\"", ["\"leet\"", "\"code\""]], "output": false}]}
{"statement": "Task: Given a matrix mat[][] of size N x M, find the largest rectangular sub-matrix by area whose sum is 0. If there are multiple solutions, return the rectangle which starts from minimum column index. If you still have multiple solutions return the one starting from minimum row index. If you still have multiple solutions return the one having greatest row number. If no such matrix is present return a zero (0) size matrix.\n\nInput: The input consists of three integers, N, M, and the matrix mat[][] of size N x M. The matrix mat[][] contains integers between -1000 and 1000.\n\nOutput: The output is a 2D matrix representing the largest sub-matrix whose sum is 0. If no such matrix is present, return a zero (0) size matrix.\n\nConstraints: 1 <= N, M <= 100.", "editorial": "", "tag": "['String algorithms', 'Range queries', 'Dynamic programming', 'Matrices', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "geeksforgeeks", "url": "https://practice.geeksforgeeks.org/problems/largest-rectangular-sub-matrix-whose-sum-is-0/1", "sample_test_cases": [{"input": "N = 3, M = 3\r\nmat[][] =  1, 2, 3\r\n          -3,-2,-1\r\n           1, 7, 5", "output": "1, 2, 3\r\n        -3,-2,-1"}, {"input": "N = 4, M = 4\r\nmat[][] = 9, 7, 16, 5\r\n          1,-6,-7, 3\r\n          1, 8, 7, 9\r\n          7, -2, 0, 10", "output": "-6,-7\r\n8, 7\r\n-2, 0 "}]}
{"statement": "Task: Given a sequence of n integers, find the longest subsegment such that it is possible to change at most one number in the subsegment to make it strictly increasing. The length of the subsegment is defined as the difference between its ending and starting indices plus one.\n\nInput: The input consists of two lines. The first line contains an integer n, which represents the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n, which represent the elements of the sequence. The input is provided through standard input.\n\nOutput: The output should consist of a single integer, which represents the length of the longest subsegment that satisfies the given condition.\n\nConstraints: The input sequence has at most 10^5 elements, and each element is an integer between 1 and 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Amortized analysis', 'Implementation']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/446/A", "sample_test_cases": [{"input": "6\n7 2 3 1 5 6\n", "output": "5\n"}, {"input": "10\n424238336 649760493 681692778 714636916 719885387 804289384 846930887 957747794 596516650 189641422\n", "output": "9\n"}, {"input": "50\n804289384 846930887 681692778 714636916 957747794 424238336 719885387 649760493 596516650 189641422 25202363 350490028 783368691 102520060 44897764 967513927 365180541 540383427 304089173 303455737 35005212 521595369 294702568 726956430 336465783 861021531 59961394 89018457 101513930 125898168 131176230 145174068 233665124 278722863 315634023 369133070 468703136 628175012 635723059 653377374 656478043 801979803 859484422 914544920 608413785 756898538 734575199 973594325 149798316 38664371\n", "output": "19\n"}, {"input": "1\n1\n", "output": "1\n"}, {"input": "2\n1000000000 1000000000\n", "output": "2\n"}, {"input": "5\n1 2 3 4 1\n", "output": "5\n"}, {"input": "10\n1 2 3 4 5 5 6 7 8 9\n", "output": "6\n"}, {"input": "5\n1 1 1 1 1\n", "output": "2\n"}, {"input": "5\n1 1 2 3 4\n", "output": "5\n"}, {"input": "5\n1 2 3 1 6\n", "output": "5\n"}, {"input": "1\n42\n", "output": "1\n"}, {"input": "5\n1 2 42 3 4\n", "output": "4\n"}, {"input": "5\n1 5 9 6 10\n", "output": "4\n"}, {"input": "5\n5 2 3 4 5\n", "output": "5\n"}, {"input": "3\n2 1 3\n", "output": "3\n"}]}
{"statement": "Task: Given three arrays A, B, and C of lengths p, q, and r respectively, find the sum of a function f(X, Y, Z) over all triplets (X, Y, Z) where X belongs to A, Y belongs to B, and Z belongs to C. The function f(X, Y, Z) is defined as (X + Y) * (Y + Z) if X \u2264 Y and Y \u2265 Z, and 0 otherwise. The output should be the sum modulo 1000000007.\n\nInput: The input consists of T test cases. Each test case starts with a line containing two integers p, q, and r, denoting the lengths of arrays A, B, and C respectively. The next three lines contain p, q, and r integers respectively, representing the elements of arrays A, B, and C. Input is provided through standard input.\n\nOutput: The output should consist of T lines, each containing a single integer giving the sum of f(X, Y, Z) over all valid triplets (X, Y, Z) modulo 1000000007.\n\nConstraints: 1 \u2264 T \u2264 10, 1 \u2264 p, q, r \u2264 100000, and 1 \u2264 every array element \u2264 1000000000.", "editorial": "", "tag": "['Dynamic programming', 'Range queries']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/SUMQ", "sample_test_cases": [{"input": ["1 ", "3 1 3", "1 2 3", "5", "4 5 6", "", ""], "output": ["399"]}]}
