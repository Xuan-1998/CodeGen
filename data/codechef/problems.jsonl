{"statement": "Task: Given the number of passes N and the number of players K, find the number of ways the ball can be passed between the players such that Lionel Messi receives the ball after exactly N passes. The output should be the number of ways modulo 1000000007.\n\nInput: The input consists of T test cases. The first line of each test case contains two integers N and K. \n\nOutput: For each test case, output a single integer, the number of ways the winning play might happen modulo 1000000007.\n\nConstraints: 1 \u2264 T \u2264 100, 2 \u2264 N \u2264 1000, and 1 \u2264 K \u2264 10.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/FCBARCA", "sample_test_cases": [{"input": ["2", "2 4", "4 2"], "output": ["4", "6"]}, {"input": "2\n3 4\n4 2", "output": "12\n6\n"}, {"input": "2\n3 4\n4 3", "output": "12\n21\n"}, {"input": "2\n3 1\n4 2", "output": "0\n6\n"}, {"input": "2\n3 1\n4 3", "output": "0\n21\n"}]}
{"statement": "Task: Given $N$ sets of integers, find the number of ways to choose a sequence of integers from each set such that no two adjacent elements in the sequence are equal. The output should be the count of such sequences modulo $998,244,353$.\n\nInput: The input consists of an integer $N$ followed by $N$ lines, where each line contains an integer $|A_i|$ followed by $|A_i|$ space-separated integers representing the elements of the set $A_i$. The input is provided through standard input.\n\nOutput: A single integer representing the number of valid sequences, modulo $998,244,353$.\n\nConstraints: $2 \\leq N \\leq 200,000$, $|A_i| \\geq 1$ for each $i$, $\\sum_{i=1}^N |A_i| \\leq 200,000$, and $1 \\leq c_{i,j} \\leq 200,000$ for each $i,j$. There are two subtasks, one with $N \\leq 100$ and the other with the original constraints.\n\nMathematical Concepts: Sets, Sequences, Modulo Arithmetic.\n\nComputer Science Concepts: Standard Input, Integer Overflow.", "editorial": "", "tag": "['Dynamic programming', 'Square root algorithms']", "difficulties": "VERY_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/CIRCOLOR", "sample_test_cases": [{"input": "3\n3 1 2 3\n2 1 2\n2 2 3", "output": "3"}]}
{"statement": "Task: Given a board of size n x m, find the minimum number of cells containing mice that scare a little elephant while it travels from the top-left corner to the bottom-right corner of the board. The elephant can only move right or down, and a cell can contain a mouse that scares the elephant if it is adjacent to any cell that the elephant has passed through.\n\nInput: The first line of input contains T, the number of test cases. Each test case starts with two integers n and m, the size of the board, followed by n lines each containing m digits 0 or 1 representing the cells of the board. The input is provided through standard input.\n\nOutput: The output should contain T lines, where each line contains a single integer representing the minimum number of cells containing mice that scare the elephant for the corresponding test case.\n\nConstraints: 1 \u2264 T \u2264 50, 2 \u2264 n, m \u2264 100. The cells of the board can only contain the digits 0 or 1.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/LEMOUSE", "sample_test_cases": [{"input": ["2", "3 9", "001000001", "111111010", "100100100", "7 9", "010101110", "110110111", "010011111", "100100000", "000010100", "011011000", "000100101"], "output": ["9", "10"]}, {"input": "2\n3 9\n001000001\n111111010\n100100100\n7 9\n010101110\n110110111\n010011111\n100100000\n000010100\n011011000\n000100101", "output": "9\n10"}]}
{"statement": "Task: Given a binary matrix A of size N x M, count the number of square submatrices of A that have ones on and above their main diagonal.\n\nInput: The input consists of two integers N and M, followed by N lines each containing M characters that are either '0' or '1'. The input is provided through standard input.\n\nOutput: The output should consist of a single integer - the answer to the problem.\n\nConstraints: 1 \u2264 N,M \u2264 2000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "HARD", "source": "codechef", "url": "https://www.codechef.com/problems/MATRIX2", "sample_test_cases": [{"input": "2 3\n011\n111", "output": "6"}]}
{"statement": "Task: Given integers N and M, find the minimum sum of values of all cells in a binary matrix of size N x M such that for every cell (i, j), the sum of row i is equal to the sum of column j.\n\nInput: The first line of input contains a single integer T, representing the number of test cases. Each test case consists of a single line containing two integers N and M, representing the number of rows and columns in the binary matrix. The input is provided through standard input.\n\nOutput: For each test case, output on a new line the minimum sum of values of all cells in a binary matrix of size N x M such that for every cell (i, j), the sum of row i is equal to the sum of column j.\n\nConstraints: 1 \u2264 T \u2264 10^5, and 1 \u2264 N, M \u2264 5000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "VERY_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/MNVST", "sample_test_cases": [{"input": "2\n3 3\n4 5", "output": "5\n10"}]}
{"statement": "Task: Given a sequence of the first n natural numbers, improve the bogosort algorithm by not shuffling elements that are already in the correct position. Calculate the expected amount of shuffles needed to sort the sequence using this improved algorithm.\n\nInput: The input consists of t test cases, where each case contains a single integer n representing the number of elements in the sequence. Input is provided through standard input.\n\nOutput: For each test case, output the expected amount of shuffles needed for the improved algorithm to sort the sequence of the first n natural numbers in the form of irreducible fractions.\n\nConstraints: There are at most 150 test cases, and each sequence contains between 2 and 150 elements.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Mathematics', 'Probability']", "difficulties": "MEDIUM_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/BOGOSORT", "sample_test_cases": [{"input": "3\n2\n6\n10", "output": "2\n1826/189\n877318/35343"}, {"input": "3\n2\n4\n10", "output": "2\n5\n877318/35343\n"}, {"input": "3\n2\n6\n12", "output": "2\n1826/189\n19455868963/549972423\n"}, {"input": "3\n4\n6\n12", "output": "5\n1826/189\n19455868963/549972423\n"}, {"input": "3\n4\n6\n19", "output": "5\n1826/189\n260073418750644288862/2955241273022663625\n"}]}
{"statement": "Task: Given a budget $P$, $N$ songs and $M$ albums are available for purchase. Each song has a greatness value $v_i$, a price $p_i$, and belongs to an album $a_i$. Each album has a price $b_i$. The task is to find the maximum total greatness of songs that can be bought with the given budget, either individually or as part of albums.\n\nInput: The input consists of three integers $N$, $M$, and $P$, followed by $N$ lines containing three integers each: $a_i$, $p_i$, and $v_i$, and one line containing $M$ space-separated integers $b_i$.\n\nOutput: The output is a single integer representing the maximum total greatness of songs that can be bought.\n\nConstraints: $1 \\leq N, M, P \\leq 1,000$, $1 \\leq b_i, p_i \\leq P$, and $1 \\leq v_i \\leq 10^6$ for all $i$. Additionally, $1 \\leq a_i \\leq M$ for all $i$. Input is provided through standard input.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "VERY_HARD", "source": "codechef", "url": "https://www.codechef.com/problems/SONGSHOP", "sample_test_cases": [{"input": "5 2 24\n1 7 2\n1 5 2\n1 4 1\n2 9 1\n2 13 2\n10 15", "output": "7"}]}
