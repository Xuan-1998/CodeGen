{"statement": "Task: Tanya is standing next to a row of $n$ candy boxes, numbered from $1$ to $n$. Each box contains $r_i$ candies of color $c_i$, where $c_i$ can be 'R', 'G', or 'B'. Tanya wants to eat at least $k$ candies while following two conditions: (1) she cannot eat candies of the same color one after another, and (2) in each next box from which she eats candies, there should be strictly more candies than in the previous one. Tanya can move to the neighbor box or eat candies in the current box. The task is to find the minimum number of seconds Tanya needs to eat at least $k$ candies, where each movement takes one second.\n\nInput: The input consists of an integer $n$, the initial position of Tanya $s$, and the lower bound on the number of candies to eat $k$. The following line contains $n$ integers $r_i$, which are the numbers of candies in the boxes. The third line contains a sequence of $n$ letters 'R', 'G', and 'B', meaning the colors of candies in the correspondent boxes. The input arrives from standard input.\n\nOutput: The output is the minimal number of seconds to eat at least $k$ candies. If the solution doesn't exist, print \"-1\".\n\nConstraints: $1 \\le n \\le 50$, $1 \\le s \\le n$, and $1 \\le k \\le 2000$. The numbers of candies in the boxes are between $1$ and $50$.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1057/C", "sample_test_cases": [{"input": "5 3 10\n1 2 3 4 5\nRGBRR\n", "output": "4\n"}, {"input": "2 1 15\n5 6\nRG\n", "output": "-1\n"}, {"input": "6 1 21\n4 2 3 5 1 6\nRGBGRB\n", "output": "15\n"}, {"input": "6 1 21\n6 5 4 3 2 1\nRGBRGB\n", "output": "10\n"}, {"input": "1 1 10\n10\nR\n", "output": "0\n"}]}
{"statement": "Task: Given the number of days n and the number of marks strictly above the water level on each day mi, find the minimum possible sum of the number of marks strictly below the water level among all days. Arkady observes a river for n consecutive days and makes a mark on the side of the channel at the height of the water level. If a mark coincides with a mark made before, no new mark is created.\n\nInput: The input consists of two lines. The first line contains a single positive integer n, which represents the number of days (1 \u2264 n \u2264 105). The second line contains n space-separated integers m1, m2, ..., mn, which represent the number of marks strictly above the water on each day (0 \u2264 mi < i). The input arrives from standard input.\n\nOutput: Output one single integer, which represents the minimum possible sum of the number of marks strictly below the water level among all days.\n\nConstraints: The number of marks strictly above the water level on each day mi is between 0 and i-1.", "editorial": "", "tag": "['Dynamic programming', 'Data structures', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/957/D", "sample_test_cases": [{"input": "3\n0 1 1\n", "output": "0\n"}, {"input": "4\n0 0 1 2\n", "output": "0\n"}, {"input": "2\n0 0\n", "output": "0\n"}, {"input": "4\n0 1 1 0\n", "output": "1\n"}, {"input": "3\n0 1 0\n", "output": "1\n"}]}
{"statement": "Task: Given an array $a$ of length $n$, the task is to find the minimum possible length of the array that can be obtained by repeatedly replacing a pair of neighboring equal elements with one element whose value is one more than the value of the replaced elements.\n\nInput: The input consists of two lines. The first line contains a single integer $n$ which is the length of the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ which are the initial values of the array $a$. The input is provided through standard input.\n\nOutput: The output is a single integer which is the minimum possible length of the array that can be obtained by performing the given operation any number of times.\n\nConstraints: The input array $a$ has length $n$ such that $1 \\leq n \\leq 500$ and each element $a_i$ of the array satisfies $1 \\leq a_i \\leq 1000$.\n\nMathematical concepts: array, integer, operation, pair, neighboring, equal, value.\n\nComputer science concepts: input, output, constraints, standard input.", "editorial": "", "tag": "['Dynamic programming', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1312/E", "sample_test_cases": [{"input": "5\n4 3 2 2 3\n", "output": "2\n"}, {"input": "7\n3 3 4 4 4 3 3\n", "output": "2\n"}, {"input": "3\n1 3 5\n", "output": "3\n"}, {"input": "1\n1000\n", "output": "1\n"}, {"input": "15\n67 67 65 65 66 66 66 68 67 67 67 65 65 66 70\n", "output": "2\n"}]}
{"statement": "Task: Given a two-dimensional universe represented by a rectangular grid with n lines and m columns, where each cell can either be occupied by a static particle or be empty, calculate the average lifespan of a dynamic particle. The dynamic particle appears in a random empty cell and moves to a randomly chosen destination cell along the shortest path through the cells unoccupied by the static particles. The particle disappears upon reaching the destination cell.\n\nInput: The input consists of two integers n and m representing the size of the universe, followed by n lines each containing m symbols representing the universe without dynamic particles. The symbol 'X' represents a static particle and '.' represents an empty cell. The input is provided through standard input.\n\nOutput: Calculate the average lifespan of a dynamic particle with an accuracy of at least 6 decimal places. The output should be provided to standard output.\n\nConstraints: 2 \u2264 n, m \u2264 1000. The described universe satisfies the properties described above, that is no two static particles can be in one column or in one row, besides, they can't be positioned in the diagonally adjacent cells.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/57/D", "sample_test_cases": [{"input": "4 5\n.....\n.....\n.....\n.....\n", "output": "2.8500000000\n"}, {"input": "8 10\n..........\n..........\n..........\n..........\n..........\n..........\n..X.......\n..........\n", "output": "5.9387918603\n"}, {"input": "10 10\n..........\n..........\n.....X....\n..........\n.........X\n..........\n..........\n..........\n..........\n..........\n", "output": "6.6334860475\n"}, {"input": "10 7\n.......\n......X\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n", "output": "5.5584961143\n"}, {"input": "5 2\n..\n.X\n..\nX.\n..\n", "output": "2.6250000000\n"}]}
{"statement": "Task: Given an undirected tree with n vertices and n-1 edges, assign each edge to a private company numbered from 1 to 10^6 such that for each vertex, the number of different companies that repair edges that have this vertex at one end does not exceed 2. The goal is to minimize the maximum number of edges assigned to a single company.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains an integer n (2 \u2264 n \u2264 3000) \u2014 the number of vertices in the tree. Next, n-1 lines follow, each containing two integers u and v (1 \u2264 u,v \u2264 n), indicating that there is an edge between vertices u and v. Input is provided through standard input.\n\nOutput: For each test case, output the minimum possible number of edges assigned to the most used company r, followed by n-1 integers c_1, c_2, ..., c_{n-1} (1 \u2264 c_i \u2264 10^6), where c_i indicates the company to repair the i-th edge. If there are multiple optimal assignments, any of them can be printed.\n\nConstraints: $1\\leq T\\leq 1000$; $1\\leq n\\leq 3000$; the sum of all values n for all test cases in the input does not exceed 3000.", "editorial": "", "tag": "['Tree algorithms', 'Sorting', 'Dynamic programming']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1211/H", "sample_test_cases": [{"input": "3\n3\n1 2\n2 3\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n7\n3 1\n1 4\n4 6\n5 1\n2 4\n1 7\n", "output": "\n1\n10 20\n3\n1 1 1 2 2 \n2\n11 11 12 13 12 13\n"}]}
{"statement": "Task: Given the total number of points scored by each team in all the sets during a volleyball match, find the best match score for \"Team A\". The match consists of up to five sets, and the first four sets are played until one of the teams scores at least 25 points, while the fifth set is played until one of the teams scores at least 15 points. The match ends when one of the teams wins three sets. The output should be the best match score formatted as \"x:y\", where x is the number of sets won by \"Team A\" and y is the number of sets won by their opponent, followed by the set scores in the order they were played.\n\nInput: The input consists of an integer m (1 \u2264 m \u2264 50 000) representing the number of matches found by Alice in the book, followed by m lines, each containing two integers a and b (0 \u2264 a, b \u2264 200) representing the number of points scored by \"Team A\" and their opponents, respectively. The input arrives from standard input.\n\nOutput: The output should be the best match score formatted as \"x:y\", where x is the number of sets won by \"Team A\" and y is the number of sets won by their opponent, followed by the set scores in the order they were played. If the teams could not score a and b points respectively, output \"Impossible\".\n\nConstraints: 1 \u2264 m \u2264 50,000; 0 \u2264 a, b \u2264 200.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1089/A", "sample_test_cases": [{"input": "1\n75 94\n", "output": "3:1\n0:25 25:23 25:23 25:23 \n"}, {"input": "1\n75 20\n", "output": "3:0\n25:20 25:0 25:0 \n"}, {"input": "1\n76 24\n", "output": "3:0\n26:24 25:0 25:0 \n"}, {"input": "1\n75 70\n", "output": "3:1\n25:23 25:22 0:25 25:0 \n"}, {"input": "6\n75 0\n90 90\n20 0\n0 75\n78 50\n80 100\n", "output": "3:0\n25:0 25:0 25:0 \n3:1\n40:38 25:23 0:25 25:4 \nImpossible\n0:3\n0:25 0:25 0:25 \n3:0\n28:26 25:23 25:1 \n3:2\n40:38 25:12 0:25 0:25 15:0 \n"}]}
{"statement": "Task: Given a tree with n nodes, count the number of permutations of n elements such that when the elements are placed on a circle, the edges of the tree drawn on the circle do not cross each other.\n\nInput: The input consists of an integer n (2 \u2264 n \u2264 2\u00d710^5) representing the number of nodes in the tree, followed by n-1 lines each containing two integers u and v (1 \u2264 u, v \u2264 n) representing an edge between nodes u and v.\n\nOutput: The output is a single integer representing the number of valid permutations modulo 998244353.\n\nConstraints: The input guarantees that the given edges form a tree.", "editorial": "", "tag": "['Tree algorithms', 'Combinatorics', 'Graph traversal', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1173/D", "sample_test_cases": [{"input": "8\n4 5\n1 2\n6 3\n2 3\n2 8\n4 7\n2 4\n", "output": "2304\n"}, {"input": "7\n2 7\n2 6\n4 7\n7 3\n7 5\n1 7\n", "output": "1680\n"}, {"input": "3\n1 2\n3 2\n", "output": "6\n"}, {"input": "2\n2 1\n", "output": "2\n"}, {"input": "10\n5 4\n5 2\n3 7\n9 3\n3 2\n3 1\n3 8\n9 10\n1 6\n", "output": "19200\n"}]}
{"statement": "Task: Given a sequence A of length n, where each element is either in the form +x or -, define f(S) as the sum of a multiset T that is iteratively updated based on the elements of S. For each element in S, if it's in the form +x, add x to T; otherwise, erase the smallest element from T (if T is empty, do nothing). For all subsequences B of A, compute the sum of f(B) modulo 998244353.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 500) representing the length of A, followed by n lines where each line starts with either + or - and is followed by an integer x (1 \u2264 x < 998244353) if the line starts with +. The input integers x are less than 998244353. Input arrives from standard input.\n\nOutput: The output is a single integer, which is the sum of f(B) modulo 998244353 for all subsequences B of A.\n\nConstraints: The input integers x are less than 998244353.", "editorial": "", "tag": "['Sorting', 'Combinatorics', 'Implementation', 'Dynamic programming', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1542/D", "sample_test_cases": [{"input": "3\n+ 489111368\n+ 489111368\n+ 489111368\n", "output": "878114651\n"}, {"input": "3\n+ 202794029\n+ 810021800\n+ 810021800\n", "output": "303640045\n"}, {"input": "2\n+ 717107178\n+ 717107178\n", "output": "871940006\n"}, {"input": "4\n+ 68335221\n+ 68335221\n+ 68335221\n-\n", "output": "163454404\n"}, {"input": "3\n-\n-\n-\n", "output": "0\n"}]}
{"statement": "Task: Given a queue of n monsters with weights a_1, a_2, ..., a_n, and a final queue of k monsters with weights b_1, b_2, ..., b_k, determine if it is possible to obtain the final queue by allowing monsters to eat each other. If it is possible, output one of the possible orders of eating monsters that led to the current queue.\n\nInput: The input consists of two lines. The first line contains a single integer n, the number of monsters in the initial queue. The second line contains n integers a_1, a_2, ..., a_n, representing the initial weights of the monsters. The third line contains a single integer k, the number of monsters in the final queue. The fourth line contains k integers b_1, b_2, ..., b_k, representing the weights of the monsters in the final queue. Input arrives from standard input.\n\nOutput: If it is impossible to obtain the final queue, output \"NO\" (without quotes). Otherwise, output \"YES\" (without quotes) in the first line, followed by the chronological order of actions that led to the final queue. Each line should contain the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating, the queue is enumerated again. If there are several answers, print any of them.\n\nConstraints: 1 \u2264 n \u2264 500, 1 \u2264 k \u2264 n, 1 \u2264 a_i \u2264 10^6, 1 \u2264 b_j \u2264 5*10^8.", "editorial": "", "tag": "['Greedy algorithms', 'Dynamic programming', 'Amortized analysis', 'Constructive algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/733/C", "sample_test_cases": [{"input": "6\n1 2 2 2 1 2\n2\n5 5\n", "output": "YES\n2 L\n1 R\n4 L\n3 L\n"}, {"input": "5\n1 2 3 4 5\n1\n15\n", "output": "YES\n5 L\n4 L\n3 L\n2 L\n"}, {"input": "5\n1 1 1 3 3\n3\n2 1 6\n", "output": "NO"}, {"input": "5\n1 1 1 1 2\n3\n1 1 4\n", "output": "YES\n5 L\n4 L\n"}, {"input": "5\n1 1 1 1 1\n4\n1 1 2 1\n", "output": "NO"}]}
{"statement": "Task: Given a string $s$ of length $n$, find the minimum number of operations required to make a given substring of $s$ \"beautiful\". A string is beautiful if it does not contain a palindrome substring of length at least 2. The allowed operations are changing any character of the string to one of the first 3 letters of the Latin alphabet.\n\nInput: The input consists of an integer $n$ and $m$ denoting the length of the string and the number of queries respectively. This is followed by the string $s$ of length $n$ and $m$ lines containing two integers $l_i$ and $r_i$ representing the parameters of the $i$-th query. The input is read from standard input.\n\nOutput: The output consists of $m$ lines, where each line contains a single integer representing the cost of the substring of the string $s$ from $l_i$-th to $r_i$-th position, inclusive.\n\nConstraints: $1 \\le n, m \\le 2 \\cdot 10^5$, $1 \\le l_i \\le r_i \\le n$ and each character of the string is one of the first 3 letters of the Latin alphabet (in lowercase).", "editorial": "", "tag": "['String algorithms', 'Dynamic programming', 'Complete search', 'Constructive algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1555/D", "sample_test_cases": [{"input": "5 4\nbaacb\n1 3\n1 5\n4 5\n2 3\n", "output": "1\n2\n0\n1\n"}, {"input": "1 1\na\n1 1\n", "output": "0\n"}, {"input": "10 3\nababababab\n1 2\n1 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "10 3\nababababab\n1 2\n1 2\n1 2\n", "output": "0\n0\n0\n"}, {"input": "1 1\na\n1 1\n", "output": "0\n"}]}
{"statement": "Task: Given a kingdom with n towns connected by n bi-directional roads, find the minimum possible inconvenience of the roads after closing down one of the roads so that all towns are still reachable from each other.\n\nInput: The input consists of an integer n (3 \u2264 n \u2264 2\u00b7105) representing the number of towns and roads, followed by n lines containing the roads description. Each line contains three integers ui, vi, li (1 \u2264 ui, vi \u2264 n, 1 \u2264 li \u2264 109) representing the numbers of towns connected by the i-th road and the length of the i-th road. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the minimum possible inconvenience of the roads after the refusal from one of the roads. The output is provided through standard output.\n\nConstraints: No road connects a town to itself, no two roads connect the same towns, and it's always possible to close down one of the roads so that all the towns are still reachable from each other.", "editorial": "", "tag": "['Tree algorithms', 'Graph algorithms', 'Graph traversal', 'Dynamic programming']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/835/F", "sample_test_cases": [{"input": "10\n5 9 5\n2 9 7\n1 9 7\n5 6 5\n8 2 4\n2 3 1\n1 7 3\n4 1 2\n4 10 2\n9 3 6\n", "output": "22"}, {"input": "3\n1 2 100\n2 3 1\n1 3 1\n", "output": "2"}, {"input": "20\n11 17 411400597\n20 17 206843639\n20 11 348936448\n11 18 66521115\n18 1 947892512\n18 15 997613373\n3 15 301119325\n4 3 870020024\n7 4 306516051\n9 18 10401163\n8 9 881697660\n19 9 69137441\n16 8 392123322\n12 8 97808879\n2 16 571629008\n2 14 213796342\n10 17 453948856\n10 6 485476287\n5 10 171549963\n13 20 921856441\n", "output": "4544916268"}, {"input": "3\n1 2 1\n2 3 100\n1 3 1\n", "output": "2"}, {"input": "3\n1 2 1\n2 3 1\n1 3 100\n", "output": "2"}]}
{"statement": "Task: Given a regular polygon with $n$ vertices labeled from $1$ to $n$ in counter-clockwise order, find the minimum weight among all possible triangulations of the polygon. The weight of a triangulation is the sum of weights of all triangles it consists of, where the weight of a triangle is the product of labels of its vertices.\n\nInput: The input consists of a single integer $n$ ($3 \\le n \\le 500$) representing the number of vertices in the regular polygon. The input is provided through standard input.\n\nOutput: The output consists of a single integer representing the minimum weight among all possible triangulations of the given polygon.\n\nConstraints: The input integer $n$ must be greater than or equal to 3 and less than or equal to 500.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1140/D", "sample_test_cases": [{"input": "3\n", "output": "6\n"}, {"input": "4\n", "output": "18\n"}, {"input": "5\n", "output": "38\n"}, {"input": "6\n", "output": "68\n"}, {"input": "7\n", "output": "110\n"}]}
{"statement": "Task: Given a binary table with two rows of equal length, partition it into any number of consecutive bi-tables and find the maximal sum of the smallest digit that does not occur in each bi-table.\n\nInput: The input consists of multiple test cases. For each test case, the first line contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of columns in the bi-table. Each of the next two lines contains a binary string of length $n$ \u2014 the rows of the bi-table. Input is provided through standard input.\n\nOutput: For each test case, output a single integer \u2014 the maximal sum of the smallest digit that does not occur in each bi-table obtained by cutting the given bi-table optimally.\n\nConstraints: The sum of $n$ over all test cases does not exceed $10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Constructive algorithms', 'Greedy algorithms']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1566/C", "sample_test_cases": [{"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n8\n2\n12\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "8\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111111\n", "output": "8\n9\n2\n12\n"}, {"input": "4\n7\n0101000\n1100100\n5\n01100\n10101\n2\n01\n01\n6\n000100\n111111\n", "output": "10\n8\n2\n10\n"}, {"input": "4\n7\n0101000\n1101100\n5\n01000\n10101\n2\n01\n01\n6\n000000\n111110\n", "output": "8\n9\n2\n11\n"}]}
{"statement": "Task: Given the coordinates of n + 2 points on a number line, where some points are marked as bearing and others are marked as ordinary, and the durability of each ordinary point, find the minimum durability required for an additional ordinary point to be added at any point between the first and last point such that the bearing points are connected and the building doesn't collapse. A point collapses if the length of the segment of the ceiling supported by it exceeds its durability, and the load is redistributed between the neighboring points. If there are only two bearing points left in the end, the whole construction collapses under the weight of the roof.\n\nInput: The input consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 105) \u2014 the number of ordinary points. The second line contains n + 2 integers x0, x1, ..., xn, xn + 1 (x0 = 0, xi < xi + 1 for 0 \u2264 i \u2264 n, xn + 1 \u2264 109) \u2014 the coordinates of the points. The third line contains n integers d1, d2, ..., dn (1 \u2264 di \u2264 109). The input arrives from standard input.\n\nOutput: Print a single number \u2014 the minimum possible durability of the point that you need to add in order to connect the bearing points and make the building stay. If you do not have to add the point, please print 0. The output is a single integer and it should be printed to standard output. The answer will be checked with the relative or absolute error 10 - 4.\n\nConstraints: The number of ordinary points is at most 105, the coordinates of the points are non-negative integers, and the durability of each ordinary point is a positive integer not exceeding 109.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/533/D", "sample_test_cases": [{"input": "1\n0 3 10\n2\n", "output": "3.5\n"}, {"input": "3\n0 50 100 150 200\n50 1 50\n", "output": "50.0\n"}, {"input": "4\n0 2 4 6 8 10\n1 3 2 1\n", "output": "2.0\n"}, {"input": "1\n0 3 10\n4\n", "output": "1.5\n"}, {"input": "2\n0 1 2 3\n1000000000 1000000000\n", "output": "0\n"}]}
{"statement": "Task: Given a string s consisting of uppercase Latin letters, determine if the string contains two non-overlapping substrings \"AB\" and \"BA\" in any order.\n\nInput: The input is a single line containing a string s of length between 1 and 10^5 consisting of uppercase Latin letters, which is read from standard input.\n\nOutput: Print \"YES\" if the string contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\nConstraints: The input string has a length between 1 and 10^5.", "editorial": "", "tag": "['String algorithms', 'Implementation', 'Greedy algorithms', 'Complete search', 'Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/550/A", "sample_test_cases": [{"input": "ABA\n", "output": "NO\n"}, {"input": "BACFAB\n", "output": "YES\n"}, {"input": "AXBYBXA\n", "output": "NO\n"}, {"input": "ABABAB\n", "output": "YES\n"}, {"input": "BBBBBBBBBB\n", "output": "NO\n"}]}
{"statement": "Task: Given a book with $n$ chapters, where each chapter has a list of required chapters that must be understood before it, determine the minimum number of times the book needs to be read to understand all the chapters. If it's impossible to understand the whole book, output -1.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$), representing the number of chapters in the book. The following $n$ lines describe the required chapters for each chapter. Each line starts with an integer $k_i$ ($0 \\le k_i \\le n-1$), representing the number of chapters required to understand chapter $i$. This is followed by $k_i$ integers $a_{i,1}, a_{i,2}, \\dots, a_{i, k_i}$ ($1 \\le a_{i, j} \\le n, a_{i, j} \\ne i, a_{i, j} \\ne a_{i, l}$ for $j \\ne l$), representing the chapters that must be understood before chapter $i$. Input is taken from standard input.\n\nOutput: For each test case, output a single integer representing the minimum number of times the book needs to be read to understand all the chapters. If it's impossible to understand the whole book, output -1. Output is printed to standard output.\n\nConstraints: The sum of $n$ and sum of $k_i$ over all test cases do not exceed $2\\cdot10^5$.", "editorial": "", "tag": "['Graph algorithms', 'Sorting', 'Implementation', 'Complete search', 'Dynamic programming', 'Data structures']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1572/A", "sample_test_cases": [{"input": "5\n4\n1 2\n0\n2 1 4\n1 2\n5\n1 5\n1 1\n1 2\n1 3\n1 4\n5\n0\n0\n2 1 2\n1 2\n2 2 1\n4\n2 2 3\n0\n0\n2 3 2\n5\n1 2\n1 3\n1 4\n1 5\n0\n", "output": "2\n-1\n1\n2\n5\n"}]}
{"statement": "Task: Given a sequence of n integers, find the maximum number of points that can be earned by choosing and deleting elements from the sequence. In a single step, the player can choose an element and delete it, along with all elements equal to ak + 1 and ak - 1.\n\nInput: The input consists of two lines. The first line contains an integer n, representing the number of integers in the sequence. The second line contains n integers a1, a2, ..., an. The input arrives from standard input.\n\nOutput: Print a single integer representing the maximum number of points that can be earned by the player.\n\nConstraints: 1 \u2264 n \u2264 105 and 1 \u2264 ai \u2264 105.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/456/C", "sample_test_cases": [{"input": "5\n3 3 4 5 4\n", "output": "11\n"}, {"input": "10\n8 9 6 5 6 4 10 9 1 4\n", "output": "39\n"}, {"input": "100\n6 6 8 9 7 9 6 9 5 7 7 4 5 3 9 1 10 3 4 5 8 9 6 5 6 4 10 9 1 4 1 7 1 4 9 10 8 2 9 9 10 5 8 9 5 6 8 7 2 8 7 6 2 6 10 8 6 2 5 5 3 2 8 8 5 3 6 2 1 4 7 2 7 3 7 4 10 10 7 5 4 7 5 10 7 1 1 10 7 7 7 2 3 4 2 8 4 7 4 4\n", "output": "296\n"}, {"input": "100\n7 5 1 8 5 6 6 2 6 2 7 7 3 6 2 4 4 2 10 2 2 2 10 6 6 1 5 10 9 1 5 9 8 9 4 1 10 5 7 5 7 6 4 8 8 1 7 8 3 8 2 1 8 4 10 3 5 6 6 10 9 6 5 1 10 7 6 9 9 2 10 10 9 1 2 1 7 7 4 10 1 10 5 5 3 8 9 8 1 4 10 2 4 5 4 4 1 6 2 9\n", "output": "328\n"}, {"input": "10\n1 7 1 4 9 10 8 2 9 9\n", "output": "40\n"}]}
{"statement": "Task: Given a computer network represented as a non-directed graph with n nodes and m edges, perform k experiments where cables are temporarily disconnected and the number of connected components in the graph is counted. The cables are then reconnected and the next experiment is carried out. Output the number of connected components for each experiment.\n\nInput: The input consists of integers n and m representing the number of computers and cables, respectively. This is followed by m lines containing pairs of integers xi and yi representing the cables that connect computers xi and yi. The next line contains an integer k representing the number of experiments. This is followed by k lines containing pairs of integers li and ri representing the cables that will be temporarily disconnected during each experiment. Input is taken from standard input.\n\nOutput: Output k integers representing the number of connected components in the graph during each experiment. Output is printed to standard output.\n\nConstraints: 2 \u2264 n \u2264 500, 1 \u2264 m \u2264 10^4, 1 \u2264 k \u2264 2\u00b710^4. The pairs of integers xi and yi in the cable descriptions satisfy 1 \u2264 xi, yi \u2264 n and xi \u2260 yi. The pairs of integers li and ri in the experiment descriptions satisfy 1 \u2264 li \u2264 ri \u2264 m.", "editorial": "", "tag": "['Spanning trees', 'Dynamic programming', 'Data structures', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/292/D", "sample_test_cases": [{"input": "7 14\n7 1\n1 5\n6 4\n7 6\n2 4\n2 4\n7 2\n3 1\n7 6\n6 7\n5 3\n5 4\n1 3\n6 2\n40\n2 3\n14 14\n13 14\n13 13\n7 9\n1 13\n12 14\n14 14\n12 12\n6 10\n6 14\n8 8\n14 14\n9 10\n8 9\n8 11\n9 9\n2 3\n1 11\n13 14\n4 11\n2 9\n1 10\n6 11\n3 3\n4 12\n5 11\n8 8\n7 14\n13 13\n14 14\n14 14\n8 12\n14 14\n8 8\n7 7\n2 11\n10 12\n4 5\n9 10\n", "output": "1\n1\n1\n1\n1\n6\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n4\n1\n1\n1\n3\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n3\n1\n1\n1\n"}, {"input": "3 3\n2 3\n3 1\n2 1\n5\n2 3\n3 3\n2 2\n2 2\n2 2\n", "output": "2\n1\n1\n1\n1\n"}, {"input": "2 1\n2 1\n2\n1 1\n1 1\n", "output": "2\n2\n"}, {"input": "8 10\n8 6\n8 7\n8 3\n3 7\n4 8\n1 6\n5 1\n8 7\n6 8\n1 6\n13\n1 10\n2 6\n3 3\n5 5\n2 2\n1 3\n10 10\n7 7\n2 4\n3 6\n2 7\n9 9\n3 6\n", "output": "8\n4\n2\n3\n2\n2\n2\n3\n3\n4\n5\n2\n4\n"}, {"input": "3 2\n3 2\n3 1\n4\n1 1\n1 2\n2 2\n2 2\n", "output": "2\n3\n2\n2\n"}]}
{"statement": "Task: Given an undirected graph with N vertices and M edges, where each edge is colored either black or red, assign a real number to each vertex so that the sum of values at the endpoints of each black edge is 1, the sum of values at the endpoints of each red edge is 2, and the sum of the absolute values of all assigned numbers is minimized. If it is not possible to assign the numbers, report that there is no feasible assignment.\n\nInput: The input consists of T test cases. The first line of each test case contains two integers N and M, the number of vertices and edges in the graph, respectively. The next M lines describe the edges. Each line contains three integers a, b, and c denoting that there is an edge between vertices a and b with color c (1 for black, 2 for red). Input is provided through standard input.\n\nOutput: For each test case, if there is a feasible assignment of the numbers, output \"YES\" on the first line, followed by N space-separated real numbers on the second line, where the i-th number is the number assigned to the i-th vertex. If there are several valid solutions, any of them can be output. If there is no feasible assignment, output \"NO\" on a single line. The output should be such that the sum of the numbers at the endpoints of each edge differs from the precise value by less than 10^{-6}, and the sum of the absolute values of all assigned numbers differs from the smallest possible by less than 10^{-6}.\n\nConstraints: $1 \\leq T \\leq 10$, $1 \\leq N \\leq 10^5$, $0 \\leq M \\leq 2N$, and the sum of N+M over all test cases is at most $5 \\times 10^5$.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Graph traversal', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1387/A", "sample_test_cases": [{"input": "76 38\n2 1 1\n65 4 1\n67 6 2\n66 8 1\n37 9 1\n3 11 2\n48 12 2\n23 18 2\n46 22 1\n10 24 1\n36 25 2\n42 26 2\n34 29 2\n45 30 1\n75 31 1\n21 32 1\n20 39 2\n14 40 2\n5 41 1\n61 43 2\n27 47 2\n44 49 1\n38 50 2\n13 51 2\n72 52 1\n35 53 1\n58 55 2\n56 57 2\n15 59 2\n16 62 1\n17 63 2\n28 64 1\n33 68 2\n76 69 1\n19 70 1\n60 71 1\n54 73 1\n7 74 2\n", "output": "YES\n1 0 2 1 1 2 2 1 1 1 0 2 2 2 2 1 2 2 1 2 1 1 0 0 2 2 2 1 2 1 1 0 2 0 1 0 0 2 0 0 0 0 2 1 0 0 0 0 0 0 0 1 0 1 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 \n"}, {"input": "3 14\n1 1 2\n1 1 2\n2 2 1\n2 3 2\n3 2 2\n1 1 2\n2 2 1\n2 3 2\n3 2 2\n3 2 2\n1 1 2\n1 1 2\n2 2 1\n2 3 2\n", "output": "YES\n1.00 0.50 1.50 "}, {"input": "4 4\n4 2 2\n4 3 1\n1 3 2\n1 2 1\n", "output": "NO"}, {"input": "4 4\n1 4 2\n1 2 1\n3 4 1\n3 2 1\n", "output": "NO"}, {"input": "4 5\n1 4 2\n3 2 1\n1 2 2\n4 3 1\n4 2 1\n", "output": "YES\n1.50 0.50 0.50 0.50 "}]}
{"statement": "Task: Given a supermarket with n goods, each with a price ci and a discount di, Karen wants to buy as many goods as possible without exceeding her budget b. She can only use a discount coupon for a good if she buys that good, and there are constraints on which coupons can be used together. Find the maximum number of different goods Karen can buy without exceeding her budget.\n\nInput: The input consists of two integers n and b, followed by n lines. Each of the n lines contains two integers ci and di, representing the price and discount of the i-th good. If i \u2265 2, the line also contains an integer xi, indicating that the xi-th coupon must be used before the i-th coupon can be used.\n\nOutput: Output a single integer representing the maximum number of different goods Karen can buy without exceeding her budget.\n\nConstraints: 1 \u2264 n \u2264 5000, 1 \u2264 b \u2264 10^9, 1 \u2264 ci, di \u2264 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Tree algorithms', 'Complete search']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/815/C", "sample_test_cases": [{"input": "8 9\n4 3\n8 3 1\n2 1 1\n4 2 2\n7 2 2\n3 1 2\n7 3 5\n2 1 3\n", "output": "4"}, {"input": "3 100\n100 48\n50 1 1\n50 1 1\n", "output": "2"}, {"input": "1 1000000000\n1000000000 1\n", "output": "1"}, {"input": "9 15\n3 1\n6 2 1\n8 3 2\n4 1 2\n2 1 2\n3 2 3\n8 7 1\n6 5 5\n8 4 4\n", "output": "7"}, {"input": "13 30\n6 4\n25 5 1\n7 1 2\n9 4 2\n10 2 1\n12 3 1\n5 2 3\n10 9 6\n2 1 1\n5 3 9\n10 2 10\n10 9 6\n3 2 11\n", "output": "9"}]}
{"statement": "Task: Given a non-decreasing sequence x1, x2, ..., xn and two integers a and b, the task is to transform the sequence into another sequence y1, y2, ..., yn such that 1 \u2264 yi \u2264 q and a \u2264 yi + 1 - yi \u2264 b. The transformation price is the sum of the squares of the differences between corresponding elements of x and y. The goal is to minimize this transformation price.\n\nInput: The input consists of four integers n, q, a, and b, followed by a non-decreasing sequence x1, x2, ..., xn. The input is provided through standard input.\n\nOutput: The output consists of two lines. The first line contains n real numbers, the sought sequence y1, y2, ..., yn. The second line contains the minimum transformation price, that is, the sum of the squares of the differences between corresponding elements of x and y.\n\nConstraints: The input constraints are 2 \u2264 n \u2264 6000, 1 \u2264 q, a, b \u2264 109, a\u00b7(n - 1) < q, and a \u2264 b. The input is provided through standard input. The output is provided through standard output. The answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.", "editorial": "", "tag": "['Mathematics', 'Dynamic programming', 'Data structures', 'Implementation']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/280/E", "sample_test_cases": [{"input": "5 24 4 37\n4 12 17 22 24\n", "output": "4.0000000000 12.0000000000 16.0000000000 20.0000000000 24.0000000000 \n5.0000000000\n"}, {"input": "100 10000 57 80\n8 189 347 678 700 816 1003 1066 1170 1237 1260 1343 1368 1514 1669 1684 1877 1905 1932 2014 2098 2267 2268 2280 2695 2844 2852 2913 3072 3118 3138 3164 3294 3387 3388 3432 3522 3541 3562 3593 3647 3818 3860 3936 3952 4015 4030 4377 4408 4440 4625 4887 5028 5042 5055 5179 5506 5524 5653 5790 5847 6035 6223 6374 6412 6417 6424 6542 6565 6635 6664 6792 7031 7254 7273 7360 7430 7449 7467 7484 7519 7680 7698 7906 7908 8160 8238 8239 8469 8647 8709 8740 8771 8867 9255 9319 9334 9346 9425 9953\n", "outputn17608422.1899999999\n"}, {"input": "100 10000 57 80\n8 189 347 678 700 816 1003 1066 1170 1237 1260 1343 1368 1514 1669 1684 1877 1905 1932 2014 2098 2267 2268 2280 2695 1555 2852 2913 3072 3118 3138 3164 3294 3387 3388 3432 3522 3541 3562 3593 3647 3818 3860 3936 3952 4015 4030 4377 4408 4440 4625 4887 5028 5042 5055 5179 5506 5524 5653 5790 5847 6035 6223 6374 6412 6417 6424 6542 6565 6635 6664 6792 7031 7254 7273 7360 7430 7449 7467 7484 7519 7680 7698 7906 7908 8160 8238 8239 8469 8647 8709 8740 8771 8867 9255 9319 9334 9346 9425 9953\n", "output": "875.519999999998618 955.519999999998618 1035.519999999998618 1115.519999999998618 1195.519999999998618 1275.519999999998618 1355.519999999998618 1435.519999999998618 1515.519999999998618 1595.519999999998618 1675.519999999998618 1755.519999999998618 1835.519999999998618 1915.519999999998618 1995.519999999998618 2075.519999999998618 2155.519999999998618 2235.519999999998618 2315.519999999998618 2395.519999999998618 2475.519999999998618 2555.519999999998618 2635.519999999998618 2715.519999999998618 2795.519999999998618 2875.519999999998618 2955.519999999998618 3035.519999999998618 3115.519999999998618 3195.519999999998618 3275.519999999998618 3355.519999999998618 3435.519999999998618 3515.519999999998618 3595.519999999998618 3675.519999999998618 3755.519999999998618 3835.519999999998618 3915.519999999998618 3995.519999999998618 4075.519999999998618 4155.519999999998618 4235.519999999998618 4315.519999999998618 4395.519999999998618 4475.519999999998618 4555.519999999998618 4635.519999999998618 4715.519999999998618 4795.519999999998618 4875.519999999998618 4955.519999999998618 5035.519999999998618 5115.519999999998618 5195.519999999998618 5275.519999999998618 5355.519999999998618 5435.519999999998618 5515.519999999998618 5595.519999999998618 5675.519999999998618 5755.519999999998618 5835.519999999998618 5915.519999999998618 5995.519999999998618 6075.519999999998618 6155.519999999998618 6235.519999999998618 6315.519999999998618 6395.519999999998618 6475.519999999998618 6555.519999999998618 6635.519999999998618 6715.519999999998618 6795.519999999998618 6875.519999999998618 6955.519999999998618 7035.519999999998618 7115.519999999998618 7195.519999999998618 7275.519999999998618 7355.519999999998618 7435.519999999998618 7515.519999999998618 7595.519999999998618 7675.519999999998618 7755.519999999998618 7835.519999999998618 7915.519999999998618 7995.519999999998618 8075.519999999998618 8155.519999999998618 8235.519999999998618 8315.519999999998618 8395.519999999998618 8475.519999999998618 8555.519999999998618 8635.519999999998618 8715.519999999998618 8795.519999999998618 \n19367816.960000000894070\n"}, {"input": "100 10000 57 80\n8 189 347 678 700 816 1003 1066 1170 1237 1260 1343 1368 1514 1669 1684 1877 1905 1932 2014 2098 2267 2268 2280 2695 1555 2852 2913 3072 3118 3138 3164 3294 3387 3388 3432 3522 3541 4747 3593 3647 3818 3860 3936 3952 4015 4030 4377 4408 4440 4625 4887 5028 5042 5055 5179 5506 5524 5653 5790 5847 6035 6223 6374 6412 6417 6424 6542 6565 6635 6664 6792 7031 7254 7273 7360 7430 7449 7467 7484 7519 7680 7698 7906 7908 8160 8238 8239 8469 8647 8709 8740 8771 8867 9255 9319 9334 9346 9425 9953\n", "output": "887.370000000002619 967.370000000002619 1047.370000000002619 1127.370000000002619 1207.370000000002619 1287.370000000002619 1367.370000000002619 1447.370000000002619 1527.370000000002619 1607.370000000002619 1687.370000000002619 1767.370000000002619 1847.370000000002619 1927.370000000002619 2007.370000000002619 2087.370000000002619 2167.370000000002619 2247.370000000002619 2327.370000000002619 2407.370000000002619 2487.370000000002619 2567.370000000002619 2647.370000000002619 2727.370000000002619 2807.370000000002619 2887.370000000002619 2967.370000000002619 3047.370000000002619 3127.370000000002619 3207.370000000002619 3287.370000000002619 3367.370000000002619 3447.370000000002619 3527.370000000002619 3607.370000000002619 3687.370000000002619 3767.370000000002619 3847.370000000002619 3927.370000000002619 4007.370000000002619 4087.370000000002619 4167.370000000002619 4247.370000000002619 4327.370000000002619 4407.370000000002619 4487.370000000002619 4567.370000000002619 4647.370000000002619 4727.370000000002619 4807.370000000002619 4887.370000000002619 4967.370000000002619 5047.370000000002619 5127.370000000002619 5207.370000000002619 5287.370000000002619 5367.370000000002619 5447.370000000002619 5527.370000000002619 5607.370000000002619 5687.370000000002619 5767.370000000002619 5847.370000000002619 5927.370000000002619 6007.370000000002619 6087.370000000002619 6167.370000000002619 6247.370000000002619 6327.370000000002619 6407.370000000002619 6487.370000000002619 6567.370000000002619 6647.370000000002619 6727.370000000002619 6807.370000000002619 6887.370000000002619 6967.370000000002619 7047.370000000002619 7127.370000000002619 7207.370000000002619 7287.370000000002619 7367.370000000002619 7447.370000000002619 7527.370000000002619 7607.370000000002619 7687.370000000002619 7767.370000000002619 7847.370000000002619 7927.370000000002619 8007.370000000002619 8087.370000000002619 8167.370000000002619 8247.370000000002619 8327.370000000002619 8407.370000000002619 8487.370000000002619 8567.370000000002619 8647.370000000002619 8727.370000000002619 8807.370000000002619 \n19920157.309999998658895\n"}, {"input": "100 10000 57 80\n8 189 347 678 700 816 1003 1066 1170 1237 1260 1343 1368 1514 1669 1684 1877 1905 1932 2014 2098 2267 2268 2280 2695 1555 2852 2913 3072 3118 3138 3164 3294 3387 3388 3432 3522 3541 4747 3593 3647 3818 3860 3936 3952 4015 4030 4377 4408 4440 4625 4887 5028 5042 5055 5179 5506 5524 5653 5790 5847 6035 6223 6374 6412 6417 6424 6542 6565 6635 6664 6792 7031 7254 7273 7360 5791 7449 7467 7484 7519 7680 7698 7906 7908 8160 8238 8239 8469 8647 8709 8740 8771 8867 9255 9319 9334 9346 9425 9953\n", "output": "870.979999999999563 950.979999999999563 1030.979999999999563 1110.979999999999563 1190.979999999999563 1270.979999999999563 1350.979999999999563 1430.979999999999563 1510.979999999999563 1590.979999999999563 1670.979999999999563 1750.979999999999563 1830.979999999999563 1910.979999999999563 1990.979999999999563 2070.979999999999563 2150.979999999999563 2230.979999999999563 2310.979999999999563 2390.979999999999563 2470.979999999999563 2550.979999999999563 2630.979999999999563 2710.979999999999563 2790.979999999999563 2870.979999999999563 2950.979999999999563 3030.979999999999563 3110.979999999999563 3190.979999999999563 3270.979999999999563 3350.979999999999563 3430.979999999999563 3510.979999999999563 3590.979999999999563 3670.979999999999563 3750.979999999999563 3830.979999999999563 3910.979999999999563 3990.979999999999563 4070.979999999999563 4150.979999999999563 4230.979999999999563 4310.979999999999563 4390.979999999999563 4470.979999999999563 4550.979999999999563 4630.979999999999563 4710.979999999999563 4790.979999999999563 4870.979999999999563 4950.979999999999563 5030.979999999999563 5110.979999999999563 5190.979999999999563 5270.979999999999563 5350.979999999999563 5430.979999999999563 5510.979999999999563 5590.979999999999563 5670.979999999999563 5750.979999999999563 5830.979999999999563 5910.979999999999563 5990.979999999999563 6070.979999999999563 6150.979999999999563 6230.979999999999563 6310.979999999999563 6390.979999999999563 6470.979999999999563 6550.979999999999563 6630.979999999999563 6710.979999999999563 6790.979999999999563 6870.979999999999563 6950.979999999999563 7030.979999999999563 7110.979999999999563 7190.979999999999563 7270.979999999999563 7350.979999999999563 7430.979999999999563 7510.979999999999563 7590.979999999999563 7670.979999999999563 7750.979999999999563 7830.979999999999563 7910.979999999999563 7990.979999999999563 8070.979999999999563 8150.979999999999563 8230.979999999999563 8310.979999999999563 8390.979999999999563 8470.979999999999563 8550.979999999999563 8630.979999999999563 8710.979999999999563 8790.979999999999563 \n21063113.960000000894070\n"}]}
{"statement": "Task: Given a sequence of n integers, Peter wants to make all numbers in the sequence equal to a given value h. He can perform the operation of \"adding one on the segment [l, r]\": add one to all elements of the sequence with indices from l to r (inclusive). At that, Peter never chooses any element as the beginning of the segment twice. Similarly, Peter never chooses any element as the end of the segment twice. In other words, for any two segments [l_1, r_1] and [l_2, r_2], where Peter added one, the following inequalities hold: l_1 \u2260 l_2 and r_1 \u2260 r_2. Find the number of distinct ways to make all numbers in the sequence equal to h.\n\nInput: The input consists of two lines. The first line contains two integers n and h, where n is the length of the sequence and h is the value to which all numbers in the sequence should be made equal. The second line contains n integers a_1, a_2, ..., a_{n}, where a_i is the i-th element of the sequence. The input arrives from standard input.\n\nOutput: The output should be a single integer, which is the number of distinct ways to make all numbers in the sequence equal to h, modulo 1000000007 (10^9 + 7).\n\nConstraints: 1 \u2264 n, h \u2264 2000, 0 \u2264 a_i \u2264 2000.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/466/D", "sample_test_cases": [{"input": "3 2\n1 1 1\n", "output": "4\n"}, {"input": "5 1\n1 1 1 1 1\n", "output": "1\n"}, {"input": "4 3\n3 2 1 1\n", "output": "0\n"}, {"input": "1 2000\n2000\n", "output": "1\n"}, {"input": "3 2\n2 1 1\n", "output": "2\n"}]}
{"statement": "Task: Given a directed graph with n vertices, each vertex has an integer value k. The graph has multiple edges and self-loops. For each query, find the number of distinct vertices that will be visited infinitely many times, if we start the travel from a certain vertex with a certain value of c.\n\nInput: The input consists of an integer n, representing the number of vertices in the graph. The second line contains n integers k_i, the integer written on the i-th vertex. Next 2 \u22c5 n lines describe the edges of each vertex. The (2 \u22c5 i + 1)-st line contains an integer m_i, the number of outgoing edges of the i-th vertex. The (2 \u22c5 i + 2)-nd line contains m_i integers e_i[0], e_i[1], \u2026, e_i[m_i-1], each having an integer value between 1 and n, inclusive. Next line contains an integer q, the number of queries Gildong wants to ask. Next q lines contain two integers x and y, each representing the start vertex and the starting value of c. Input arrives from standard input.\n\nOutput: The output should contain q lines, where each line contains the number of distinct vertices that will be visited infinitely many times, if Gildong starts at vertex x with starting integer y.\n\nConstraints: 1 \u2264 n \u2264 1000, -10^9 \u2264 k_i \u2264 10^9, 1 \u2264 m_i \u2264 10, 1 \u2264 q \u2264 10^5, 1 \u2264 x \u2264 n, -10^9 \u2264 y \u2264 10^9.", "editorial": "", "tag": "['Graph algorithms', 'Graph traversal', 'Implementation', 'Complete search', 'Number theory', 'Dynamic programming', 'Mathematics', 'Data structures']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1200/F", "sample_test_cases": [{"input": "1\n0\n1\n1\n1\n1 0\n", "output": "1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n2\n1\n3\n2\n"}, {"input": "4\n4 -5 -3 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n3\n1\n1\n"}, {"input": "4\n0 0 0 0\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 2\n6\n1 0\n2 0\n3 -1\n4 -2\n1 1\n2 5\n", "output": "1\n1\n2\n1\n3\n1\n"}, {"input": "4\n4 -5 -1 -1\n2\n2 3\n1\n2\n3\n2 4 1\n4\n3 1 2 1\n6\n1 0\n3 0\n3 -1\n4 -2\n1 1\n1 5\n", "output": "1\n1\n1\n1\n1\n1\n"}]}
{"statement": "Task: Malek wants to split his money among n poor people. A charity institute recommends q segments of people to receive one dollar each. The recommendations are given in a way that two segments are either completely disjoint or one is inside the other. The goodness of the charity is the maximum amount of money a person has after Malek finishes giving his money. The institute knows the probability of Malek accepting each recommendation and wants to know the expected value of goodness of the charity.\n\nInput: The input consists of two integers n and q, followed by an array A of n integers representing the initial amount of money each person has, and q triples (li, ri, pi), representing the segments of recommendation and the probability of Malek accepting each recommendation. The input is provided through standard input.\n\nOutput: The output should be a single real number representing the expected value of goodness of the charity. The answer will be considered correct if its absolute or relative error is less than 10^-6.\n\nConstraints: 1 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 5000, 0 \u2264 ai \u2264 10^9, 1 \u2264 li \u2264 ri \u2264 n, and 0 \u2264 pi \u2264 1 with exactly three digits after the decimal point. The recommendations are given in a way that for every two recommendation [a, b] and [c, d] one of the following conditions holds: (1) a \u2264 b < c \u2264 d, (2) c \u2264 d < a \u2264 b, (3) a \u2264 c \u2264 d \u2264 b, or (4) c \u2264 a \u2264 b \u2264 d.", "editorial": "", "tag": "['Dynamic programming', 'Probability']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/494/C", "sample_test_cases": [{"input": "2 1\n2 1\n2 2 0.100\n", "output": "2.0000000000\n"}, {"input": "10 3\n2 2 1 2 1 2 2 5 5 5\n4 6 0.014\n4 6 0.012\n8 10 0.084\n", "output": "5.0840000000\n"}, {"input": "1 1\n1000000000\n1 1 1.000\n", "output": "1000000001.0000000000\n"}, {"input": "10 3\n2 5 5 4 5 2 5 2 1 4\n8 10 0.646\n4 6 0.687\n4 6 0.504\n", "output": "6.1910000000\n"}, {"input": "10 3\n2 1 2 1 1 3 2 4 1 1\n5 7 0.979\n1 3 0.922\n8 10 0.944\n", "output": "4.9440000000\n"}]}
{"statement": "Task: Given a 3 x n table with forbidden cells and a marked empty cell, find the number of distinct correct puzzles that can be made by placing identical dominoes on the table. A puzzle is considered correct if each domino occupies exactly two non-forbidden cells of the table, no two dominoes occupy the same table cell, and exactly one non-forbidden cell of the table is unoccupied by any domino. The marked empty cell must be empty in the resulting puzzle.\n\nInput: The input consists of an integer n (3 \u2264 n \u2264 10^4) representing the size of the puzzle, followed by three lines of n characters each representing the 3 x n table. The character \"X\" represents a forbidden cell, \".\" represents a non-forbidden cell, and \"O\" represents the marked empty cell. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the number of distinct correct puzzles modulo 10^9 + 7.\n\nConstraints: It is guaranteed that exactly one cell in the table is marked with a circle, and that all cells of a given table having at least one common point with the marked cell are non-forbidden.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/342/D", "sample_test_cases": [{"input": "6\n.X.X..\n...X.X\n.O....\n", "output": "0"}, {"input": "4\nXX..\n...O\n.X..\n", "output": "1"}, {"input": "20\nX.XX..X.X........XXX\nX.X..XX...O.....XX..\n..XXX..X....X.......\n", "output": "26"}, {"input": "100\nX..XXX...XX..XX.....X.XXXXX.XXXXX.XXX..X..X..XXXXXXXXXXXXXXXX....X..X.X....XXXXXXX..XXXXXX.O.XXX.X.X\nX.X.XX.X..XXXXXXX...X.XXXXX.XXXXX.XX.XXX.X..XXXX..XXXXXXX..XX..XXXXXX.XXX...XX....X..X...X...X...X.X\nX.X.XX......XXXXXXXXX..XXXXXX..XXXXX.X...X....XXXX..X..XX......XXX..XXXXX...X..X..XXX..X.X..XX..XXXX\n", "output": "0"}, {"input": "5\nX....\nXX..O\nX....\n", "output": "1"}]}
{"statement": "Task: Given a tree with N nodes, where each edge has a cost associated with it, calculate the expected cost of a random walk starting from node 1 and ending at a leaf node. At each node, the walker chooses a random neighbor to move to, except when there is only one neighbor, in which case the walker moves to that neighbor.\n\nInput: The input consists of T test cases. Each test case starts with an integer N (3 \u2264 N \u2264 105), representing the number of nodes in the tree, followed by N-1 lines, each containing three space-separated integers u, v, and c (0 \u2264 u, v \u2264 N-1, 1 \u2264 c \u2264 104), representing an edge between nodes u and v with cost c. The input is read from standard input.\n\nOutput: For each test case, output a single integer, representing the expected cost of the random walk, written as an irreducible fraction a / b (that is, a and b are coprime). Heidi, the cow, asks to output \u230aa * b^-1 * 1e9 + 0.5\u230b, where \u230ax\u230b represents the largest integer less than or equal to x.\n\nConstraints: For each test case, the input tree is guaranteed to be a tree, and the input constraints are 3 \u2264 N \u2264 105, 0 \u2264 u, v \u2264 N-1, and 1 \u2264 c \u2264 104. The sum of N over all test cases is at most 5 * 10^5.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal', 'Mathematics']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/802/L", "sample_test_cases": [{"input": "6\n0 1 8\n0 2 42\n1 3 40\n1 4 16\n4 5 8\n", "output": "250000052\n"}, {"input": "3\n0 1 2\n0 2 20\n", "output": "11\n"}, {"input": "7\n0 1 3\n0 5 6\n1 2 2\n1 3 1\n1 4 5\n5 6 8\n", "output": "15\n"}, {"input": "4\n0 1 6\n0 2 9\n0 3 27\n", "output": "14\n"}, {"input": "6\n0 1 8\n0 2 24\n1 3 40\n1 4 16\n4 5 12\n", "output": "500000043\n"}]}
{"statement": "Task: Given a row of $n$ slimes, each with an integer value, find the maximum possible value of the last slime after a sequence of adjacent slime eating each other. Any slime can eat its adjacent slime, and when a slime with a value $x$ eats a slime with a value $y$, the eaten slime disappears, and the value of the remaining slime changes to $x - y$. The slimes will eat each other until there is only one slime left.\n\nInput: The input consists of two lines. The first line contains an integer $n$ denoting the number of slimes in the row. The second line contains $n$ integers $a_i$, where $a_i$ is the value of the $i$-th slime. The input is received from standard input.\n\nOutput: The output should consist of a single integer, which is the maximum possible value of the last slime after a sequence of adjacent slime eating each other.\n\nConstraints: $1 \\le n \\le 500\\,000$, $-10^9 \\le a_i \\le 10^9$.", "editorial": "", "tag": "['Dynamic programming', 'Implementation', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1038/D", "sample_test_cases": [{"input": "4\n2 1 2 1\n", "output": "4"}, {"input": "5\n0 -1 -1 -1 -1\n", "output": "4"}, {"input": "2\n10 8\n", "output": "2"}, {"input": "5\n-14 -2 0 -19 -12\n", "output": "47"}, {"input": "6\n-15 2 -19 20 0 9\n", "output": "65"}]}
{"statement": "Task: Given a tree with n vertices, some of which are colored black and others are white, find the number of ways to split the tree into k+1 parts by deleting k edges, such that each part has exactly one black vertex. The answer should be given modulo 1000000007.\n\nInput: The first line of input contains an integer n (2 \u2264 n \u2264 105), representing the number of vertices in the tree. The second line contains n-1 integers p0, p1, ..., pn-2 (0 \u2264 pi \u2264 i), representing the edges of the tree. The third line contains n integers x0, x1, ..., xn-1 (xi is either 0 or 1), representing the color of each vertex. The input is provided through standard input.\n\nOutput: A single integer, representing the number of ways to split the tree as described in the problem statement, modulo 1000000007.\n\nConstraints: 2 \u2264 n \u2264 105, 0 \u2264 pi \u2264 i, and xi is either 0 or 1.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/462/D", "sample_test_cases": [{"input": "5\n0 1 1 3\n0 0 0 1 1\n", "output": "1\n"}, {"input": "2\n0\n1 0\n", "output": "1\n"}, {"input": "100\n0 0 2 2 0 3 5 0 6 2 0 4 0 2 3 7 8 3 15 19 13 8 18 19 3 14 23 9 6 3 6 17 26 24 20 6 4 27 8 5 14 5 35 31 27 3 41 25 20 14 25 31 49 40 0 1 10 5 50 13 29 58 1 6 8 1 40 52 30 15 50 8 66 52 29 71 25 68 36 7 80 60 6 2 11 43 62 27 84 86 71 38 14 50 88 4 8 95 53\n1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1\n", "output": "9523200\n"}, {"input": "115\n0 0 1 2 0 4 1 3 4 1 4 5 4 5 0 0 3 1 2 3 3 0 5 1 3 4 1 5 2 0 1 3 3 1 3 5 0 4 5 1 3 0 0 1 3 1 1 3 3 3 2 3 1 3 0 2 5 5 1 1 2 2 1 1 3 2 1 2 3 1 5 4 2 1 2 1 1 2 3 4 3 1 5 0 2 4 4 5 2 5 0 2 4 5 5 5 5 0 3 1 1 4 2 2 4 3 3 0 3 3 0 2 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "output": "1\n"}, {"input": "10\n0 1 1 2 4 3 3 3 2\n1 0 1 1 1 0 0 1 1 0\n", "output": "3\n"}]}
{"statement": "Task: Given a number line with n beacons located at distinct positions, each beacon having a position and power level, find the minimum number of beacons that will be destroyed when a new beacon is added to the right of all the existing beacons. When a beacon is activated, it destroys all beacons to its left within a certain distance. The beacons are activated from right to left, and if a beacon is destroyed, it cannot be activated again. The goal is to add a new beacon with any position and power level to the right of all the existing beacons, such that the least possible number of beacons are destroyed.\n\nInput: The input consists of an integer n, followed by n pairs of integers ai and bi representing the position and power level of the i-th beacon respectively. The input is provided through standard input.\n\nOutput: The output is a single integer representing the minimum number of beacons that could be destroyed if exactly one beacon is added.\n\nConstraints: 1 \u2264 n \u2264 100,000, 0 \u2264 ai \u2264 1,000,000, and 1 \u2264 bi \u2264 1,000,000. No two beacons will have the same position, so ai \u2260 aj if i \u2260 j.", "editorial": "", "tag": "['Dynamic programming', 'Sorting']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/608/C", "sample_test_cases": [{"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7\n", "output": "4\n"}, {"input": "1\n0 1000000\n", "output": "0\n"}, {"input": "1\n1000000 1000000\n", "output": "0\n"}, {"input": "1\n0 1\n", "output": "0\n"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1\n", "output": "4\n"}]}
{"statement": "Task: Given an undirected weighted graph with N vertices and M edges, where the cost of adding an edge between vertex i and j is (i-j)^2, add up to two new edges so that vertex 1 and vertex N become connected, and find the minimum cost to achieve that.\n\nInput: The first line of input contains T, the number of test cases. Each test case starts with two integers, N and M, followed by M lines, each containing two integers i and j, representing a path between two different vertices i and j. Input is provided through standard input. It is guaranteed that there is at most one path between any two vertices, and the sum of N+M over all test cases is at most 5 * 10^5.\n\nOutput: The output should consist of T lines. Each line should contain a single integer giving the minimum cost for the corresponding test case. Output is provided through standard output.\n\nConstraints: 1 \u2264 N \u2264 10^5, 0 \u2264 M \u2264 10^5, 1 \u2264 T \u2264 20.", "editorial": "", "tag": "['Graph algorithms', 'Constructive algorithms', 'Shortest paths', 'Sorting', 'Complete search', 'Dynamic programming', 'Flows and cuts']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1486/E", "sample_test_cases": [{"input": "10 20\n10 1 15\n7 1 32\n5 3 36\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 779 1138 1898 49 196 520 324 490 "}, {"input": "2 1\n2 1 48\n", "output": "0 -1 "}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 14\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2201 779 1138 1898 49 196 520 324 490\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 13\n6 2 40\n8 9 19\n7 8 11\n7 4 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2166 779 1073 1813 49 196 485 324 490\n"}, {"input": "10 20\n10 1 15\n7 1 32\n5 3 45\n3 9 14\n3 4 19\n6 8 4\n9 6 18\n7 3 38\n10 7 12\n7 5 29\n7 6 13\n6 2 40\n8 9 19\n7 8 11\n7 1 19\n2 1 38\n10 9 3\n6 5 50\n10 3 41\n1 8 3\n", "output": "0 2166 779 1413 1813 49 196 485 324 490\n"}]}
{"statement": "Task: Given a connected graph with $n$ vertices and $m$ edges, where the cost of adding an edge between vertex $i$ and $j$ is $(i-j)^2$, add up to two new edges so that vertex $1$ and vertex $n$ become connected. Find the minimum cost to achieve that.\n\nInput: The input consists of multiple test cases. The first line of each test case contains two integers $n$ and $m$. The following $m$ lines each contain two integers $i$ and $j$ representing a path between two different vertices $i$ and $j$. It is guaranteed that there is at most one path between any two vertices, and the sum of $n+m$ over all test cases is at most $5 \\cdot 10^5$. The input arrives from standard input.\n\nOutput: The output should consist of $T$ lines, where $T$ is the number of test cases. Each line should contain a single integer giving the minimum cost for the corresponding test case.\n\nConstraints: $1 \\leq n \\leq 10^5$, $0 \\leq m \\leq 10^5$, $1 \\leq T \\leq 20$.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Complete search', 'Greedy algorithms']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1149/D", "sample_test_cases": [{"input": "5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n", "output": "0 25 60 40 20\n"}, {"input": "6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n", "output": "0 13 26 39 26 13\n"}, {"input": "2 1 1 2\n2 1 1\n", "output": "0 1\n"}, {"input": "2 1 9999999 10000000\n1 2 10000000\n", "output": "0 10000000\n"}, {"input": "3 3 78422 6789101\n3 1 6789101\n2 1 78422\n2 3 78422\n", "output": "0 78422 156844\n"}]}
{"statement": "Task: Given a string $s$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\", replace each question mark with one of the letters \"a\", \"b\" and \"c\". Count the total number of subsequences \"abc\" in all resulting strings. Print the answer modulo $10^{9} + 7$.\n\nInput: The input consists of two lines. The first line contains an integer $n$ $(3 \\le n \\le 200\\,000)$, the length of the string $s$. The second line contains the string $s$ of length $n$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\". Input is provided through standard input.\n\nOutput: Print the total number of subsequences \"abc\" in all strings you can obtain if you replace all question marks with letters \"a\", \"b\" and \"c\", modulo $10^{9} + 7$.\n\nConstraints: The input string $s$ has length $n$ $(3 \\le n \\le 200\\,000)$ and consists of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\". \n\nLet $s$ be a string of length $n$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\". We want to count the total number of subsequences \"abc\" in all possible strings obtained by replacing each question mark with one of the letters \"a\", \"b\" and \"c\". A subsequence of a string $t$ is a sequence that can be derived from the string $t$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. We need to output the answer modulo $10^{9} + 7$.\n\nThe input consists of two lines. The first line contains an integer $n$ $(3 \\le n \\le 200\\,000)$, the length of the string $s$. The second line contains the string $s$ of length $n$ consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\". The output is a single integer representing the total number of subsequences \"abc\" in all possible strings obtained by replacing each question mark with one of the letters \"a\", \"b\" and \"c\", modulo $10^{9} + 7$. The input string $s$ has length $n$ $(3 \\le n \\le 200\\,000)$ and consists of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\".", "editorial": "", "tag": "['String algorithms', 'Combinatorics', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1426/F", "sample_test_cases": [{"input": "6\nac?b?c\n", "output": "24\n"}, {"input": "7\n???????\n", "output": "2835\n"}, {"input": "9\ncccbbbaaa\n", "output": "0\n"}, {"input": "5\na???c\n", "output": "46\n"}, {"input": "3\n???\n", "output": "1\n"}]}
{"statement": "Task: Given a set S of non-empty words, find the maximal possible size of a set X of non-empty words such that each word of X is a prefix of some word from S, and X has no similar words. Similar words are defined as those that can be obtained from each other by removing their first letter.\n\nInput: The input contains multiple test cases. The first line of the input data contains an integer t, the number of test cases. Each test case starts with an integer n, the number of words in the set S (1 \u2264 n \u2264 106). Each of the following n lines contains one non-empty word, which is a sequence of lowercase English letters. All words in S are different. The input is provided through standard input.\n\nOutput: For each test case, the output should consist of a single integer m, representing the maximal number of words that the set X can contain.\n\nConstraints: The total length of all words in one input data doesn't exceed 1,000,000.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'String algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/856/B", "sample_test_cases": [{"input": "2\n3\naba\nbaba\naaab\n2\nab\na\n", "output": "6\n2\n"}, {"input": "2\n3\naba\nbaba\ncaaa\n2\nab\na\n", "output": "8\n2\n"}, {"input": "2\n3\naba\nabab\nacaa\n2\nab\nb\n", "output": "7\n2\n"}, {"input": "2\n3\naab\nbaba\nacaa\n2\nbb\na\n", "output": "9\n2\n"}, {"input": "2\n3\naba\nbaba\naaab\n1\naa\na\n", "output": "6\n1\n"}]}
{"statement": "Task: Given a list of n juices, each with a price and a set of vitamins it contains, find the minimum total price of juices that Petya has to buy to obtain all three types of vitamins. Petya needs at least one juice containing each of the vitamins to obtain it.\n\nInput: The first line of input contains an integer n, representing the number of juices. The following n lines contain an integer ci and a string si, representing the price and the set of vitamins contained in the ith juice. The string si contains one to three characters, and the characters are either \"A\", \"B\", or \"C\". Each letter appears at most once in each string si.\n\nOutput: If it is impossible to obtain all three vitamins, print -1. Otherwise, print the minimum total price of juices that Petya has to buy to obtain all three vitamins.\n\nConstraints: 1 \u2264 n \u2264 1,000, 1 \u2264 ci \u2264 100,000.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Implementation', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1042/B", "sample_test_cases": [{"input": "4\n5 C\n6 B\n16 BAC\n4 A\n", "output": "15\n"}, {"input": "2\n10 AB\n15 BA\n", "output": "-1\n"}, {"input": "5\n10 A\n9 BC\n11 CA\n4 A\n5 B\n", "output": "13\n"}, {"input": "6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\n", "output": "250\n"}, {"input": "2\n5 BA\n11 CB\n", "output": "16\n"}]}
{"statement": "Task: Given a positive integer n and a sequence of n positive integers, determine if there exists a rooted tree with n nodes, where each internal node has at least two children and the number of nodes in the subtree rooted at each node is given by the corresponding integer in the sequence.\n\nInput: The input consists of an integer n (1 \u2264 n \u2264 24) representing the number of nodes in the tree, followed by n positive integers representing the number of nodes in the subtree rooted at each node. The input is provided through standard input.\n\nOutput: Output \"YES\" if there exists at least one tree following the given restrictions, otherwise output \"NO\". The output should be provided through standard output.\n\nConstraints: n is at most 24 and the number of nodes in the subtree rooted at each node is at most n.", "editorial": "", "tag": "['Bit manipulation', 'Constructive algorithms', 'Greedy algorithms', 'Tree algorithms', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/429/C", "sample_test_cases": [{"input": "4\n1 1 1 4\n", "output": "YES"}, {"input": "5\n1 1 5 2 1\n", "output": "NO"}, {"input": "13\n1 1 1 1 1 1 1 1 1 4 4 4 13\n", "output": "YES"}, {"input": "4\n1 1 1 3\n", "output": "NO"}, {"input": "24\n1 1 1 1 1 1 1 1 1 1 1 1 24 1 1 1 1 1 1 1 1 1 1 1\n", "output": "YES"}]}
{"statement": "Task: Given a road represented as a number line of length n, with m safety islands located at certain integer positions, and the time for green and red lights, find the minimum time for a boy to cross the road while obeying certain rules. The boy must always move while the green light is on, can only change direction on safety islands, and must be on a safety island when the red light is on. If it is impossible to cross the road according to all the rules, output -1.\n\nInput: The input consists of T test cases, where each test case starts with two integers n and m, followed by m integers d_1, d_2, ..., d_m representing the positions of the safety islands. The next line contains two integers g and r, representing the time for green and red lights, respectively. It is guaranteed that there are 0 and n among the safety island positions. The sum of n+m over all test cases is at most 2 * 10^6. Input is provided through standard input.\n\nOutput: The output should consist of T lines, each containing a single integer giving the minimum time for the boy to cross the road according to the given rules. If it is impossible to cross the road according to all the rules, output -1.\n\nConstraints: $1\\le T\\le 10$, $1\\le n\\le 10^6$, $2\\le m\\le \\min(n+1, 10^4)$, $0\\le d_i\\le n$, $1\\le g,r\\le 1000$.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Graph traversal', 'Shortest paths']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1340/C", "sample_test_cases": [{"input": "15 5\n15 3 7 0 14\n11 11\n", "output": "45"}, {"input": "15 5\n15 14 7 3 0\n11 11\n", "output": "45"}, {"input": "100 5\n3 100 7 13 0\n99 5\n", "output": "191"}, {"input": "30 8\n0 1 9 10 23 24 26 30\n40 7\n", "output": "30"}, {"input": "4 5\n0 3 1 2 4\n2 1\n", "output": "5"}]}
{"statement": "Task: Given an $n \\times m$ table representing an island with $k$ treasures and $q$ safe columns, find the minimum number of moves required to collect all treasures. You start at the lower left corner of the island and can move up, left, or right. Moving up is only allowed in safe columns.\n\nInput: The input consists of integers $n$, $m$, $k$, and $q$, followed by $k$ lines containing the coordinates of the treasures, and a final line containing the indices of the safe columns. Input is provided through standard input.\n\nOutput: The output should be the minimum number of moves required to collect all treasures.\n\nConstraints: $2 \\leq n, m, k, q \\leq 2 \\cdot 10^5$ and $q \\leq m$.", "editorial": "", "tag": "['Dynamic programming', 'Sorting', 'Implementation', 'Greedy algorithms']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1201/D", "sample_test_cases": [{"input": "3 3 3 2\n1 1\n2 1\n3 1\n2 3\n", "output": "6"}, {"input": "3 5 3 2\n1 2\n2 3\n3 1\n1 5\n", "output": "8"}, {"input": "3 6 3 2\n1 6\n2 2\n3 4\n1 6\n", "output": "15"}, {"input": "2 2 2 2\n1 1\n1 2\n1 2\n", "output": "1"}, {"input": "5 5 10 3\n3 1\n3 2\n3 5\n1 5\n2 1\n2 5\n1 2\n1 4\n3 3\n2 4\n2 1 5\n", "output": "14"}]}
{"statement": "Task: Given N random variables, each of which can take any integer value from a given segment [Li;Ri] (all numbers from this segment are equiprobable), find the probability that the first digits of at least K% of those values will be equal to one, according to Benford's law.\n\nInput: The input consists of N (1 \u2264 N \u2264 1000), followed by N lines containing pairs of integers Li and Ri (1 \u2264 Li \u2264 Ri \u2264 10^18), which describe the range of values that the i-th random variable can take. The last line contains an integer K (0 \u2264 K \u2264 100). Input is provided through standard input.\n\nOutput: Print the required probability as a fractional number with a precision such that the relative or absolute error of the result won't exceed 10^-9.\n\nConstraints: All numbers in the input file are integers. Do not use %lld specifier to read or write 64-bit integers in C++. It is preferred to use cin (also you may use %I64d).", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Probability']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/54/C", "sample_test_cases": [{"input": "1\n1 1000000000000000000\n50\n", "output": "0.111111111111111\n"}, {"input": "1\n1 1\n100\n", "output": "1.000000000000000\n"}, {"input": "15\n11 20\n16 18\n10 17\n11 17\n2 19\n12 20\n5 24\n17 17\n16 18\n22 23\n3 17\n4 5\n14 21\n23 25\n14 15\n73\n", "output": "0.377283950617284\n"}, {"input": "1\n1000000000000000000 1000000000000000000\n100\n", "output": "1.000000000000000\n"}, {"input": "10\n5 20\n13 16\n12 30\n7 16\n10 29\n21 21\n22 26\n14 22\n2 10\n1 29\n48\n", "output": "0.470619916649862\n"}]}
{"statement": "Task: Given a playoff tournament with $2^n$ teams, where each team has a unique skill level, determine all the skill levels of teams that can win the tournament, given the results of each phase of the tournament.\n\nInput: The input consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 18$), representing the number of phases in the tournament. The second line contains a string $s$ of length $n$, consisting of the characters 0 and/or 1, representing the results of each phase of the tournament.\n\nOutput: The output is a list of integers, representing the skill levels of the teams that can win the tournament. The output should be sorted in ascending order.\n\nConstraints: $1 \\le n \\le 18$, and the string $s$ consists of only the characters 0 and/or 1.\n\nMathematical Concepts: \n\n- Tournament: A tournament is a directed graph where each vertex represents a team, and each directed edge represents a game between two teams. In a tournament, there are no ties, and each game results in the elimination of one team.\n\n- Skill Level: The skill level of a team is a positive integer that represents the team's ability to win games.\n\n- Phase: A phase of the tournament is a set of games played between teams in a particular round. In each phase, teams are split into pairs, and each pair plays a game.\n\n- Winning Team: A team is a winning team if it can win the tournament, given the results of each phase.\n\nComputer Science Concepts:\n\n- String: The input consists of a string $s$ of length $n$, representing the results of each phase of the tournament.\n\n- Sorting: The output is a list of integers that must be sorted in ascending order.\n\n- Input/Output: The input is provided through standard input, and the output is provided through standard output.\n\n- Constraints: The input constraints must be enforced to ensure that the program runs efficiently and does not exceed memory limits.", "editorial": "", "tag": "['Constructive algorithms', 'Combinatorics', 'Greedy algorithms', 'Dynamic programming', 'Mathematics']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1767/D", "sample_test_cases": [{"input": "3\n101\n", "output": "4 5 6 7 "}, {"input": "1\n1\n", "output": "2 "}, {"input": "2\n01\n", "output": "2 3 "}, {"input": "2\n00\n", "output": "1 "}, {"input": "1\n0\n", "output": "1 "}]}
{"statement": "Task: Given a rooted tree with n nodes labeled from 1 to n, and a set of leaves L, partition the leaves in a way that for any two different sets x, y of the partition, the smallest connected subgraphs containing x and y are disjoint. Finally, count the number of ways to partition the leaves, modulo 998244353.\n\nInput: The input consists of an integer n (2 \u2264 n \u2264 200 000) representing the number of nodes in the tree, followed by n-1 integers p_2, p_3, \u2026, p_n (1 \u2264 p_i < i) representing the parent of each node. The input is read from standard input.\n\nOutput: The output is a single integer representing the number of ways to partition the leaves, modulo 998244353.\n\nConstraints: 2 \u2264 n \u2264 200 000 and 1 \u2264 p_i < i.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1146/F", "sample_test_cases": [{"input": "111\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 24 26 27 27 29 30 31 31 32 33 35 36 37 38 38 39 41 42 43 42 45 44 47 48 48 49 48 51 52 54 55 54 55 58 59 60 59 62 60 64 62 65 67 66 68 69 70 72 69 74 73 76 77 78 79 78 80 72 82 83 85 86 87 88 89 88 91 92 92 92 93 93 96 98 98 99 95 101 100 103 105 104 107 108 107 107\n", "output": "826147310"}, {"input": "111\n1 1 1 1 1 1 2 2 1 3 1 1 2 1 2 1 2 3 1 1 6 2 1 1 4 2 3 3 2 1 1 1 1 2 3 2 1 2 1 3 1 4 6 1 3 9 4 2 2 1 1 2 1 5 4 2 2 1 1 1 13 9 3 7 3 1 4 1 1 2 4 10 2 8 2 3 1 2 18 1 3 16 1 10 9 6 28 5 3 1 9 3 10 2 1 5 6 2 9 8 3 6 3 1 4 1 10 3 2 6\n", "output": "682865045"}, {"input": "2\n1\n", "output": "1"}, {"input": "2\n2\n", "output": "1\n"}, {"input": "111\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 24 26 27 27 29 30 31 31 32 33 35 36 37 38 38 39 41 42 43 42 45 44 47 48 48 49 48 51 52 54 55 54 55 58 59 60 59 62 60 64 62 65 67 66 68 69 70 72 69 74 73 76 77 78 79 78 80 50 82 83 85 86 87 88 89 88 91 92 92 92 93 93 96 98 98 99 95 101 100 103 105 104 107 108 107 107\n", "output": "309484838\n"}]}
{"statement": "Task: Given an n x m warehouse, find the maximum number of T-shaped turboplows that can be placed in the warehouse without overlapping. The turboplows can be rotated in any manner. Output the maximum number of turboplows that can be placed and their corresponding positions in the warehouse.\n\nInput: The input consists of two space-separated integers n and m, representing the dimensions of the warehouse. The input is provided through standard input.\n\nOutput: The output consists of the maximum number of turboplows that can be placed in the first line, followed by n lines of m characters each. The characters represent the warehouse, with \".\" representing empty space and successive capital Latin letters (\"A\" for the first turboplow, \"B\" for the second one, and so on) representing the corresponding turboplows' positions in the optimal manner in the warehouse. If there are multiple optimal solutions, any of them can be printed.\n\nConstraints: 1 \u2264 n, m \u2264 9.", "editorial": "", "tag": "['Dynamic programming', 'Complete search']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/143/E", "sample_test_cases": [{"input": "1 8\n", "output": "0\n........\n\n"}, {"input": "4 9\n", "output": "5\nAAABBBCCC\n.AD.BE.C.\n.AD.BE.C.\n.DDDEEE..\n\n"}, {"input": "4 8\n", "output": "4\nAAABBB..\n.AD.BCCC\n.AD.B.C.\n.DDD..C.\n"}, {"input": "9 5\n", "output": "7\nAAAB.\n.A.B.\nCABBB\nCCC.D\nCEDDD\n.EEED\nFEGGG\nFFFG.\nF..G.\n"}, {"input": "2 6\n", "output": "0\n......\n......\n\n"}]}
{"statement": "Task: Given a list of n songs from a rock band, each with a certain recognizability and a time it takes to recognize the song, determine the expected number of songs that can be recognized within a given time T.\n\nInput: The input consists of two integers, n and T, representing the number of songs and the total time of the game, respectively. This is followed by n lines, each containing two integers pi and ti, representing the recognizability and the time it takes to recognize the i-th song. The input is received from standard input.\n\nOutput: The output is a single number representing the expected number of songs the player will recognize in T seconds. The output is printed to standard output.\n\nConstraints: 1 \u2264 n \u2264 5000, 1 \u2264 T \u2264 5000, 0 \u2264 pi \u2264 100, and 1 \u2264 ti \u2264 T.", "editorial": "", "tag": "['Dynamic programming', 'Amortized analysis', 'Probability']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/498/B", "sample_test_cases": [{"input": "37 4648\n53 3169\n66 4152\n81 4540\n98 4302\n51 4427\n42 2556\n35 2288\n56 2401\n12 3864\n45 4223\n93 1809\n4 2372\n17 4357\n67 1700\n19 4508\n5 2586\n99 2754\n4 3163\n97 4171\n27 4345\n82 4509\n29 2008\n85 4266\n25 2093\n40 3668\n17 1754\n71 2231\n58 2444\n82 3397\n55 4101\n54 4561\n13 4518\n99 3256\n90 3318\n66 4304\n73 3989\n50 3825\n", "output": "37.000000000"}, {"input": "5 4289\n50 2321\n19 3427\n54 2515\n82 4010\n22 3428\n", "output": "5.000000000"}, {"input": "3 31\n6 29\n43 18\n49 22\n", "output": "2.777747751"}, {"input": "3 4\n17 4\n27 3\n37 1\n", "output": "1.385032320"}, {"input": "3 50\n10 10\n2 5\n0 7\n", "output": "3.000000000"}]}
{"statement": "Task: Given an array of size n initially consisting of zeros, perform q operations on the array. Each operation adds a value x to a contiguous subarray of the array. After all operations, find all possible maximum values that can be obtained by selecting a subset of the operations and applying them to the array.\n\nInput: The first line contains two integers n and q, representing the length of the array and the number of operations to be performed. Each of the next q lines contains three integers l_i, r_i, and x_i, representing an operation that adds value x_i to each element in the subarray from index l_i to r_i (inclusive). Input is provided through standard input.\n\nOutput: The first line of output should contain a single integer k, representing the number of possible maximum values that can be obtained by selecting a subset of the operations and applying them to the array. The second line should contain k integers in increasing order, representing the possible maximum values that can be obtained. Output is provided through standard output.\n\nConstraints: 1 \u2264 n, q \u2264 10^4, 1 \u2264 l_i \u2264 r_i \u2264 n, 1 \u2264 x_i \u2264 n.", "editorial": "", "tag": "['Dynamic programming', 'Bit manipulation', 'Data structures', 'Divide and conquer']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/981/E", "sample_test_cases": [{"input": "7010 10\n1467 2828 4742\n560 3268 3751\n1180 5370 6723\n907 3766 1380\n4610 5672 5430\n4867 5179 4868\n1890 3860 1037\n253 4853 5056\n480 5139 5329\n3764 4677 4777\n", "output": "22\n1037 1380 2417 3751 4742 4777 4788 4868 5056 5131 5329 5430 5779 5814 6093 6122 6157 6168 6366 6436 6709 6723\n"}, {"input": "10 10\n1 9 7\n2 6 4\n7 8 1\n3 10 10\n3 5 7\n1 6 10\n6 6 3\n3 7 6\n2 2 9\n4 9 1\n", "output": "10\n1 2 3 4 5 6 7 8 9 10\n"}, {"input": "1 1\n1 1 1\n", "output": "1\n1\n"}, {"input": "2010 10\n876 1434 1469\n1239 1389 600\n636 853 504\n242 1533 4\n1068 1256 823\n127 995 1468\n26 348 1967\n1016 1951 257\n13 924 45\n8 849 1463\n", "output": "39\n4 45 49 257 261 504 508 549 553 600 604 823 827 857 861 1080 1084 1423 1427 1463 1467 1468 1469 1472 1473 1508 1512 1513 1514 1517 1518 1680 1684 1726 1730 1967 1971 1972 1976\n"}, {"input": "4010 10\n909 1610 2428\n744 1380 2029\n658 781 1696\n2427 3132 2364\n2631 3975 3741\n1033 3693 1038\n117 3110 3815\n1962 2104 699\n454 2041 624\n2738 3231 3490\n", "output": "22\n624 699 1038 1323 1662 1696 1737 2029 2320 2361 2364 2428 2653 3052 3067 3402 3466 3490 3691 3725 3741 3815\n"}]}
{"statement": "Task: Given a sequence of n hills, represented by their heights, and an excavator that can decrease the height of a hill by one in one hour, determine the minimum time required to adjust the heights of the hills to make it possible to build a certain number of houses on them. A house can only be built on a hill that is strictly higher than its neighboring hills.\n\nInput: The input consists of two lines. The first line contains an integer n, the number of hills in the sequence. The second line contains n integers, ai, representing the heights of the hills in the sequence. The input is provided through standard input.\n\nOutput: Print exactly <image> numbers separated by spaces. The i-th printed number should be equal to the minimum number of hours required to level hills so it becomes possible to build i houses.\n\nConstraints: 1 \u2264 n \u2264 5000, 1 \u2264 ai \u2264 100000.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1013/E", "sample_test_cases": [{"input": "100\n637 61 394 666 819 664 274 652 123 152 765 524 375 60 812 832 20 275 85 193 846 815 538 807 15 439 688 882 272 630 132 669 820 646 757 233 470 778 97 450 304 439 240 586 531 59 192 456 540 689 747 507 570 379 375 57 653 512 325 816 640 322 827 48 248 94 838 471 631 151 877 563 482 842 188 276 624 825 361 56 40 475 503 805 51 302 197 782 716 505 796 214 806 730 479 79 265 133 420 488\n", "output": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 34 119 269 425 675 927 1233 1563 1912 2566 3246 4184 5252 7264 11327 "}, {"input": "10\n1 1 1 1 1 1 1 1 1 1\n", "output": "1 2 3 4 5 "}, {"input": "100\n85 72 44 25 26 15 43 27 32 71 30 11 99 87 33 61 53 17 94 82 100 80 18 88 5 40 60 37 74 36 13 7 69 81 51 23 54 92 1 4 97 86 41 70 56 91 31 52 65 63 68 78 49 93 9 38 96 48 59 21 66 62 46 34 12 3 84 83 14 57 89 75 8 67 79 19 45 10 20 22 39 55 16 76 2 98 77 35 28 58 24 50 6 73 95 29 90 64 47 42\n", "output": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 9 22 42 66 93 122 153 186 228 271 355 449 572 701 840 1049 "}, {"input": "100\n20 13 10 38 7 22 40 15 27 32 37 44 42 50 33 46 7 47 43 5 18 29 26 3 32 5 1 29 17 1 1 43 2 38 23 23 49 36 14 18 36 3 49 47 11 19 6 29 14 9 6 46 15 22 31 45 24 5 31 2 24 14 7 15 21 44 8 7 38 50 17 1 29 39 16 35 10 22 19 8 6 42 44 45 25 26 16 34 36 23 17 11 41 15 19 28 44 27 46 8\n", "output": "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 9 15 22 29 39 49 61 73 91 119 153 192 238 311 392 487 584 "}, {"input": "2\n2 2\n", "output": "1 "}]}
{"statement": "Task: Given integers n and k, find the number of different multisets that can be obtained by applying the function f to an arbitrary non-empty array with numbers of size no more than n k times, where f is defined as the multiset of number of occurrences of every number in the array.\n\nInput: The input consists of a single line containing two integers n and k separated by a space. The input arrives from standard input.\n\nOutput: Print one number, which is the number of different multisets that can be obtained by applying the function f to an arbitrary non-empty array with numbers of size no more than n k times, where f is defined as the multiset of number of occurrences of every number in the array. The output should be printed modulo 998 244 353.\n\nConstraints: The integers n and k are constrained by 1 \u2264 n, k \u2264 2020.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1310/E", "sample_test_cases": [{"input": "200 1\n", "output": "563641009\n"}, {"input": "200 6\n", "output": "4\n"}, {"input": "70 3\n", "output": "93\n"}, {"input": "2 1\n", "output": "3\n"}, {"input": "4 11\n", "output": "1\n"}]}
{"statement": "Task: Given an integer n and an array a of ten integers, count the number of positive integers that satisfy the following conditions: the length of the number should not exceed n, it should not have leading zeroes, and digit i (0 \u2264 i \u2264 9) should occur in the number at least a[i] times.\n\nInput: The input consists of two lines. The first line contains an integer n (1 \u2264 n \u2264 100), and the second line contains ten integers a[0], a[1], ..., a[9] (0 \u2264 a[i] \u2264 100), separated by spaces. The input is provided through standard input.\n\nOutput: The output should be a single integer, which is the remainder of dividing the answer to the problem by 1000000007 (109 + 7).\n\nConstraints: n should be between 1 and 100, and each element of the array a should be between 0 and 100.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/214/D", "sample_test_cases": [{"input": "100\n16 27 26 10 17 39 22 21 30 25\n", "output": "0\n"}, {"input": "100\n3 1 3 3 1 2 3 2 0 2\n", "output": "230289012\n"}, {"input": "100\n31 0 27 15 7 9 5 0 0 6\n", "output": "338317227\n"}, {"input": "100\n100 0 0 0 0 0 0 0 0 0\n", "output": "0\n"}, {"input": "100\n15 16 10 9 11 7 18 14 0 0\n", "output": "657295203\n"}]}
{"statement": "Task: Given a tree with n vertices and a positive integer k, find the number of distinct pairs of vertices that have a distance of exactly k between them. \n\nInput: The input consists of two integers n and k, followed by n-1 lines describing the edges of the tree. The input is provided through standard input. \n\nOutput: The output should be a single integer representing the number of distinct pairs of vertices with a distance of exactly k between them. \n\nConstraints: 1 \u2264 n \u2264 50000, 1 \u2264 k \u2264 500, and 1 \u2264 ai, bi \u2264 n. \n\nMathematical concepts: tree, vertex, distance, pair, integer.\n\nComputer science concepts: standard input, standard output.", "editorial": "", "tag": "['Tree algorithms', 'Dynamic programming', 'Graph traversal']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/161/D", "sample_test_cases": [{"input": "50 4\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n11 5\n12 6\n13 6\n14 7\n15 7\n16 8\n17 8\n18 9\n19 9\n20 10\n21 10\n22 11\n23 11\n24 12\n25 12\n26 13\n27 13\n28 14\n29 14\n30 15\n31 15\n32 16\n33 16\n34 17\n35 17\n36 18\n37 18\n38 19\n39 19\n40 20\n41 20\n42 21\n43 21\n44 22\n45 22\n46 23\n47 23\n48 24\n49 24\n50 25\n", "output": "                                                             124\n"}, {"input": "50 5\n2 1\n3 1\n4 2\n5 2\n6 4\n7 4\n8 6\n9 6\n10 8\n11 8\n12 10\n13 10\n14 12\n15 12\n16 14\n17 14\n18 16\n19 16\n20 18\n21 18\n22 20\n23 20\n24 22\n25 22\n26 24\n27 24\n28 26\n29 26\n30 28\n31 28\n32 30\n33 30\n34 32\n35 32\n36 34\n37 34\n38 36\n39 36\n40 38\n41 38\n42 40\n43 40\n44 42\n45 42\n46 44\n47 44\n48 46\n49 46\n50 48\n", "output": "                                                              84\n"}, {"input": "10 1\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "                                                               9\n"}, {"input": "50 3\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "output": "                                                              47\n"}, {"input": "10 3\n2 1\n3 1\n4 3\n5 4\n6 5\n7 1\n8 6\n9 2\n10 6\n", "output": "                                                               8\n"}]}
{"statement": "Task: Given a sequence of n integers, rearrange the sequence in such a way that the longest possible prefix of the rearranged sequence forms a Fibonacci-ish sequence. A Fibonacci-ish sequence is a sequence that consists of at least two elements, where the first two elements can be arbitrary and each subsequent element is the sum of the two preceding elements.\n\nInput: The input consists of two lines. The first line contains a single integer n, which is the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n, which are the elements of the sequence. The input is provided through standard input.\n\nOutput: The output is a single integer, which represents the length of the longest possible Fibonacci-ish prefix of the given sequence after rearrangement.\n\nConstraints: The input sequence has a length between 2 and 1000, and the absolute value of each element is at most 10^9.", "editorial": "", "tag": "['String algorithms', 'Implementation', 'Complete search', 'Dynamic programming', 'Mathematics']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/633/D", "sample_test_cases": [{"input": "3\n1 2 -1\n", "output": "3\n"}, {"input": "5\n28 35 7 14 21\n", "output": "4\n"}, {"input": "11\n-9 -1 -10 9 7 -4 0 -8 -3 3 5\n", "output": "5\n"}, {"input": "10\n-4 -8 -8 8 -9 0 -7 9 1 0\n", "output": "4\n"}, {"input": "2\n2 2\n", "output": "2\n"}]}
{"statement": "Task: Given two arrays $a$ and $b$, divide array $a$ into $m$ consecutive subarrays such that the minimum element in the $i$-th subarray is equal to $b_i$. Count the number of ways to divide array $a$ modulo $998244353$.\n\nInput: The input consists of three lines. The first line contains two integers $n$ and $m$ $(1 \\le n, m \\le 2 \\cdot 10^5)$, the length of arrays $a$ and $b$ respectively. The second line contains $n$ integers $a_1, a_2, \\dots , a_n$ $(1 \\le a_i \\le 10^9)$, the array $a$. The third line contains $m$ integers $b_1, b_2, \\dots , b_m$ $(1 \\le b_i \\le 10^9; b_i < b_{i+1})$, the array $b$.\n\nOutput: Output a single integer, the number of ways to divide array $a$ modulo $998244353$.\n\nConstraints: The length of arrays $a$ and $b$ are at most $2 \\cdot 10^5$. The elements of array $a$ are positive integers at most $10^9$. The elements of array $b$ are positive integers at most $10^9$ and are sorted in ascending order.", "editorial": "", "tag": "['Constructive algorithms', 'Combinatorics', 'Amortized analysis', 'Sorting', 'Complete search', 'Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1366/E", "sample_test_cases": [{"input": "6 3\n12 10 20 20 25 30\n10 20 30\n", "output": "2\n"}, {"input": "4 2\n1 3 3 7\n3 7\n", "output": "0\n"}, {"input": "8 2\n1 2 2 2 2 2 2 2\n1 2\n", "output": "7\n"}, {"input": "18 10\n8 1 2 3 4 9 9 5 1 6 6 7 8 6 2 9 10 7\n1 2 3 4 5 6 7 8 9 10\n", "output": "0\n"}, {"input": "1 1\n1000000000\n1000000000\n", "output": "1\n"}]}
{"statement": "Task: Given a directed graph with n vertices and m edges, where each edge has a cost equal to the difference between the starting vertex and the square of the ending vertex, add up to two new edges to connect vertex 1 and vertex n, and find the minimum total cost of all edges in the resulting graph.\n\nInput: The input consists of an integer T, representing the number of test cases, followed by T sets of input. Each set starts with two integers n and m, representing the number of vertices and edges in the graph, respectively. The next m lines each contain two integers u and v, representing a directed edge from vertex u to vertex v. It is guaranteed that there is at most one edge between any two vertices, and the sum of n+m over all test cases is at most 5 * 10^5. The input is provided through standard input.\n\nOutput: The output should consist of T lines, each containing a single integer giving the minimum total cost of all edges in the graph after adding up to two new edges to connect vertex 1 and vertex n.\n\nConstraints: 1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5, 1 \u2264 T \u2264 20.", "editorial": "", "tag": "['Dynamic programming', 'Graph algorithms', 'Implementation']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1137/C", "sample_test_cases": [{"input": "10 11 10\n1 2\n2 3\n3 4\n4 2\n2 5\n5 6\n6 5\n5 7\n7 8\n8 9\n7 10\n1000000000\n0010000000\n0100000000\n0000000001\n0100000000\n0000001000\n0010000000\n1110000000\n0000000111\n0001000000\n", "output": "8\n"}, {"input": "10 10 8\n4 9\n5 8\n2 9\n3 2\n9 5\n8 4\n1 9\n10 3\n9 10\n9 7\n01000001\n00000100\n00000000\n00001001\n00000000\n00000010\n00000000\n00000000\n00000010\n00001000\n", "output": "1\n"}, {"input": "10 10 7\n2 6\n6 1\n1 4\n4 10\n7 8\n10 9\n5 2\n1 7\n1 3\n9 5\n0010000\n0000000\n0100000\n0000000\n0000000\n1100000\n0000001\n0000000\n0000000\n0010000\n", "output": "2\n"}, {"input": "10 14 10\n2 8\n3 4\n1 5\n1 7\n7 10\n7 4\n5 1\n6 2\n1 9\n10 4\n8 3\n7 9\n4 6\n10 9\n0001000000\n0000001000\n0000010000\n0000100000\n0000100000\n0000001000\n0010000000\n0000100000\n0010000000\n0100000000\n", "output": "2\n"}, {"input": "1 0 1\n0\n", "output": "0\n"}]}
{"statement": "Task: Given a string s consisting of only 'a' and 'b', find the k-th lexicographically smallest half-palindrome substring of s. A half-palindrome substring is a substring that satisfies the condition that for all odd positions i in the substring, the i-th character is equal to the character at position |s| - i + 1.\n\nInput: The input consists of two lines. The first line contains a string s (1 \u2264 |s| \u2264 5000) consisting of only 'a' and 'b'. The second line contains a positive integer k, the lexicographical rank of the desired half-palindrome substring. Input is provided through standard input.\n\nOutput: The output should be a substring of s that is the k-th lexicographically smallest half-palindrome substring.\n\nConstraints: 1 \u2264 |s| \u2264 5000, 1 \u2264 k \u2264 the number of half-palindrome substrings of s.", "editorial": "", "tag": "['Graph algorithms', 'String algorithms', 'Tree algorithms', 'Dynamic programming', 'Data structures']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/557/E", "sample_test_cases": [{"input": "aaa\n6\n", "output": "aaa"}, {"input": "abb\n2\n", "output": "b"}, {"input": "aaa\n2\n", "output": "a"}, {"input": "ab\n2\n", "output": "b"}, {"input": "aa\n2\n", "output": "a"}]}
{"statement": "Task: Given the initial and final speeds of a car, the time it takes to travel a section, and the maximum speed change between adjacent seconds, find the maximum possible length of the path section in meters.\n\nInput: The input consists of two lines. The first line contains two integers v_1 and v_2, representing the initial and final speeds of the car, respectively. The second line contains two integers t and d, representing the time it takes to travel the section and the maximum speed change between adjacent seconds, respectively. The input is provided through standard input.\n\nOutput: The output should be a single integer representing the maximum possible length of the path section in meters.\n\nConstraints: 1 \u2264 v_1, v_2 \u2264 100, 2 \u2264 t \u2264 100, and 0 \u2264 d \u2264 10. It is guaranteed that there is a way to complete the segment so that the speed in the first second equals v_1, the speed in the last second equals v_2, and the absolute value of difference of speeds between any two adjacent seconds doesn't exceed d. The problem can be modeled as finding the maximum length of a path with a given set of vertices and edges, where each vertex represents the speed of the car at a given second, and each edge represents the change in speed between adjacent seconds. The cost of each edge is the absolute value of the difference in speed between the two adjacent seconds. The task is to find the maximum length of a path from the vertex representing the initial speed to the vertex representing the final speed, subject to the constraint that the absolute value of the difference in speed between any two adjacent vertices does not exceed d.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/534/B", "sample_test_cases": [{"input": "5 6\n4 2\n", "output": "26"}, {"input": "10 10\n10 0\n", "output": "100"}, {"input": "87 87\n2 10\n", "output": "174"}, {"input": "1 11\n6 2\n", "output": "36"}, {"input": "100 10\n10 10\n", "output": "550"}]}
{"statement": "Task: Given a string consisting of n letters 'a', find the minimum time required to generate the input file of exactly n letters 'a' using a text editor. The editor can insert or delete a letter 'a' in x seconds and copy the entire text in y seconds.\n\nInput: The input consists of three integers n, x, and y, where n is the number of letters 'a' in the input file and x and y are the time required to insert or delete a letter 'a' and copy the entire text, respectively. The input is provided through standard input.\n\nOutput: Print the only integer t \u2014 the minimum amount of time needed to generate the input file.\n\nConstraints: The input integers n, x, and y are such that 1 \u2264 n \u2264 10^7 and 1 \u2264 x, y \u2264 10^9.", "editorial": "", "tag": "['Dynamic programming', 'Graph traversal']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/710/E", "sample_test_cases": [{"input": "8 1 1\n", "output": "4\n"}, {"input": "8 1 10\n", "output": "8\n"}, {"input": "10 62 99\n", "output": "384\n"}, {"input": "88 417 591\n", "output": "4623\n"}, {"input": "57 5289 8444\n", "output": "60221\n"}]}
{"statement": "Task: Given n tiles with integers written on them, find the maximum number of triples that can be formed from the tiles. A triple consists of three tiles, and the numbers on the tiles must be either the same or consecutive.\n\nInput: The first line of input contains two integers n and m, where n is the number of tiles in the player's hand, and m is the number of tile types. The second line contains n integers a1, a2, ..., an, where ai denotes the number written on the i-th tile. Input is provided through standard input.\n\nOutput: The output should be a single integer, which represents the maximum number of triples that can be formed from the given tiles.\n\nConstraints: 1 \u2264 n, m \u2264 10^6, and 1 \u2264 ai \u2264 m.\n\nExplanation: This problem can be modeled as a combinatorial problem, where the goal is to find the maximum number of combinations of three integers that satisfy the given conditions. The integers can be sorted and grouped based on their values, and then combinations can be formed by selecting three integers from each group. The maximum number of combinations can be found by selecting the group with the largest number of integers, and then dividing the number of integers in that group by three. The result is the maximum number of triples that can be formed from the given tiles.", "editorial": "", "tag": "['Dynamic programming']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1110/D", "sample_test_cases": [{"input": "14 9\n5 5 6 8 8 4 3 2 2 7 3 9 5 4\n", "output": "4\n"}, {"input": "14 11\n10 8 6 1 7 2 9 5 5 10 3 5 11 3\n", "output": "4\n"}, {"input": "1 1\n1\n", "output": "0\n"}, {"input": "3 3\n2 2 2\n", "output": "1\n"}, {"input": "10 4\n1 4 2 3 1 3 3 4 1 3\n", "output": "3\n"}]}
{"statement": "Task: Given a rectangular blanket consisting of $n \\cdot m$ colored cells, find the number of subrectangles that can be cut out and sold as valid flags. A subrectangle is considered a valid flag if it consists of three stripes of equal heights placed one above another, where each stripe consists of cells of equal color. The color of the top stripe must be different from the color of the middle stripe, and the color of the middle stripe must be different from the color of the bottom stripe.\n\nInput: The input consists of two integers $n$ and $m$ representing the number of rows and columns of the rectangular blanket, respectively. This is followed by $n$ lines each containing $m$ lowercase English letters from 'a' to 'z' representing the colors of the cells. The input is provided through standard input.\n\nOutput: The output should consist of a single integer representing the number of subrectangles that can be cut out from the blanket and sold as valid flags.\n\nConstraints: $1 \\le n, m \\le 1,000$.", "editorial": "", "tag": "['Dynamic programming', 'Combinatorics', 'Implementation', 'Complete search']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1181/C", "sample_test_cases": [{"input": "4 3\naaa\nbbb\nccb\nddd\n", "output": "6\n"}, {"input": "6 1\na\na\nb\nb\nc\nc\n", "output": "1\n"}, {"input": "1 1\na\n", "output": "0\n"}, {"input": "10 10\naaaaarpppp\nbbbbsssssu\ncciiiiiiqq\nddmmgggggg\neeebbbbbbb\nfffffqoooo\ngxxxxrrrrr\nhhfuuuuuuu\niiillqqqqq\njjjjjppwww\n", "output": "138\n"}, {"input": "10 10\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\neeeeeeeeee\nffffffffff\ngggggggggg\nhhhhhhhhhh\niiiiiiiiii\njjjjjjjjjj\n", "output": "440\n"}]}
{"statement": "Task: Given a string s of length |s| consisting of lowercase English letters and q queries, each query described by two integers li and ri (1 \u2264 li \u2264 ri \u2264 |s|), find the number of palindrome substrings in the substring s[li... ri].\n\nInput: The first line of input contains a string s of length |s| (1 \u2264 |s| \u2264 5000). The second line contains a single integer q (1 \u2264 q \u2264 106) representing the number of queries. Each of the next q lines contains two space-separated integers li and ri (1 \u2264 li \u2264 ri \u2264 |s|) representing the query range.\n\nOutput: The output should consist of q integers, representing the number of palindrome substrings in the corresponding query range.\n\nConstraints: The given string s consists only of lowercase English letters.", "editorial": "", "tag": "['String algorithms', 'Dynamic programming']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/245/H", "sample_test_cases": [{"input": "ab\n100\n1 2\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 1\n1 1\n1 1\n1 2\n1 1\n1 2\n1 2\n2 2\n1 1\n1 1\n2 2\n1 1\n1 2\n1 1\n1 2\n1 2\n1 1\n1 1\n1 2\n1 2\n1 1\n2 2\n1 2\n2 2\n2 2\n2 2\n2 2\n2 2\n1 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n2 2\n2 2\n1 1\n2 2\n1 1\n1 1\n1 2\n1 1\n2 2\n1 1\n1 2\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 1\n1 2\n1 1\n1 2\n1 2\n1 2\n2 2\n1 1\n2 2\n2 2\n2 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 1\n2 2\n1 1\n1 2\n2 2\n1 2\n1 1\n2 2\n1 2\n2 2\n2 2\n1 2\n1 1\n1 2\n2 2\n", "output": "2\n2\n1\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n2\n1\n2\n2\n1\n1\n1\n1\n1\n2\n1\n2\n2\n1\n1\n2\n2\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n1\n2\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n1\n1\n1\n2\n1\n2\n1\n1\n2\n1\n1\n2\n1\n2\n1\n"}, {"input": "caa\n100\n2 3\n2 3\n1 3\n2 3\n2 2\n2 3\n1 1\n1 3\n1 3\n1 2\n3 3\n1 3\n1 3\n3 3\n1 2\n1 3\n1 3\n2 2\n2 2\n1 2\n1 3\n1 3\n1 3\n1 2\n3 3\n1 1\n2 3\n2 3\n1 2\n2 3\n1 3\n1 2\n1 3\n2 3\n3 3\n1 2\n2 3\n1 2\n1 3\n1 1\n2 2\n2 2\n2 3\n2 2\n2 3\n1 3\n1 1\n1 2\n1 3\n1 3\n2 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 1\n1 1\n1 2\n2 3\n1 1\n2 3\n3 3\n2 2\n1 2\n1 3\n1 2\n1 2\n1 2\n2 3\n1 2\n1 2\n1 3\n3 3\n1 2\n2 2\n1 2\n2 2\n1 1\n2 3\n1 2\n1 2\n1 2\n1 2\n2 2\n1 1\n1 2\n3 3\n2 3\n1 2\n1 2\n2 3\n1 2\n1 2\n1 3\n2 3\n1 3\n1 1\n2 2\n1 2\n", "output": "3\n3\n4\n3\n1\n3\n1\n4\n4\n2\n1\n4\n4\n1\n2\n4\n4\n1\n1\n2\n4\n4\n4\n2\n1\n1\n3\n3\n2\n3\n4\n2\n4\n3\n1\n2\n3\n2\n4\n1\n1\n1\n3\n1\n3\n4\n1\n2\n4\n4\n3\n2\n4\n2\n4\n2\n1\n1\n2\n3\n1\n3\n1\n1\n2\n4\n2\n2\n2\n3\n2\n2\n4\n1\n2\n1\n2\n1\n1\n3\n2\n2\n2\n2\n1\n1\n2\n1\n3\n2\n2\n3\n2\n2\n4\n3\n4\n1\n1\n2\n"}, {"input": "ccca\n100\n2 4\n1 2\n1 1\n2 3\n3 4\n3 4\n2 2\n3 3\n1 2\n1 4\n2 2\n1 3\n1 4\n4 4\n1 2\n2 3\n3 4\n1 3\n3 4\n2 3\n1 1\n2 4\n1 4\n1 2\n2 2\n2 2\n1 1\n3 3\n1 2\n2 3\n2 3\n1 2\n1 4\n4 4\n2 2\n2 2\n4 4\n1 4\n1 1\n1 2\n4 4\n2 3\n2 4\n3 3\n1 4\n2 4\n2 3\n4 4\n4 4\n3 4\n2 2\n1 2\n1 1\n1 2\n3 3\n2 4\n1 3\n2 4\n1 1\n3 3\n3 4\n2 4\n1 4\n2 4\n1 2\n3 3\n1 4\n2 2\n2 4\n1 4\n1 4\n1 3\n3 4\n1 2\n2 3\n2 3\n3 4\n1 4\n4 4\n3 3\n2 4\n2 2\n1 2\n2 3\n1 2\n1 4\n1 3\n2 3\n4 4\n3 3\n1 2\n4 4\n2 4\n1 2\n2 4\n2 2\n3 4\n2 3\n2 3\n2 3\n", "output": "4\n3\n1\n3\n2\n2\n1\n1\n3\n7\n1\n6\n7\n1\n3\n3\n2\n6\n2\n3\n1\n4\n7\n3\n1\n1\n1\n1\n3\n3\n3\n3\n7\n1\n1\n1\n1\n7\n1\n3\n1\n3\n4\n1\n7\n4\n3\n1\n1\n2\n1\n3\n1\n3\n1\n4\n6\n4\n1\n1\n2\n4\n7\n4\n3\n1\n7\n1\n4\n7\n7\n6\n2\n3\n3\n3\n2\n7\n1\n1\n4\n1\n3\n3\n3\n7\n6\n3\n1\n1\n3\n1\n4\n3\n4\n1\n2\n3\n3\n3\n"}, {"input": "a\n100\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "output": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"}, {"input": "caa\n100\n2 3\n2 3\n1 3\n2 3\n2 2\n2 3\n1 1\n1 3\n1 3\n1 2\n3 3\n1 3\n1 3\n3 3\n1 2\n1 3\n1 3\n2 2\n2 2\n1 2\n1 3\n1 3\n1 3\n1 2\n3 3\n1 1\n2 3\n2 3\n1 2\n2 3\n1 3\n1 2\n1 3\n2 3\n3 3\n1 2\n2 3\n1 3\n1 3\n1 1\n2 2\n2 2\n2 3\n2 2\n2 3\n1 3\n1 1\n1 2\n1 3\n1 3\n2 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 1\n1 1\n1 2\n2 3\n1 1\n2 3\n3 3\n2 2\n1 2\n1 3\n1 2\n1 2\n1 2\n2 3\n1 2\n1 2\n1 3\n3 3\n1 2\n2 2\n1 2\n2 2\n1 1\n2 3\n1 2\n1 2\n1 2\n1 2\n2 2\n1 1\n1 2\n3 3\n2 3\n1 2\n1 2\n2 3\n1 2\n1 2\n1 3\n2 3\n1 3\n1 1\n2 2\n1 2\n", "output": "3\n3\n4\n3\n1\n3\n1\n4\n4\n2\n1\n4\n4\n1\n2\n4\n4\n1\n1\n2\n4\n4\n4\n2\n1\n1\n3\n3\n2\n3\n4\n2\n4\n3\n1\n2\n3\n4\n4\n1\n1\n1\n3\n1\n3\n4\n1\n2\n4\n4\n3\n2\n4\n2\n4\n2\n1\n1\n2\n3\n1\n3\n1\n1\n2\n4\n2\n2\n2\n3\n2\n2\n4\n1\n2\n1\n2\n1\n1\n3\n2\n2\n2\n2\n1\n1\n2\n1\n3\n2\n2\n3\n2\n2\n4\n3\n4\n1\n1\n2\n"}]}
{"statement": "Task: Given a sequence A of N integers, and two integers k and p, split A into k contiguous and non-overlapping subarrays such that the sum of the scores of those subarrays is minimized. The score of a subarray is the sum of its elements modulo p.\n\nInput: The input consists of three integers N, k, and p on the first line, followed by N integers representing the sequence A on the second line. The input is provided through standard input.\n\nOutput: Output a single integer, which is the minimum sum of scores of k contiguous and non-overlapping subarrays of the given sequence A.\n\nConstraints: The input sequence A has at most 500,000 elements, and k and p are at most 100. Each element of A is an integer between 1 and 1,000,000.", "editorial": "", "tag": "['Dynamic programming', 'Data structures']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/958/C3", "sample_test_cases": [{"input": "4 3 10\n3 4 7 3\n", "output": "7\n"}, {"input": "4 3 10\n3 7 7 3\n", "output": "10\n"}, {"input": "10 5 12\n16 3 24 8 9 8 7 5 12 12\n", "output": "8\n"}, {"input": "4 3 10\n5 7 7 3\n", "output": "12\n"}, {"input": "4 2 10\n3 4 14 3\n", "output": "4\n"}]}
{"statement": "Task: Given a table of positive integers with n rows and m columns, compress the table such that the relative order of elements in each row and column remains the same, and the maximum value in the compressed table is minimized.\n\nInput: The input consists of two integers n and m denoting the number of rows and columns of the table respectively, followed by n rows each containing m integers. The input is provided through standard input.\n\nOutput: Output the compressed table in form of n lines each containing m integers.\n\nConstraints: The input integers ai, j are positive integers and 1 \u2264 ai, j \u2264 109. The input table has at most 50 rows and columns.", "editorial": "", "tag": "['Graph algorithms', 'Graph traversal', 'Greedy algorithms', 'Dynamic programming', 'Spanning trees']", "difficulties": "HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/650/C", "sample_test_cases": [{"input": "1 48\n661781480 254994501 793217098 79665228 199745889 421882115 409323554 689271596 807513352 748218518 294849899 105389023 805950383 306545085 294849899 626862773 365681051 376812180 378266471 892695176 113846442 160323626 369898712 254994501 874749921 240835817 182326424 941375528 129084081 793217098 793217098 817608760 892695176 751787201 798639707 793217098 252530514 662195737 102912484 182326424 169250874 793217098 387582363 927903358 972357925 919457817 793217098 550564947\n", "output": "24 12 29 1 9 21 20 26 32 27 13 3 31 14 13 23 15 17 18 35 4 6 16 12 34 10 8 38 5 29 29 33 35 28 30 29 11 25 2 8 7 29 19 37 39 36 29 22\n"}, {"input": "3 3\n867378143 815728296 448999007\n378701035 448999007 815728296\n867378143 815728296 448999007\n", "output": "4 3 1\n1 2 3\n4 3 1\n"}, {"input": "8 13\n1 2 3 4 5 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 5 1 1 1 1 1\n1 5 1 1 5 1 1 1 1 1 1 1 1\n5 1 1 1 1 5 1 1 1 1 1 1 1\n1 1 1 1 1 1 5 1 1 1 1 1 1\n1 5 1 1 1 5 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n6 1 1 1 1 1 1 1 7 8 9 10 11\n", "output": "1 2 3 4 5 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 2 1 1 1 1 1\n1 5 1 1 5 1 1 1 1 1 1 1 1\n5 1 1 1 1 5 1 1 1 1 1 1 1\n1 1 1 1 1 1 2 1 1 1 1 1 1\n1 5 1 1 1 5 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n6 1 1 1 1 1 1 1 7 8 9 10 11\n"}, {"input": "1 1\n958605409\n", "output": "1\n"}, {"input": "6 6\n1 2 3 4 5 6\n7 9 9 9 9 7\n9 7 9 9 7 9\n9 9 7 7 9 9\n9 7 9 7 9 9\n7 9 9 9 7 9\n", "output": "1 2 3 4 5 6\n7 8 8 8 8 7\n8 7 8 8 7 8\n8 8 7 7 8 8\n8 7 8 7 8 8\n7 8 8 8 7 8\n"}]}
{"statement": "Task: Given an integer $n$, find the number of perfectly balanced striped binary search trees with $n$ vertices that have distinct integer keys between $1$ and $n$, inclusive. A binary search tree is a rooted binary tree, whose nodes each store a key and each have at most two distinguished subtrees, left and right. The key in each node must be greater than any key stored in the left subtree, and less than any key stored in the right subtree. A binary search tree is perfectly balanced if there doesn't exist a binary search tree with the same number of vertices that has a strictly smaller sum of depths of its vertices. A binary search tree with integer keys is striped if both of the following conditions are satisfied for every vertex $v$: If $v$ has a left subtree whose root is $u$, then the parity of the key of $v$ is different from the parity of the key of $u$. If $v$ has a right subtree whose root is $w$, then the parity of the key of $v$ is the same as the parity of the key of $w$.\n\nInput: The input consists of a single integer $n$ ($1 \\le n \\le 10^6$), representing the number of vertices in the binary search tree. The input is provided through standard input.\n\nOutput: Output a single integer, which is the number of perfectly balanced striped binary search trees with $n$ vertices that have distinct integer keys between $1$ and $n$, inclusive, modulo $998\\,244\\,353$.\n\nConstraints: $1 \\le n \\le 10^6$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1237/E", "sample_test_cases": [{"input": "4\n", "output": "1\n"}, {"input": "3\n", "output": "0\n"}, {"input": "2\n", "output": "1\n"}, {"input": "5\n", "output": "1\n"}, {"input": "7\n", "output": "0\n"}]}
{"statement": "Task: Given an integer $n$, determine whether it can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$.\n\nInput: The input consists of multiple test cases. The first line of each test case contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Each of the following $t$ lines contains an integer $n$ ($1 \\leq n \\leq 10^6$) \u2014 the number that needs to be expressed as the sum of $2020$ and $2021$. The input is read from standard input.\n\nOutput: For each test case, output a single line containing either \"YES\" if the given number $n$ can be expressed as a sum of a certain number of $2020$ and a certain number of $2021$, or \"NO\" otherwise. The output is written to standard output.\n\nConstraints: Each test case has an integer $n$ such that $1 \\leq n \\leq 10^6$.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Complete search']", "difficulties": "EASY", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1475/B", "sample_test_cases": [{"input": "5\n1\n4041\n4042\n8081\n8079\n", "output": "NO\nYES\nYES\nYES\nNO\n"}, {"input": "1\n2020\n", "output": "YES\n"}, {"input": "3\n2020\n2021\n4040\n", "output": "YES\nYES\nYES\n"}, {"input": "1\n2021\n", "output": "YES\n"}, {"input": "1\n4040\n", "output": "YES\n"}]}
{"statement": "Task: Given a cliff of height h and n moved out platforms, determine the minimum number of magic crystals needed to safely land on the ground level. The character can move between different platforms by switching the state of two platforms using a lever. The character can only move to the platform one unit below and can safely fall from a height no more than 2.\n\nInput: The input consists of T test cases. Each test case starts with a line containing two integers, h and n. The second line contains n integers p1, p2, ..., pn, representing the heights of the moved out platforms in descending order. The sum of n over all test cases does not exceed 2 * 10^5. The input is read from standard input.\n\nOutput: For each test case, output a single integer representing the minimum number of magic crystals needed to safely land on the ground level.\n\nConstraints: 1 \u2264 T \u2264 100, 1 \u2264 h \u2264 10^9, 1 \u2264 n \u2264 min(h, 2 * 10^5), h = p1 > p2 > ... > pn \u2265 1.", "editorial": "", "tag": "['Dynamic programming', 'Mathematics', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1238/C", "sample_test_cases": [{"input": "4\n3 2\n3 1\n8 6\n8 7 6 5 3 2\n9 6\n9 8 5 4 3 1\n1 1\n1\n", "output": "0\n1\n2\n0\n"}, {"input": "28\n8 4\n8 7 6 3\n8 5\n8 7 6 3 1\n8 5\n8 7 6 3 2\n8 6\n8 7 6 3 2 1\n8 4\n8 7 6 4\n8 5\n8 7 6 4 1\n8 5\n8 7 6 4 2\n8 6\n8 7 6 4 2 1\n8 5\n8 7 6 4 3\n8 6\n8 7 6 4 3 1\n8 6\n8 7 6 4 3 2\n8 7\n8 7 6 4 3 2 1\n8 4\n8 7 6 5\n8 5\n8 7 6 5 1\n8 5\n8 7 6 5 2\n8 6\n8 7 6 5 2 1\n8 5\n8 7 6 5 3\n8 6\n8 7 6 5 3 1\n8 6\n8 7 6 5 3 2\n8 7\n8 7 6 5 3 2 1\n8 5\n8 7 6 5 4\n8 6\n8 7 6 5 4 1\n8 6\n8 7 6 5 4 2\n8 7\n8 7 6 5 4 2 1\n8 6\n8 7 6 5 4 3\n8 7\n8 7 6 5 4 3 1\n8 7\n8 7 6 5 4 3 2\n8 8\n8 7 6 5 4 3 2 1\n", "output": "1\n1\n0\n0\n1\n1\n2\n1\n0\n0\n1\n0\n1\n1\n2\n1\n2\n2\n1\n1\n0\n0\n1\n0\n1\n1\n0\n0\n"}, {"input": "4\n1 1\n1\n3 2\n3 1\n8 6\n8 7 6 5 3 2\n9 6\n9 8 5 4 3 1\n", "output": "0\n0\n1\n2\n"}, {"input": "1\n3 2\n3 2\n", "output": "1\n"}, {"input": "1\n3 2\n3 2\n", "output": "1\n"}]}
{"statement": "Task: Given a federation of N planets connected by N-1 space tunnels, and D parallel universes, each with the same planets and tunnels, find the number of different portal placements where Captain \u00c1gnes wins a game against Lieutenant G\u00e1bor. Captain \u00c1gnes and Lieutenant G\u00e1bor take turns choosing a destination planet, either in the same universe or in a different universe through a portal, with the aim of visiting as many new planets as possible. Captain \u00c1gnes goes first. They both play optimally. \n\nInput: The input consists of two integers N and D, followed by N-1 lines each containing two integers u and v, representing a space tunnel between planets P_u^i and P_v^i in all universes. The input is provided through standard input.\n\nOutput: The output should be a single integer, the number of possible placements of portals where Captain \u00c1gnes wins, modulo 10^9+7.\n\nConstraints: 1 \u2264 N \u2264 10^5, 1 \u2264 D \u2264 10^18, and 1 \u2264 u,v \u2264 N.", "editorial": "", "tag": "['Graph algorithms', 'Graph traversal', 'Combinatorics', 'Tree algorithms', 'Dynamic programming', 'Game theory', 'Matrices']", "difficulties": "VERY_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1402/C", "sample_test_cases": [{"input": "3 1\n1 2\n2 3\n", "output": "\n4\n"}]}
{"statement": "Task: Given an array $a$ of $n$ integers, you can reverse at most one subarray of the array. Your task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized. You have to answer $t$ independent test cases.\n\nInput: The input consists of $t$ test cases. The first line of each test case contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_0, a_1, \\dots, a_{n-1}$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$. Input is provided through standard input.\n\nOutput: For each test case, print the maximum possible sum of elements on even positions after reversing at most one subarray of $a$.\n\nConstraints: $\\sum n \\le 2 \\cdot 10^5$; $1\\le T\\le 2\\cdot 10^4$.\n\nNotation: Let $a[l;r]$ denote the subarray of $a$ with borders $l$ and $r$. Let $k = \\lfloor\\frac{n-1}{2}\\rfloor$.", "editorial": "", "tag": "['Dynamic programming', 'Divide and conquer', 'Implementation', 'Greedy algorithms']", "difficulties": "MEDIUM_HARD", "source": "codeforces", "url": "https://codeforces.com/problemset/problem/1373/D", "sample_test_cases": [{"input": "4\n8\n1 7 3 4 7 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 7 6 8 9 7 3\n4\n3 1 2 1\n", "output": "26\n5\n37\n5\n"}, {"input": "3\n5\n17 6 4 4 4\n7\n19 5 13 11 12 13 5\n1\n213567876\n", "output": "27\n57\n213567876\n"}, {"input": "3\n5\n17 6 4 4 4\n7\n19 5 13 11 12 13 5\n1\n213567876\n", "output": "27\n57\n213567876\n"}, {"input": "4\n8\n1 7 3 4 8 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 7 6 8 9 7 3\n4\n3 1 2 1\n", "output": "26\n5\n37\n5\n"}, {"input": "4\n8\n1 7 3 4 8 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 7 6 8 9 7 3\n4\n5 1 2 1\n", "output": "26\n5\n37\n7\n"}]}
